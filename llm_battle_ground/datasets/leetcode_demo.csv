question_slug,question_title,frontend_question_id,question_id,raw_content,difficulty,paid_only,cpp_snippet,java_snippet,python_snippet,python3_snippet,c_snippet,csharp_snippet,javascript_snippet,ruby_snippet,swift_snippet,golang_snippet,scala_snippet,kotlin_snippet,rust_snippet,php_snippet,typescript_snippet,racket_snippet,erlang_snippet,elixir_snippet,dart_snippet,raw_snippet,raw_forward_completion,cleaned_snippet,cleaned_forward_completion,cleaned_content,react_snippet
apply-operations-to-maximize-score,Apply Operations to Maximize Score,2818.0,3001.0,"<p>You are given an array <code>nums</code> of <code>n</code> positive integers and an integer <code>k</code>.</p>

<p>Initially, you start with a score of <code>1</code>. You have to maximize your score by applying the following operation at most <code>k</code> times:</p>

<ul>
	<li>Choose any <strong>non-empty</strong> subarray <code>nums[l, ..., r]</code> that you haven&#39;t chosen previously.</li>
	<li>Choose an element <code>x</code> of <code>nums[l, ..., r]</code> with the highest <strong>prime score</strong>. If multiple such elements exist, choose the one with the smallest index.</li>
	<li>Multiply your score by <code>x</code>.</li>
</ul>

<p>Here, <code>nums[l, ..., r]</code> denotes the subarray of <code>nums</code> starting at index <code>l</code> and ending at the index <code>r</code>, both ends being inclusive.</p>

<p>The <strong>prime score</strong> of an integer <code>x</code> is equal to the number of distinct prime factors of <code>x</code>. For example, the prime score of <code>300</code> is <code>3</code> since <code>300 = 2 * 2 * 3 * 5 * 5</code>.</p>

<p>Return <em>the <strong>maximum possible score</strong> after applying at most </em><code>k</code><em> operations</em>.</p>

<p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [8,3,9,3,8], k = 2
<strong>Output:</strong> 81
<strong>Explanation:</strong> To get a score of 81, we can apply the following operations:
- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.
It can be proven that 81 is the highest score one can obtain.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [19,12,14,6,10,18], k = 3
<strong>Output:</strong> 4788
<strong>Explanation:</strong> To get a score of 4788, we can apply the following operations: 
- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.
- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.
It can be proven that 4788 is the highest score one can obtain.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10<sup>9</sup>)</code></li>
</ul>
",3.0,False,"class Solution {
public:
    int maximumScore(vector<int>& nums, int k) {
        
    }
};","class Solution {
    public int maximumScore(List<Integer> nums, int k) {
        
    }
}","class Solution(object):
    def maximumScore(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""
        ","class Solution:
    def maximumScore(self, nums: List[int], k: int) -> int:
        ","int maximumScore(int* nums, int numsSize, int k){

}","public class Solution {
    public int MaximumScore(IList<int> nums, int k) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var maximumScore = function(nums, k) {
    
};","# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def maximum_score(nums, k)
    
end","class Solution {
    func maximumScore(_ nums: [Int], _ k: Int) -> Int {
        
    }
}","func maximumScore(nums []int, k int) int {
    
}","object Solution {
    def maximumScore(nums: List[Int], k: Int): Int = {
        
    }
}","class Solution {
    fun maximumScore(nums: List<Int>, k: Int): Int {
        
    }
}","impl Solution {
    pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function maximumScore($nums, $k) {
        
    }
}","function maximumScore(nums: number[], k: number): number {

};","(define/contract (maximum-score nums k)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec maximum_score(Nums :: [integer()], K :: integer()) -> integer().
maximum_score(Nums, K) ->
  .","defmodule Solution do
  @spec maximum_score(nums :: [integer], k :: integer) :: integer
  def maximum_score(nums, k) do

  end
end","class Solution {
  int maximumScore(List<int> nums, int k) {

  }
}",<p>You are given an array <code>nums</code> of <code>n</code> positive integers and an integer <code>k</code>.</p>,"<p>

<p>Initially, you start with a score of <code>1</code>. You have to maximize your score by applying the following operation at most <code>k</code> times:</p>

<ul>
	<li>Choose any <strong>non-empty</strong> subarray <code>nums[l, ..., r]</code> that you haven&#39;t chosen previously.</li>
	<li>Choose an element <code>x</code> of <code>nums[l, ..., r]</code> with the highest <strong>prime score</strong>. If multiple such elements exist, choose the one with the smallest index.</li>
	<li>Multiply your score by <code>x</code>.</li>
</ul>

<p>Here, <code>nums[l, ..., r]</code> denotes the subarray of <code>nums</code> starting at index <code>l</code> and ending at the index <code>r</code>, both ends being inclusive.</p>

<p>The <strong>prime score</strong> of an integer <code>x</code> is equal to the number of distinct prime factors of <code>x</code>. For example, the prime score of <code>300</code> is <code>3</code> since <code>300 = 2 * 2 * 3 * 5 * 5</code>.</p>

<p>Return <em>the <strong>maximum possible score</strong> after applying at most </em><code>k</code><em> operations</em>.</p>

<p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [8,3,9,3,8], k = 2
<strong>Output:</strong> 81
<strong>Explanation:</strong> To get a score of 81, we can apply the following operations:
- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.
It can be proven that 81 is the highest score one can obtain.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [19,12,14,6,10,18], k = 3
<strong>Output:</strong> 4788
<strong>Explanation:</strong> To get a score of 4788, we can apply the following operations: 
- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.
- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.
It can be proven that 4788 is the highest score one can obtain.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10<sup>9</sup>)</code></li>
</ul>
","
LeetCode Problem #2818
Title: Apply Operations to Maximize Score
Description:
You are given an array nums of n positive integers and an integer k....
","Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times: Choose any non-empty subarray nums[l,. . . , r] that you haven't chosen previously. Choose an element x of nums[l,. . . , r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index. Multiply your score by x. Here, nums[l,. . . , r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive. The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5. Return the maximum possible score after applying at most k operations. Since the answer may be large, return it modulo 10e9 + 7. Example 1: Input: nums = [8, 3, 9, 3, 8], k = 2 Output: 81 Explanation: To get a score of 81, we can apply the following operations: - Choose subarray nums[2,. . . , 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9. - Choose subarray nums[2,. . . , 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81. It can be proven that 81 is the highest score one can obtain. Example 2: Input: nums = [19, 12, 14, 6, 10, 18], k = 3 Output: 4788 Explanation: To get a score of 4788, we can apply the following operations: - Choose subarray nums[0,. . . , 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19. - Choose subarray nums[5,. . . , 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342. - Choose subarray nums[2,. . . , 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788. It can be proven that 4788 is the highest score one can obtain. Constraints: 1 <= nums.length == n <= 10e5 1 <= nums[i] <= 10e5 1 <= k <= min(n * (n + 1) / 2, 10e9 )
","You are given an array nums of n positive integers and an integer k. Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times: Choose any non-empty subarray nums[l,. . . , r] that you haven't chosen previously. Choose an element x of nums[l,. . . , r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index. Multiply your score by x. Here, nums[l,. . . , r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive. The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5. Return the maximum possible score after applying at most k operations. Since the answer may be large, return it modulo 10e9 + 7. Example 1: Input: nums = [8, 3, 9, 3, 8], k = 2 Output: 81 Explanation: To get a score of 81, we can apply the following operations: - Choose subarray nums[2,. . . , 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9. - Choose subarray nums[2,. . . , 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81. It can be proven that 81 is the highest score one can obtain. Example 2: Input: nums = [19, 12, 14, 6, 10, 18], k = 3 Output: 4788 Explanation: To get a score of 4788, we can apply the following operations: - Choose subarray nums[0,. . . , 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19. - Choose subarray nums[5,. . . , 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342. - Choose subarray nums[2,. . . , 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788. It can be proven that 4788 is the highest score one can obtain. Constraints: 1 <= nums.length == n <= 10e5 1 <= nums[i] <= 10e5 1 <= k <= min(n * (n + 1) / 2, 10e9 )",
minimum-absolute-difference-between-elements-with-constraint,Minimum Absolute Difference Between Elements With Constraint,2817.0,3000.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>x</code>.</p>

<p>Find the <strong>minimum absolute difference</strong> between two elements in the array that are at least <code>x</code> indices apart.</p>

<p>In other words, find two indices <code>i</code> and <code>j</code> such that <code>abs(i - j) &gt;= x</code> and <code>abs(nums[i] - nums[j])</code> is minimized.</p>

<p>Return<em> an integer denoting the <strong>minimum</strong> absolute difference between two elements that are at least</em> <code>x</code> <em>indices apart</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,3,2,4], x = 2
<strong>Output:</strong> 0
<strong>Explanation:</strong> We can select nums[0] = 4 and nums[3] = 4. 
They are at least 2 indices apart, and their absolute difference is the minimum, 0. 
It can be shown that 0 is the optimal answer.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,3,2,10,15], x = 1
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can select nums[1] = 3 and nums[2] = 2.
They are at least 1 index apart, and their absolute difference is the minimum, 1.
It can be shown that 1 is the optimal answer.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3,4], x = 3
<strong>Output:</strong> 3
<strong>Explanation:</strong> We can select nums[0] = 1 and nums[3] = 4.
They are at least 3 indices apart, and their absolute difference is the minimum, 3.
It can be shown that 3 is the optimal answer.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>0 &lt;= x &lt; nums.length</code></li>
</ul>
",2.0,False,"class Solution {
public:
    int minAbsoluteDifference(vector<int>& nums, int x) {
        
    }
};","class Solution {
    public int minAbsoluteDifference(List<Integer> nums, int x) {
        
    }
}","class Solution(object):
    def minAbsoluteDifference(self, nums, x):
        """"""
        :type nums: List[int]
        :type x: int
        :rtype: int
        """"""
        ","class Solution:
    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:
        ","int minAbsoluteDifference(int* nums, int numsSize, int x){

}","public class Solution {
    public int MinAbsoluteDifference(IList<int> nums, int x) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} x
 * @return {number}
 */
var minAbsoluteDifference = function(nums, x) {
    
};","# @param {Integer[]} nums
# @param {Integer} x
# @return {Integer}
def min_absolute_difference(nums, x)
    
end","class Solution {
    func minAbsoluteDifference(_ nums: [Int], _ x: Int) -> Int {
        
    }
}","func minAbsoluteDifference(nums []int, x int) int {
    
}","object Solution {
    def minAbsoluteDifference(nums: List[Int], x: Int): Int = {
        
    }
}","class Solution {
    fun minAbsoluteDifference(nums: List<Int>, x: Int): Int {
        
    }
}","impl Solution {
    pub fn min_absolute_difference(nums: Vec<i32>, x: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $x
     * @return Integer
     */
    function minAbsoluteDifference($nums, $x) {
        
    }
}","function minAbsoluteDifference(nums: number[], x: number): number {

};","(define/contract (min-absolute-difference nums x)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec min_absolute_difference(Nums :: [integer()], X :: integer()) -> integer().
min_absolute_difference(Nums, X) ->
  .","defmodule Solution do
  @spec min_absolute_difference(nums :: [integer], x :: integer) :: integer
  def min_absolute_difference(nums, x) do

  end
end","class Solution {
  int minAbsoluteDifference(List<int> nums, int x) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>x</code>.</p>,"<p>

<p>Find the <strong>minimum absolute difference</strong> between two elements in the array that are at least <code>x</code> indices apart.</p>

<p>In other words, find two indices <code>i</code> and <code>j</code> such that <code>abs(i - j) &gt;= x</code> and <code>abs(nums[i] - nums[j])</code> is minimized.</p>

<p>Return<em> an integer denoting the <strong>minimum</strong> absolute difference between two elements that are at least</em> <code>x</code> <em>indices apart</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,3,2,4], x = 2
<strong>Output:</strong> 0
<strong>Explanation:</strong> We can select nums[0] = 4 and nums[3] = 4. 
They are at least 2 indices apart, and their absolute difference is the minimum, 0. 
It can be shown that 0 is the optimal answer.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,3,2,10,15], x = 1
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can select nums[1] = 3 and nums[2] = 2.
They are at least 1 index apart, and their absolute difference is the minimum, 1.
It can be shown that 1 is the optimal answer.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3,4], x = 3
<strong>Output:</strong> 3
<strong>Explanation:</strong> We can select nums[0] = 1 and nums[3] = 4.
They are at least 3 indices apart, and their absolute difference is the minimum, 3.
It can be shown that 3 is the optimal answer.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>0 &lt;= x &lt; nums.length</code></li>
</ul>
","
LeetCode Problem #2817
Title: Minimum Absolute Difference Between Elements With Constraint
Description:
You are given a 0-indexed integer array nums and an integer x....
","Find the minimum absolute difference between two elements in the array that are at least x indices apart. In other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized. Return an integer denoting the minimum absolute difference between two elements that are at least x indices apart. Example 1: Input: nums = [4, 3, 2, 4], x = 2 Output: 0 Explanation: We can select nums[0] = 4 and nums[3] = 4. They are at least 2 indices apart, and their absolute difference is the minimum, 0. It can be shown that 0 is the optimal answer. Example 2: Input: nums = [5, 3, 2, 10, 15], x = 1 Output: 1 Explanation: We can select nums[1] = 3 and nums[2] = 2. They are at least 1 index apart, and their absolute difference is the minimum, 1. It can be shown that 1 is the optimal answer. Example 3: Input: nums = [1, 2, 3, 4], x = 3 Output: 3 Explanation: We can select nums[0] = 1 and nums[3] = 4. They are at least 3 indices apart, and their absolute difference is the minimum, 3. It can be shown that 3 is the optimal answer. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9 0 <= x < nums.length
","You are given a 0-indexed integer array nums and an integer x. Find the minimum absolute difference between two elements in the array that are at least x indices apart. In other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized. Return an integer denoting the minimum absolute difference between two elements that are at least x indices apart. Example 1: Input: nums = [4, 3, 2, 4], x = 2 Output: 0 Explanation: We can select nums[0] = 4 and nums[3] = 4. They are at least 2 indices apart, and their absolute difference is the minimum, 0. It can be shown that 0 is the optimal answer. Example 2: Input: nums = [5, 3, 2, 10, 15], x = 1 Output: 1 Explanation: We can select nums[1] = 3 and nums[2] = 2. They are at least 1 index apart, and their absolute difference is the minimum, 1. It can be shown that 1 is the optimal answer. Example 3: Input: nums = [1, 2, 3, 4], x = 3 Output: 3 Explanation: We can select nums[0] = 1 and nums[3] = 4. They are at least 3 indices apart, and their absolute difference is the minimum, 3. It can be shown that 3 is the optimal answer. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9 0 <= x < nums.length",
account-balance-after-rounded-purchase,Account Balance After Rounded Purchase,2806.0,2955.0,"<p>Initially, you have a bank account balance of <code>100</code> dollars.</p>

<p>You are given an integer <code>purchaseAmount</code> representing the amount you will spend on a purchase in dollars.</p>

<p>At the store where you will make the purchase, the purchase amount is rounded to the <strong>nearest multiple</strong> of <code>10</code>. In other words, you pay a <strong>non-negative</strong> amount, <code>roundedAmount</code>, such that <code>roundedAmount</code> is a multiple of <code>10</code> and <code>abs(roundedAmount - purchaseAmount)</code> is <strong>minimized</strong>.</p>

<p>If there is more than one nearest multiple of <code>10</code>, the <strong>largest multiple</strong> is chosen.</p>

<p>Return <em>an integer denoting your account balance after making a purchase worth </em><code>purchaseAmount</code><em> dollars from the store.</em></p>

<p><strong>Note:</strong> <code>0</code> is considered to be a multiple of <code>10</code> in this problem.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> purchaseAmount = 9
<strong>Output:</strong> 90
<strong>Explanation:</strong> In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> purchaseAmount = 15
<strong>Output:</strong> 80
<strong>Explanation:</strong> In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.
Hence, your account balance becomes 100 - 20 = 80.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>0 &lt;= purchaseAmount &lt;= 100</code></li>
</ul>
",1.0,False,"class Solution {
public:
    int accountBalanceAfterPurchase(int purchaseAmount) {
        
    }
};","class Solution {
    public int accountBalanceAfterPurchase(int purchaseAmount) {
        
    }
}","class Solution(object):
    def accountBalanceAfterPurchase(self, purchaseAmount):
        """"""
        :type purchaseAmount: int
        :rtype: int
        """"""
        ","class Solution:
    def accountBalanceAfterPurchase(self, purchaseAmount: int) -> int:
        ","int accountBalanceAfterPurchase(int purchaseAmount){

}","public class Solution {
    public int AccountBalanceAfterPurchase(int purchaseAmount) {
        
    }
}","/**
 * @param {number} purchaseAmount
 * @return {number}
 */
var accountBalanceAfterPurchase = function(purchaseAmount) {
    
};","# @param {Integer} purchase_amount
# @return {Integer}
def account_balance_after_purchase(purchase_amount)
    
end","class Solution {
    func accountBalanceAfterPurchase(_ purchaseAmount: Int) -> Int {
        
    }
}","func accountBalanceAfterPurchase(purchaseAmount int) int {
    
}","object Solution {
    def accountBalanceAfterPurchase(purchaseAmount: Int): Int = {
        
    }
}","class Solution {
    fun accountBalanceAfterPurchase(purchaseAmount: Int): Int {
        
    }
}","impl Solution {
    pub fn account_balance_after_purchase(purchase_amount: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer $purchaseAmount
     * @return Integer
     */
    function accountBalanceAfterPurchase($purchaseAmount) {
        
    }
}","function accountBalanceAfterPurchase(purchaseAmount: number): number {

};","(define/contract (account-balance-after-purchase purchaseAmount)
  (-> exact-integer? exact-integer?)

  )","-spec account_balance_after_purchase(PurchaseAmount :: integer()) -> integer().
account_balance_after_purchase(PurchaseAmount) ->
  .","defmodule Solution do
  @spec account_balance_after_purchase(purchase_amount :: integer) :: integer
  def account_balance_after_purchase(purchase_amount) do

  end
end","class Solution {
  int accountBalanceAfterPurchase(int purchaseAmount) {

  }
}","<p>Initially, you have a bank account balance of <code>100</code> dollars.</p>","<p>

<p>You are given an integer <code>purchaseAmount</code> representing the amount you will spend on a purchase in dollars.</p>

<p>At the store where you will make the purchase, the purchase amount is rounded to the <strong>nearest multiple</strong> of <code>10</code>. In other words, you pay a <strong>non-negative</strong> amount, <code>roundedAmount</code>, such that <code>roundedAmount</code> is a multiple of <code>10</code> and <code>abs(roundedAmount - purchaseAmount)</code> is <strong>minimized</strong>.</p>

<p>If there is more than one nearest multiple of <code>10</code>, the <strong>largest multiple</strong> is chosen.</p>

<p>Return <em>an integer denoting your account balance after making a purchase worth </em><code>purchaseAmount</code><em> dollars from the store.</em></p>

<p><strong>Note:</strong> <code>0</code> is considered to be a multiple of <code>10</code> in this problem.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> purchaseAmount = 9
<strong>Output:</strong> 90
<strong>Explanation:</strong> In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> purchaseAmount = 15
<strong>Output:</strong> 80
<strong>Explanation:</strong> In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.
Hence, your account balance becomes 100 - 20 = 80.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>0 &lt;= purchaseAmount &lt;= 100</code></li>
</ul>
","
LeetCode Problem #2806
Title: Account Balance After Rounded Purchase
Description:
Initially, you have a bank account balance of 100 dollars....
","You are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars. At the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of 10. In other words, you pay a non-negative amount, roundedAmount, such that roundedAmount is a multiple of 10 and abs(roundedAmount - purchaseAmount) is minimized. If there is more than one nearest multiple of 10, the largest multiple is chosen. Return an integer denoting your account balance after making a purchase worth purchaseAmount dollars from the store. Note: 0 is considered to be a multiple of 10 in this problem. Example 1: Input: purchaseAmount = 9 Output: 90 Explanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90. Example 2: Input: purchaseAmount = 15 Output: 80 Explanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen. Hence, your account balance becomes 100 - 20 = 80. Constraints: 0 <= purchaseAmount <= 100
","Initially, you have a bank account balance of 100 dollars. You are given an integer purchaseAmount representing the amount you will spend on a purchase in dollars. At the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of 10. In other words, you pay a non-negative amount, roundedAmount, such that roundedAmount is a multiple of 10 and abs(roundedAmount - purchaseAmount) is minimized. If there is more than one nearest multiple of 10, the largest multiple is chosen. Return an integer denoting your account balance after making a purchase worth purchaseAmount dollars from the store. Note: 0 is considered to be a multiple of 10 in this problem. Example 1: Input: purchaseAmount = 9 Output: 90 Explanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90. Example 2: Input: purchaseAmount = 15 Output: 80 Explanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen. Hence, your account balance becomes 100 - 20 = 80. Constraints: 0 <= purchaseAmount <= 100",
minimum-time-to-make-array-sum-at-most-x,Minimum Time to Make Array Sum At Most x,2809.0,2952.0,"<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of equal length. Every second, for all indices <code>0 &lt;= i &lt; nums1.length</code>, value of <code>nums1[i]</code> is incremented by <code>nums2[i]</code>. <strong>After</strong> this is done, you can do the following operation:</p>

<ul>
	<li>Choose an index <code>0 &lt;= i &lt; nums1.length</code> and make <code>nums1[i] = 0</code>.</li>
</ul>

<p>You are also given an integer <code>x</code>.</p>

<p>Return <em>the <strong>minimum</strong> time in which you can make the sum of all elements of </em><code>nums1</code><em> to be<strong> less than or equal</strong> to </em><code>x</code>, <em>or </em><code>-1</code><em> if this is not possible.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,2,3], nums2 = [1,2,3], x = 4
<strong>Output:</strong> 3
<strong>Explanation:</strong> 
For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. 
For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. 
For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. 
Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.

</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,2,3], nums2 = [3,3,3], x = 4
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code><font face=""monospace"">1 &lt;= nums1.length &lt;= 10<sup>3</sup></font></code></li>
	<li><code>1 &lt;= nums1[i] &lt;= 10<sup>3</sup></code></li>
	<li><code>0 &lt;= nums2[i] &lt;= 10<sup>3</sup></code></li>
	<li><code>nums1.length == nums2.length</code></li>
	<li><code>0 &lt;= x &lt;= 10<sup>6</sup></code></li>
</ul>
",3.0,False,"class Solution {
public:
    int minimumTime(vector<int>& nums1, vector<int>& nums2, int x) {
        
    }
};","class Solution {
    public int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {
        
    }
}","class Solution(object):
    def minimumTime(self, nums1, nums2, x):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :type x: int
        :rtype: int
        """"""
        ","class Solution:
    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:
        ","int minimumTime(int* nums1, int nums1Size, int* nums2, int nums2Size, int x){

}","public class Solution {
    public int MinimumTime(IList<int> nums1, IList<int> nums2, int x) {
        
    }
}","/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} x
 * @return {number}
 */
var minimumTime = function(nums1, nums2, x) {
    
};","# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @param {Integer} x
# @return {Integer}
def minimum_time(nums1, nums2, x)
    
end","class Solution {
    func minimumTime(_ nums1: [Int], _ nums2: [Int], _ x: Int) -> Int {
        
    }
}","func minimumTime(nums1 []int, nums2 []int, x int) int {
    
}","object Solution {
    def minimumTime(nums1: List[Int], nums2: List[Int], x: Int): Int = {
        
    }
}","class Solution {
    fun minimumTime(nums1: List<Int>, nums2: List<Int>, x: Int): Int {
        
    }
}","impl Solution {
    pub fn minimum_time(nums1: Vec<i32>, nums2: Vec<i32>, x: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @param Integer $x
     * @return Integer
     */
    function minimumTime($nums1, $nums2, $x) {
        
    }
}","function minimumTime(nums1: number[], nums2: number[], x: number): number {

};","(define/contract (minimum-time nums1 nums2 x)
  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec minimum_time(Nums1 :: [integer()], Nums2 :: [integer()], X :: integer()) -> integer().
minimum_time(Nums1, Nums2, X) ->
  .","defmodule Solution do
  @spec minimum_time(nums1 :: [integer], nums2 :: [integer], x :: integer) :: integer
  def minimum_time(nums1, nums2, x) do

  end
end","class Solution {
  int minimumTime(List<int> nums1, List<int> nums2, int x) {

  }
}","<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of equal length. Every second, for all indices <code>0 &lt;= i &lt; nums1.length</code>, value of <code>nums1[i]</code> is incremented by <code>nums2[i]</code>. <strong>After</strong> this is done, you can do the following operation:</p>","<p>

<ul>
	<li>Choose an index <code>0 &lt;= i &lt; nums1.length</code> and make <code>nums1[i] = 0</code>.</li>
</ul>

<p>You are also given an integer <code>x</code>.</p>

<p>Return <em>the <strong>minimum</strong> time in which you can make the sum of all elements of </em><code>nums1</code><em> to be<strong> less than or equal</strong> to </em><code>x</code>, <em>or </em><code>-1</code><em> if this is not possible.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,2,3], nums2 = [1,2,3], x = 4
<strong>Output:</strong> 3
<strong>Explanation:</strong> 
For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. 
For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. 
For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. 
Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.

</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,2,3], nums2 = [3,3,3], x = 4
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code><font face=""monospace"">1 &lt;= nums1.length &lt;= 10<sup>3</sup></font></code></li>
	<li><code>1 &lt;= nums1[i] &lt;= 10<sup>3</sup></code></li>
	<li><code>0 &lt;= nums2[i] &lt;= 10<sup>3</sup></code></li>
	<li><code>nums1.length == nums2.length</code></li>
	<li><code>0 &lt;= x &lt;= 10<sup>6</sup></code></li>
</ul>
","
LeetCode Problem #2809
Title: Minimum Time to Make Array Sum At Most x
Description:
You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:...
","Choose an index 0 <= i < nums1.length and make nums1[i] = 0. You are also given an integer x. Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible. Example 1: Input: nums1 = [1, 2, 3], nums2 = [1, 2, 3], x = 4 Output: 3 Explanation: For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0, 2+2, 3+3] = [0, 4, 6]. For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1, 0, 6+3] = [1, 0, 9]. For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1, 0+2, 0] = [2, 2, 0]. Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3. Example 2: Input: nums1 = [1, 2, 3], nums2 = [3, 3, 3], x = 4 Output: -1 Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed. Constraints: 1 <= nums1.length <= 10e3 1 <= nums1[i] <= 10e3 0 <= nums2[i] <= 10e3 nums1.length == nums2.length 0 <= x <= 10e6
","You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation: Choose an index 0 <= i < nums1.length and make nums1[i] = 0. You are also given an integer x. Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible. Example 1: Input: nums1 = [1, 2, 3], nums2 = [1, 2, 3], x = 4 Output: 3 Explanation: For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0, 2+2, 3+3] = [0, 4, 6]. For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1, 0, 6+3] = [1, 0, 9]. For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1, 0+2, 0] = [2, 2, 0]. Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3. Example 2: Input: nums1 = [1, 2, 3], nums2 = [3, 3, 3], x = 4 Output: -1 Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed. Constraints: 1 <= nums1.length <= 10e3 1 <= nums1[i] <= 10e3 0 <= nums2[i] <= 10e3 nums1.length == nums2.length 0 <= x <= 10e6",
count-stepping-numbers-in-range,Count Stepping Numbers in Range,2801.0,2921.0,"<p>Given two positive integers <code>low</code> and <code>high</code> represented as strings, find the count of <strong>stepping numbers</strong> in the inclusive range <code>[low, high]</code>.</p>

<p>A <strong>stepping number</strong> is an integer such that all of its adjacent digits have an absolute difference of <strong>exactly</strong> <code>1</code>.</p>

<p>Return <em>an integer denoting the count of stepping numbers in the inclusive range</em> <code>[low, high]</code><em>. </em></p>

<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p><strong>Note:</strong> A stepping number should not have a leading zero.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> low = &quot;1&quot;, high = &quot;11&quot;
<strong>Output:</strong> 10
<strong>Explanation: </strong>The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> low = &quot;90&quot;, high = &quot;101&quot;
<strong>Output:</strong> 2
<strong>Explanation: </strong>The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= int(low) &lt;= int(high) &lt; 10<sup>100</sup></code></li>
	<li><code>1 &lt;= low.length, high.length &lt;= 100</code></li>
	<li><code>low</code> and <code>high</code> consist of only digits.</li>
	<li><code>low</code> and <code>high</code> don&#39;t have any leading zeros.</li>
</ul>
",3.0,False,"class Solution {
public:
    int countSteppingNumbers(string low, string high) {
        
    }
};","class Solution {
    public int countSteppingNumbers(String low, String high) {
        
    }
}","class Solution(object):
    def countSteppingNumbers(self, low, high):
        """"""
        :type low: str
        :type high: str
        :rtype: int
        """"""
        ","class Solution:
    def countSteppingNumbers(self, low: str, high: str) -> int:
        ","int countSteppingNumbers(char * low, char * high){

}","public class Solution {
    public int CountSteppingNumbers(string low, string high) {
        
    }
}","/**
 * @param {string} low
 * @param {string} high
 * @return {number}
 */
var countSteppingNumbers = function(low, high) {
    
};","# @param {String} low
# @param {String} high
# @return {Integer}
def count_stepping_numbers(low, high)
    
end","class Solution {
    func countSteppingNumbers(_ low: String, _ high: String) -> Int {
        
    }
}","func countSteppingNumbers(low string, high string) int {
    
}","object Solution {
    def countSteppingNumbers(low: String, high: String): Int = {
        
    }
}","class Solution {
    fun countSteppingNumbers(low: String, high: String): Int {
        
    }
}","impl Solution {
    pub fn count_stepping_numbers(low: String, high: String) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String $low
     * @param String $high
     * @return Integer
     */
    function countSteppingNumbers($low, $high) {
        
    }
}","function countSteppingNumbers(low: string, high: string): number {

};","(define/contract (count-stepping-numbers low high)
  (-> string? string? exact-integer?)

  )","-spec count_stepping_numbers(Low :: unicode:unicode_binary(), High :: unicode:unicode_binary()) -> integer().
count_stepping_numbers(Low, High) ->
  .","defmodule Solution do
  @spec count_stepping_numbers(low :: String.t, high :: String.t) :: integer
  def count_stepping_numbers(low, high) do

  end
end","class Solution {
  int countSteppingNumbers(String low, String high) {

  }
}","<p>Given two positive integers <code>low</code> and <code>high</code> represented as strings, find the count of <strong>stepping numbers</strong> in the inclusive range <code>[low, high]</code>.</p>","<p>

<p>A <strong>stepping number</strong> is an integer such that all of its adjacent digits have an absolute difference of <strong>exactly</strong> <code>1</code>.</p>

<p>Return <em>an integer denoting the count of stepping numbers in the inclusive range</em> <code>[low, high]</code><em>. </em></p>

<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p><strong>Note:</strong> A stepping number should not have a leading zero.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> low = &quot;1&quot;, high = &quot;11&quot;
<strong>Output:</strong> 10
<strong>Explanation: </strong>The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> low = &quot;90&quot;, high = &quot;101&quot;
<strong>Output:</strong> 2
<strong>Explanation: </strong>The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= int(low) &lt;= int(high) &lt; 10<sup>100</sup></code></li>
	<li><code>1 &lt;= low.length, high.length &lt;= 100</code></li>
	<li><code>low</code> and <code>high</code> consist of only digits.</li>
	<li><code>low</code> and <code>high</code> don&#39;t have any leading zeros.</li>
</ul>
","
LeetCode Problem #2801
Title: Count Stepping Numbers in Range
Description:
Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high]....
","A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. Return an integer denoting the count of stepping numbers in the inclusive range [low, high]. Since the answer may be very large, return it modulo 10e9 + 7. Note: A stepping number should not have a leading zero. Example 1: Input: low = ""1"", high = ""11"" Output: 10 Explanation: The stepping numbers in the range [1, 11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10. Example 2: Input: low = ""90"", high = ""101"" Output: 2 Explanation: The stepping numbers in the range [90, 101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. Constraints: 1 <= int(low) <= int(high) < 10e100 1 <= low.length, high.length <= 100 low and high consist of only digits. low and high don't have any leading zeros.
","Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high]. A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. Return an integer denoting the count of stepping numbers in the inclusive range [low, high]. Since the answer may be very large, return it modulo 10e9 + 7. Note: A stepping number should not have a leading zero. Example 1: Input: low = ""1"", high = ""11"" Output: 10 Explanation: The stepping numbers in the range [1, 11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10. Example 2: Input: low = ""90"", high = ""101"" Output: 2 Explanation: The stepping numbers in the range [90, 101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. Constraints: 1 <= int(low) <= int(high) < 10e100 1 <= low.length, high.length <= 100 low and high consist of only digits. low and high don't have any leading zeros.",
minimum-seconds-to-equalize-a-circular-array,Minimum Seconds to Equalize a Circular Array,2808.0,2920.0,"<p>You are given a <strong>0-indexed</strong> array <code>nums</code> containing <code>n</code> integers.</p>

<p>At each second, you perform the following operation on the array:</p>

<ul>
	<li>For every index <code>i</code> in the range <code>[0, n - 1]</code>, replace <code>nums[i]</code> with either <code>nums[i]</code>, <code>nums[(i - 1 + n) % n]</code>, or <code>nums[(i + 1) % n]</code>.</li>
</ul>

<p><strong>Note</strong> that all the elements get replaced simultaneously.</p>

<p>Return <em>the <strong>minimum</strong> number of seconds needed to make all elements in the array</em> <code>nums</code> <em>equal</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,1,2]
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can equalize the array in 1 second in the following way:
- At 1<sup>st</sup> second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].
It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,1,3,3,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can equalize the array in 2 seconds in the following way:
- At 1<sup>st</sup> second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].
- At 2<sup>nd</sup> second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].
It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,5,5,5]
<strong>Output:</strong> 0
<strong>Explanation:</strong> We don&#39;t need to perform any operations as all elements in the initial array are the same.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int minimumSeconds(vector<int>& nums) {
        
    }
};","class Solution {
    public int minimumSeconds(List<Integer> nums) {
        
    }
}","class Solution(object):
    def minimumSeconds(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def minimumSeconds(self, nums: List[int]) -> int:
        ","int minimumSeconds(int* nums, int numsSize){

}","public class Solution {
    public int MinimumSeconds(IList<int> nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var minimumSeconds = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def minimum_seconds(nums)
    
end","class Solution {
    func minimumSeconds(_ nums: [Int]) -> Int {
        
    }
}","func minimumSeconds(nums []int) int {
    
}","object Solution {
    def minimumSeconds(nums: List[Int]): Int = {
        
    }
}","class Solution {
    fun minimumSeconds(nums: List<Int>): Int {
        
    }
}","impl Solution {
    pub fn minimum_seconds(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function minimumSeconds($nums) {
        
    }
}","function minimumSeconds(nums: number[]): number {

};","(define/contract (minimum-seconds nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec minimum_seconds(Nums :: [integer()]) -> integer().
minimum_seconds(Nums) ->
  .","defmodule Solution do
  @spec minimum_seconds(nums :: [integer]) :: integer
  def minimum_seconds(nums) do

  end
end","class Solution {
  int minimumSeconds(List<int> nums) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>nums</code> containing <code>n</code> integers.</p>,"<p>

<p>At each second, you perform the following operation on the array:</p>

<ul>
	<li>For every index <code>i</code> in the range <code>[0, n - 1]</code>, replace <code>nums[i]</code> with either <code>nums[i]</code>, <code>nums[(i - 1 + n) % n]</code>, or <code>nums[(i + 1) % n]</code>.</li>
</ul>

<p><strong>Note</strong> that all the elements get replaced simultaneously.</p>

<p>Return <em>the <strong>minimum</strong> number of seconds needed to make all elements in the array</em> <code>nums</code> <em>equal</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,1,2]
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can equalize the array in 1 second in the following way:
- At 1<sup>st</sup> second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].
It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,1,3,3,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can equalize the array in 2 seconds in the following way:
- At 1<sup>st</sup> second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].
- At 2<sup>nd</sup> second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].
It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,5,5,5]
<strong>Output:</strong> 0
<strong>Explanation:</strong> We don&#39;t need to perform any operations as all elements in the initial array are the same.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2808
Title: Minimum Seconds to Equalize a Circular Array
Description:
You are given a 0-indexed array nums containing n integers....
","At each second, you perform the following operation on the array: For every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n]. Note that all the elements get replaced simultaneously. Return the minimum number of seconds needed to make all elements in the array nums equal. Example 1: Input: nums = [1, 2, 1, 2] Output: 1 Explanation: We can equalize the array in 1 second in the following way: - At 1 st second, replace values at each index with [nums[3], nums[1], nums[3], nums[3]]. After replacement, nums = [2, 2, 2, 2]. It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array. Example 2: Input: nums = [2, 1, 3, 3, 2] Output: 2 Explanation: We can equalize the array in 2 seconds in the following way: - At 1 st second, replace values at each index with [nums[0], nums[2], nums[2], nums[2], nums[3]]. After replacement, nums = [2, 3, 3, 3, 3]. - At 2 nd second, replace values at each index with [nums[1], nums[1], nums[2], nums[3], nums[4]]. After replacement, nums = [3, 3, 3, 3, 3]. It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array. Example 3: Input: nums = [5, 5, 5, 5] Output: 0 Explanation: We don't need to perform any operations as all elements in the initial array are the same. Constraints: 1 <= n == nums.length <= 10e5 1 <= nums[i] <= 10e9
","You are given a 0-indexed array nums containing n integers. At each second, you perform the following operation on the array: For every index i in the range [0, n - 1], replace nums[i] with either nums[i], nums[(i - 1 + n) % n], or nums[(i + 1) % n]. Note that all the elements get replaced simultaneously. Return the minimum number of seconds needed to make all elements in the array nums equal. Example 1: Input: nums = [1, 2, 1, 2] Output: 1 Explanation: We can equalize the array in 1 second in the following way: - At 1 st second, replace values at each index with [nums[3], nums[1], nums[3], nums[3]]. After replacement, nums = [2, 2, 2, 2]. It can be proven that 1 second is the minimum amount of seconds needed for equalizing the array. Example 2: Input: nums = [2, 1, 3, 3, 2] Output: 2 Explanation: We can equalize the array in 2 seconds in the following way: - At 1 st second, replace values at each index with [nums[0], nums[2], nums[2], nums[2], nums[3]]. After replacement, nums = [2, 3, 3, 3, 3]. - At 2 nd second, replace values at each index with [nums[1], nums[1], nums[2], nums[3], nums[4]]. After replacement, nums = [3, 3, 3, 3, 3]. It can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array. Example 3: Input: nums = [5, 5, 5, 5] Output: 0 Explanation: We don't need to perform any operations as all elements in the initial array are the same. Constraints: 1 <= n == nums.length <= 10e5 1 <= nums[i] <= 10e9",
maximum-number-of-groups-with-increasing-length,Maximum Number of Groups With Increasing Length,2790.0,2919.0,"<p>You are given a <strong>0-indexed</strong> array <code>usageLimits</code> of length <code>n</code>.</p>

<p>Your task is to create <strong>groups</strong> using numbers from <code>0</code> to <code>n - 1</code>, ensuring that each number, <code>i</code>, is used no more than <code>usageLimits[i]</code> times in total <strong>across all groups</strong>. You must also satisfy the following conditions:</p>

<ul>
	<li>Each group must consist of <strong>distinct </strong>numbers, meaning that no duplicate numbers are allowed within a single group.</li>
	<li>Each group (except the first one) must have a length <strong>strictly greater</strong> than the previous group.</li>
</ul>

<p>Return <em>an integer denoting the <strong>maximum</strong> number of groups you can create while satisfying these conditions.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [1,2,5]
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.
One way of creating the maximum number of groups while satisfying the conditions is: 
Group 1 contains the number [2].
Group 2 contains the numbers [1,2].
Group 3 contains the numbers [0,1,2]. 
It can be shown that the maximum number of groups is 3. 
So, the output is 3. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [2,1,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.
One way of creating the maximum number of groups while satisfying the conditions is:
Group 1 contains the number [0].
Group 2 contains the numbers [1,2].
It can be shown that the maximum number of groups is 2.
So, the output is 2. 
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [1,1]
<strong>Output:</strong> 1
<strong>Explanation:</strong> In this example, we can use both 0 and 1 at most once.
One way of creating the maximum number of groups while satisfying the conditions is:
Group 1 contains the number [0].
It can be shown that the maximum number of groups is 1.
So, the output is 1. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= usageLimits.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= usageLimits[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",3.0,False,"class Solution {
public:
    int maxIncreasingGroups(vector<int>& usageLimits) {
        
    }
};","class Solution {
    public int maxIncreasingGroups(List<Integer> usageLimits) {
        
    }
}","class Solution(object):
    def maxIncreasingGroups(self, usageLimits):
        """"""
        :type usageLimits: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:
        ","int maxIncreasingGroups(int* usageLimits, int usageLimitsSize){

}","public class Solution {
    public int MaxIncreasingGroups(IList<int> usageLimits) {
        
    }
}","/**
 * @param {number[]} usageLimits
 * @return {number}
 */
var maxIncreasingGroups = function(usageLimits) {
    
};","# @param {Integer[]} usage_limits
# @return {Integer}
def max_increasing_groups(usage_limits)
    
end","class Solution {
    func maxIncreasingGroups(_ usageLimits: [Int]) -> Int {
        
    }
}","func maxIncreasingGroups(usageLimits []int) int {
    
}","object Solution {
    def maxIncreasingGroups(usageLimits: List[Int]): Int = {
        
    }
}","class Solution {
    fun maxIncreasingGroups(usageLimits: List<Int>): Int {
        
    }
}","impl Solution {
    pub fn max_increasing_groups(usage_limits: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $usageLimits
     * @return Integer
     */
    function maxIncreasingGroups($usageLimits) {
        
    }
}","function maxIncreasingGroups(usageLimits: number[]): number {

};","(define/contract (max-increasing-groups usageLimits)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec max_increasing_groups(UsageLimits :: [integer()]) -> integer().
max_increasing_groups(UsageLimits) ->
  .","defmodule Solution do
  @spec max_increasing_groups(usage_limits :: [integer]) :: integer
  def max_increasing_groups(usage_limits) do

  end
end","class Solution {
  int maxIncreasingGroups(List<int> usageLimits) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>usageLimits</code> of length <code>n</code>.</p>,"<p>

<p>Your task is to create <strong>groups</strong> using numbers from <code>0</code> to <code>n - 1</code>, ensuring that each number, <code>i</code>, is used no more than <code>usageLimits[i]</code> times in total <strong>across all groups</strong>. You must also satisfy the following conditions:</p>

<ul>
	<li>Each group must consist of <strong>distinct </strong>numbers, meaning that no duplicate numbers are allowed within a single group.</li>
	<li>Each group (except the first one) must have a length <strong>strictly greater</strong> than the previous group.</li>
</ul>

<p>Return <em>an integer denoting the <strong>maximum</strong> number of groups you can create while satisfying these conditions.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [1,2,5]
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.
One way of creating the maximum number of groups while satisfying the conditions is: 
Group 1 contains the number [2].
Group 2 contains the numbers [1,2].
Group 3 contains the numbers [0,1,2]. 
It can be shown that the maximum number of groups is 3. 
So, the output is 3. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [2,1,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.
One way of creating the maximum number of groups while satisfying the conditions is:
Group 1 contains the number [0].
Group 2 contains the numbers [1,2].
It can be shown that the maximum number of groups is 2.
So, the output is 2. 
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> <code>usageLimits</code> = [1,1]
<strong>Output:</strong> 1
<strong>Explanation:</strong> In this example, we can use both 0 and 1 at most once.
One way of creating the maximum number of groups while satisfying the conditions is:
Group 1 contains the number [0].
It can be shown that the maximum number of groups is 1.
So, the output is 1. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= usageLimits.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= usageLimits[i] &lt;= 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2790
Title: Maximum Number of Groups With Increasing Length
Description:
You are given a 0-indexed array usageLimits of length n....
","Your task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions: Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group. Each group (except the first one) must have a length strictly greater than the previous group. Return an integer denoting the maximum number of groups you can create while satisfying these conditions. Example 1: Input: usageLimits = [1, 2, 5] Output: 3 Explanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [2]. Group 2 contains the numbers [1, 2]. Group 3 contains the numbers [0, 1, 2]. It can be shown that the maximum number of groups is 3. So, the output is 3. Example 2: Input: usageLimits = [2, 1, 2] Output: 2 Explanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. Group 2 contains the numbers [1, 2]. It can be shown that the maximum number of groups is 2. So, the output is 2. Example 3: Input: usageLimits = [1, 1] Output: 1 Explanation: In this example, we can use both 0 and 1 at most once. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. It can be shown that the maximum number of groups is 1. So, the output is 1. Constraints: 1 <= usageLimits.length <= 10e5 1 <= usageLimits[i] <= 10e9
","You are given a 0-indexed array usageLimits of length n. Your task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions: Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group. Each group (except the first one) must have a length strictly greater than the previous group. Return an integer denoting the maximum number of groups you can create while satisfying these conditions. Example 1: Input: usageLimits = [1, 2, 5] Output: 3 Explanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [2]. Group 2 contains the numbers [1, 2]. Group 3 contains the numbers [0, 1, 2]. It can be shown that the maximum number of groups is 3. So, the output is 3. Example 2: Input: usageLimits = [2, 1, 2] Output: 2 Explanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. Group 2 contains the numbers [1, 2]. It can be shown that the maximum number of groups is 2. So, the output is 2. Example 3: Input: usageLimits = [1, 1] Output: 1 Explanation: In this example, we can use both 0 and 1 at most once. One way of creating the maximum number of groups while satisfying the conditions is: Group 1 contains the number [0]. It can be shown that the maximum number of groups is 1. So, the output is 1. Constraints: 1 <= usageLimits.length <= 10e5 1 <= usageLimits[i] <= 10e9",
check-if-it-is-possible-to-split-array,Check if it is Possible to Split Array,2811.0,2916.0,"<p>You are given an array <code>nums</code> of length <code>n</code> and an integer <code>m</code>. You need to determine if it is possible to split the array into <code>n</code> <strong>non-empty</strong> arrays by performing a series of steps.</p>

<p>In each step, you can select an existing array (which may be the result of previous steps) with a length of <strong>at least two</strong> and split it into <strong>two </strong>subarrays, if, <strong>for each </strong>resulting subarray, <strong>at least</strong> one of the following holds:</p>

<ul>
	<li>The length of the subarray is one, or</li>
	<li>The sum of elements of the subarray is <strong>greater than or equal</strong> to <code>m</code>.</li>
</ul>

<p>Return <code>true</code><em> if you can split the given array into </em><code>n</code><em> arrays, otherwise return</em> <code>false</code>.</p>

<p><strong>Note:</strong> A subarray is <em>a contiguous non-empty sequence of elements within an array</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 2, 1], m = 4
<strong>Output:</strong> true
<strong>Explanation:</strong> We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 1, 3], m = 5 
<strong>Output:</strong> false
<strong>Explanation: </strong>We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 3, 3, 2, 3], m = 6
<strong>Output:</strong> true
<strong>Explanation:</strong> We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
	<li><code>1 &lt;= m &lt;= 200</code></li>
</ul>
",2.0,False,"class Solution {
public:
    bool canSplitArray(vector<int>& nums, int m) {
        
    }
};","class Solution {
    public boolean canSplitArray(List<Integer> nums, int m) {
        
    }
}","class Solution(object):
    def canSplitArray(self, nums, m):
        """"""
        :type nums: List[int]
        :type m: int
        :rtype: bool
        """"""
        ","class Solution:
    def canSplitArray(self, nums: List[int], m: int) -> bool:
        ","bool canSplitArray(int* nums, int numsSize, int m){

}","public class Solution {
    public bool CanSplitArray(IList<int> nums, int m) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} m
 * @return {boolean}
 */
var canSplitArray = function(nums, m) {
    
};","# @param {Integer[]} nums
# @param {Integer} m
# @return {Boolean}
def can_split_array(nums, m)
    
end","class Solution {
    func canSplitArray(_ nums: [Int], _ m: Int) -> Bool {
        
    }
}","func canSplitArray(nums []int, m int) bool {
    
}","object Solution {
    def canSplitArray(nums: List[Int], m: Int): Boolean = {
        
    }
}","class Solution {
    fun canSplitArray(nums: List<Int>, m: Int): Boolean {
        
    }
}","impl Solution {
    pub fn can_split_array(nums: Vec<i32>, m: i32) -> bool {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $m
     * @return Boolean
     */
    function canSplitArray($nums, $m) {
        
    }
}","function canSplitArray(nums: number[], m: number): boolean {

};","(define/contract (can-split-array nums m)
  (-> (listof exact-integer?) exact-integer? boolean?)

  )","-spec can_split_array(Nums :: [integer()], M :: integer()) -> boolean().
can_split_array(Nums, M) ->
  .","defmodule Solution do
  @spec can_split_array(nums :: [integer], m :: integer) :: boolean
  def can_split_array(nums, m) do

  end
end","class Solution {
  bool canSplitArray(List<int> nums, int m) {

  }
}",<p>You are given an array <code>nums</code> of length <code>n</code> and an integer <code>m</code>. You need to determine if it is possible to split the array into <code>n</code> <strong>non-empty</strong> arrays by performing a series of steps.</p>,"<p>

<p>In each step, you can select an existing array (which may be the result of previous steps) with a length of <strong>at least two</strong> and split it into <strong>two </strong>subarrays, if, <strong>for each </strong>resulting subarray, <strong>at least</strong> one of the following holds:</p>

<ul>
	<li>The length of the subarray is one, or</li>
	<li>The sum of elements of the subarray is <strong>greater than or equal</strong> to <code>m</code>.</li>
</ul>

<p>Return <code>true</code><em> if you can split the given array into </em><code>n</code><em> arrays, otherwise return</em> <code>false</code>.</p>

<p><strong>Note:</strong> A subarray is <em>a contiguous non-empty sequence of elements within an array</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 2, 1], m = 4
<strong>Output:</strong> true
<strong>Explanation:</strong> We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 1, 3], m = 5 
<strong>Output:</strong> false
<strong>Explanation: </strong>We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 3, 3, 2, 3], m = 6
<strong>Output:</strong> true
<strong>Explanation:</strong> We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
	<li><code>1 &lt;= m &lt;= 200</code></li>
</ul>
","
LeetCode Problem #2811
Title: Check if it is Possible to Split Array
Description:
You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n non-empty arrays by performing a series of steps....
","In each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two subarrays, if, for each resulting subarray, at least one of the following holds: The length of the subarray is one, or The sum of elements of the subarray is greater than or equal to m. Return true if you can split the given array into n arrays, otherwise return false. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 2, 1], m = 4 Output: true Explanation: We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true. Example 2: Input: nums = [2, 1, 3], m = 5 Output: false Explanation: We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false. Example 3: Input: nums = [2, 3, 3, 2, 3], m = 6 Output: true Explanation: We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true. Constraints: 1 <= n == nums.length <= 100^1 <= nums[i] <= 100^1 <= m <= 200
","You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n non-empty arrays by performing a series of steps. In each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two subarrays, if, for each resulting subarray, at least one of the following holds: The length of the subarray is one, or The sum of elements of the subarray is greater than or equal to m. Return true if you can split the given array into n arrays, otherwise return false. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 2, 1], m = 4 Output: true Explanation: We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true. Example 2: Input: nums = [2, 1, 3], m = 5 Output: false Explanation: We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false. Example 3: Input: nums = [2, 3, 3, 2, 3], m = 6 Output: true Explanation: We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true. Constraints: 1 <= n == nums.length <= 100^1 <= nums[i] <= 100^1 <= m <= 200",
find-the-safest-path-in-a-grid,Find the Safest Path in a Grid,2812.0,2914.0,"<p>You are given a <strong>0-indexed</strong> 2D matrix <code>grid</code> of size <code>n x n</code>, where <code>(r, c)</code> represents:</p>

<ul>
	<li>A cell containing a thief if <code>grid[r][c] = 1</code></li>
	<li>An empty cell if <code>grid[r][c] = 0</code></li>
</ul>

<p>You are initially positioned at cell <code>(0, 0)</code>. In one move, you can move to any adjacent cell in the grid, including cells containing thieves.</p>

<p>The <strong>safeness factor</strong> of a path on the grid is defined as the <strong>minimum</strong> manhattan distance from any cell in the path to any thief in the grid.</p>

<p>Return <em>the <strong>maximum safeness factor</strong> of all paths leading to cell </em><code>(n - 1, n - 1)</code><em>.</em></p>

<p>An <strong>adjacent</strong> cell of cell <code>(r, c)</code>, is one of the cells <code>(r, c + 1)</code>, <code>(r, c - 1)</code>, <code>(r + 1, c)</code> and <code>(r - 1, c)</code> if it exists.</p>

<p>The <strong>Manhattan distance</strong> between two cells <code>(a, b)</code> and <code>(x, y)</code> is equal to <code>|a - x| + |b - y|</code>, where <code>|val|</code> denotes the absolute value of val.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example1.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[1,0,0],[0,0,0],[0,0,1]]
<strong>Output:</strong> 0
<strong>Explanation:</strong> All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example2.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[0,0,1],[0,0,0],[0,0,0]]
<strong>Output:</strong> 2
<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
</pre>

<p><strong class=""example"">Example 3:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example3.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]
<strong>Output:</strong> 2
<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.
- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= grid.length == n &lt;= 400</code></li>
	<li><code>grid[i].length == n</code></li>
	<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
	<li>There is at least one thief in the <code>grid</code>.</li>
</ul>
",2.0,False,"class Solution {
public:
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        
    }
};","class Solution {
    public int maximumSafenessFactor(List<List<Integer>> grid) {
        
    }
}","class Solution(object):
    def maximumSafenessFactor(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: int
        """"""
        ","class Solution:
    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
        ","int maximumSafenessFactor(int** grid, int gridSize, int* gridColSize){

}","public class Solution {
    public int MaximumSafenessFactor(IList<IList<int>> grid) {
        
    }
}","/**
 * @param {number[][]} grid
 * @return {number}
 */
var maximumSafenessFactor = function(grid) {
    
};","# @param {Integer[][]} grid
# @return {Integer}
def maximum_safeness_factor(grid)
    
end","class Solution {
    func maximumSafenessFactor(_ grid: [[Int]]) -> Int {
        
    }
}","func maximumSafenessFactor(grid [][]int) int {
    
}","object Solution {
    def maximumSafenessFactor(grid: List[List[Int]]): Int = {
        
    }
}","class Solution {
    fun maximumSafenessFactor(grid: List<List<Int>>): Int {
        
    }
}","impl Solution {
    pub fn maximum_safeness_factor(grid: Vec<Vec<i32>>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function maximumSafenessFactor($grid) {
        
    }
}","function maximumSafenessFactor(grid: number[][]): number {

};","(define/contract (maximum-safeness-factor grid)
  (-> (listof (listof exact-integer?)) exact-integer?)

  )","-spec maximum_safeness_factor(Grid :: [[integer()]]) -> integer().
maximum_safeness_factor(Grid) ->
  .","defmodule Solution do
  @spec maximum_safeness_factor(grid :: [[integer]]) :: integer
  def maximum_safeness_factor(grid) do

  end
end","class Solution {
  int maximumSafenessFactor(List<List<int>> grid) {

  }
}","<p>You are given a <strong>0-indexed</strong> 2D matrix <code>grid</code> of size <code>n x n</code>, where <code>(r, c)</code> represents:</p>","<p>

<ul>
	<li>A cell containing a thief if <code>grid[r][c] = 1</code></li>
	<li>An empty cell if <code>grid[r][c] = 0</code></li>
</ul>

<p>You are initially positioned at cell <code>(0, 0)</code>. In one move, you can move to any adjacent cell in the grid, including cells containing thieves.</p>

<p>The <strong>safeness factor</strong> of a path on the grid is defined as the <strong>minimum</strong> manhattan distance from any cell in the path to any thief in the grid.</p>

<p>Return <em>the <strong>maximum safeness factor</strong> of all paths leading to cell </em><code>(n - 1, n - 1)</code><em>.</em></p>

<p>An <strong>adjacent</strong> cell of cell <code>(r, c)</code>, is one of the cells <code>(r, c + 1)</code>, <code>(r, c - 1)</code>, <code>(r + 1, c)</code> and <code>(r - 1, c)</code> if it exists.</p>

<p>The <strong>Manhattan distance</strong> between two cells <code>(a, b)</code> and <code>(x, y)</code> is equal to <code>|a - x| + |b - y|</code>, where <code>|val|</code> denotes the absolute value of val.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example1.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[1,0,0],[0,0,0],[0,0,1]]
<strong>Output:</strong> 0
<strong>Explanation:</strong> All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example2.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[0,0,1],[0,0,0],[0,0,0]]
<strong>Output:</strong> 2
<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
</pre>

<p><strong class=""example"">Example 3:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/02/example3.png"" style=""width: 362px; height: 242px;"" />
<pre>
<strong>Input:</strong> grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]
<strong>Output:</strong> 2
<strong>Explanation:</strong> The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.
- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= grid.length == n &lt;= 400</code></li>
	<li><code>grid[i].length == n</code></li>
	<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
	<li>There is at least one thief in the <code>grid</code>.</li>
</ul>
","
LeetCode Problem #2812
Title: Find the Safest Path in a Grid
Description:
You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:...
","A cell containing a thief if grid[r][c] = 1 An empty cell if grid[r][c] = 0 You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves. The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid. Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1). An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists. The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val. Example 1: Input: grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]] Output: 0 Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1). Example 2: Input: grid = [[0, 0, 1], [0, 0, 0], [0, 0, 0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor. Example 3: Input: grid = [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2. - The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor. Constraints: 1 <= grid.length == n <= 400 grid[i].length == n grid[i][j] is either 0 or 1. There is at least one thief in the grid.
","You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents: A cell containing a thief if grid[r][c] = 1 An empty cell if grid[r][c] = 0 You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves. The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid. Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1). An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists. The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val. Example 1: Input: grid = [[1, 0, 0], [0, 0, 0], [0, 0, 1]] Output: 0 Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1). Example 2: Input: grid = [[0, 0, 1], [0, 0, 0], [0, 0, 0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor. Example 3: Input: grid = [[0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]] Output: 2 Explanation: The path depicted in the picture above has a safeness factor of 2 since: - The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2. - The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2. It can be shown that there are no other paths with a higher safeness factor. Constraints: 1 <= grid.length == n <= 400 grid[i].length == n grid[i][j] is either 0 or 1. There is at least one thief in the grid.",
count-paths-that-can-form-a-palindrome-in-a-tree,Count Paths That Can Form a Palindrome in a Tree,2791.0,2905.0,"<p>You are given a <strong>tree</strong> (i.e. a connected, undirected graph that has no cycles) <strong>rooted</strong> at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a <strong>0-indexed</strong> array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p>

<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to the edge between <code>i</code> and <code>parent[i]</code>. <code>s[0]</code> can be ignored.</p>

<p>Return <em>the number of pairs of nodes </em><code>(u, v)</code><em> such that </em><code>u &lt; v</code><em> and the characters assigned to edges on the path from </em><code>u</code><em> to </em><code>v</code><em> can be <strong>rearranged</strong> to form a <strong>palindrome</strong></em>.</p>

<p>A string is a <strong>palindrome</strong> when it reads the same backwards as forwards.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<p><img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png"" style=""width: 281px; height: 181px;"" /></p>

<pre>
<strong>Input:</strong> parent = [-1,0,0,1,1,2], s = &quot;acaabc&quot;
<strong>Output:</strong> 8
<strong>Explanation:</strong> The valid pairs are:
- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.
- The pair (2,3) result in the string &quot;aca&quot; which is a palindrome.
- The pair (1,5) result in the string &quot;cac&quot; which is a palindrome.
- The pair (3,5) result in the string &quot;acac&quot; which can be rearranged into the palindrome &quot;acca&quot;.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> parent = [-1,0,0,0,0], s = &quot;aaaaa&quot;
<strong>Output:</strong> 10
<strong>Explanation:</strong> Any pair of nodes (u,v) where u &lt; v is valid.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>n == parent.length == s.length</code></li>
	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li>
	<li><code>parent[0] == -1</code></li>
	<li><code>parent</code> represents a valid tree.</li>
	<li><code>s</code> consists of only lowercase English letters.</li>
</ul>
",3.0,False,"class Solution {
public:
    long long countPalindromePaths(vector<int>& parent, string s) {
        
    }
};","class Solution {
    public long countPalindromePaths(List<Integer> parent, String s) {
        
    }
}","class Solution(object):
    def countPalindromePaths(self, parent, s):
        """"""
        :type parent: List[int]
        :type s: str
        :rtype: int
        """"""
        ","class Solution:
    def countPalindromePaths(self, parent: List[int], s: str) -> int:
        ","long long countPalindromePaths(int* parent, int parentSize, char * s){

}","public class Solution {
    public long CountPalindromePaths(IList<int> parent, string s) {
        
    }
}","/**
 * @param {number[]} parent
 * @param {string} s
 * @return {number}
 */
var countPalindromePaths = function(parent, s) {
    
};","# @param {Integer[]} parent
# @param {String} s
# @return {Integer}
def count_palindrome_paths(parent, s)
    
end","class Solution {
    func countPalindromePaths(_ parent: [Int], _ s: String) -> Int {
        
    }
}","func countPalindromePaths(parent []int, s string) int64 {
    
}","object Solution {
    def countPalindromePaths(parent: List[Int], s: String): Long = {
        
    }
}","class Solution {
    fun countPalindromePaths(parent: List<Int>, s: String): Long {
        
    }
}","impl Solution {
    pub fn count_palindrome_paths(parent: Vec<i32>, s: String) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $parent
     * @param String $s
     * @return Integer
     */
    function countPalindromePaths($parent, $s) {
        
    }
}","function countPalindromePaths(parent: number[], s: string): number {

};","(define/contract (count-palindrome-paths parent s)
  (-> (listof exact-integer?) string? exact-integer?)

  )","-spec count_palindrome_paths(Parent :: [integer()], S :: unicode:unicode_binary()) -> integer().
count_palindrome_paths(Parent, S) ->
  .","defmodule Solution do
  @spec count_palindrome_paths(parent :: [integer], s :: String.t) :: integer
  def count_palindrome_paths(parent, s) do

  end
end","class Solution {
  int countPalindromePaths(List<int> parent, String s) {

  }
}","<p>You are given a <strong>tree</strong> (i.e. a connected, undirected graph that has no cycles) <strong>rooted</strong> at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a <strong>0-indexed</strong> array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p>","<p>

<p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to the edge between <code>i</code> and <code>parent[i]</code>. <code>s[0]</code> can be ignored.</p>

<p>Return <em>the number of pairs of nodes </em><code>(u, v)</code><em> such that </em><code>u &lt; v</code><em> and the characters assigned to edges on the path from </em><code>u</code><em> to </em><code>v</code><em> can be <strong>rearranged</strong> to form a <strong>palindrome</strong></em>.</p>

<p>A string is a <strong>palindrome</strong> when it reads the same backwards as forwards.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<p><img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png"" style=""width: 281px; height: 181px;"" /></p>

<pre>
<strong>Input:</strong> parent = [-1,0,0,1,1,2], s = &quot;acaabc&quot;
<strong>Output:</strong> 8
<strong>Explanation:</strong> The valid pairs are:
- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.
- The pair (2,3) result in the string &quot;aca&quot; which is a palindrome.
- The pair (1,5) result in the string &quot;cac&quot; which is a palindrome.
- The pair (3,5) result in the string &quot;acac&quot; which can be rearranged into the palindrome &quot;acca&quot;.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> parent = [-1,0,0,0,0], s = &quot;aaaaa&quot;
<strong>Output:</strong> 10
<strong>Explanation:</strong> Any pair of nodes (u,v) where u &lt; v is valid.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>n == parent.length == s.length</code></li>
	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li>
	<li><code>parent[0] == -1</code></li>
	<li><code>parent</code> represents a valid tree.</li>
	<li><code>s</code> consists of only lowercase English letters.</li>
</ul>
","
LeetCode Problem #2791
Title: Count Paths That Can Form a Palindrome in a Tree
Description:
You are given a tree (i. e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1....
","You are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored. Return the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome. A string is a palindrome when it reads the same backwards as forwards. Example 1: Input: parent = [-1, 0, 0, 1, 1, 2], s = ""acaabc"" Output: 8 Explanation: The valid pairs are: - All the pairs (0, 1), (0, 2), (1, 3), (1, 4) and (2, 5) result in one character which is always a palindrome. - The pair (2, 3) result in the string ""aca"" which is a palindrome. - The pair (1, 5) result in the string ""cac"" which is a palindrome. - The pair (3, 5) result in the string ""acac"" which can be rearranged into the palindrome ""acca"". Example 2: Input: parent = [-1, 0, 0, 0, 0], s = ""aaaaa"" Output: 10 Explanation: Any pair of nodes (u, v) where u < v is valid. Constraints: n == parent.length == s.length 1 <= n <= 10e5 0 <= parent[i] <= n - 1 for all i >= 1 parent[0] == -1 parent represents a valid tree. s consists of only lowercase English letters.
","You are given a tree (i. e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1. You are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored. Return the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome. A string is a palindrome when it reads the same backwards as forwards. Example 1: Input: parent = [-1, 0, 0, 1, 1, 2], s = ""acaabc"" Output: 8 Explanation: The valid pairs are: - All the pairs (0, 1), (0, 2), (1, 3), (1, 4) and (2, 5) result in one character which is always a palindrome. - The pair (2, 3) result in the string ""aca"" which is a palindrome. - The pair (1, 5) result in the string ""cac"" which is a palindrome. - The pair (3, 5) result in the string ""acac"" which can be rearranged into the palindrome ""acca"". Example 2: Input: parent = [-1, 0, 0, 0, 0], s = ""aaaaa"" Output: 10 Explanation: Any pair of nodes (u, v) where u < v is valid. Constraints: n == parent.length == s.length 1 <= n <= 10e5 0 <= parent[i] <= n - 1 for all i >= 1 parent[0] == -1 parent represents a valid tree. s consists of only lowercase English letters.",
insert-greatest-common-divisors-in-linked-list,Insert Greatest Common Divisors in Linked List,2807.0,2903.0,"<p>Given the head of a linked list <code>head</code>, in which each node contains an integer value.</p>

<p>Between every pair of adjacent nodes, insert a new node with a value equal to the <strong>greatest common divisor</strong> of them.</p>

<p>Return <em>the linked list after insertion</em>.</p>

<p>The <strong>greatest common divisor</strong> of two numbers is the largest positive integer that evenly divides both numbers.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/18/ex1_copy.png"" style=""width: 641px; height: 181px;"" />
<pre>
<strong>Input:</strong> head = [18,6,10,3]
<strong>Output:</strong> [18,6,6,2,10,1,3]
<strong>Explanation:</strong> The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).
- We insert the greatest common divisor of 18 and 6 = 6 between the 1<sup>st</sup> and the 2<sup>nd</sup> nodes.
- We insert the greatest common divisor of 6 and 10 = 2 between the 2<sup>nd</sup> and the 3<sup>rd</sup> nodes.
- We insert the greatest common divisor of 10 and 3 = 1 between the 3<sup>rd</sup> and the 4<sup>th</sup> nodes.
There are no more adjacent nodes, so we return the linked list.
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/18/ex2_copy1.png"" style=""width: 51px; height: 191px;"" />
<pre>
<strong>Input:</strong> head = [7]
<strong>Output:</strong> [7]
<strong>Explanation:</strong> The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes.
There are no pairs of adjacent nodes, so we return the initial linked list.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li>
	<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
</ul>
",2.0,False,"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertGreatestCommonDivisors(ListNode* head) {
        
    }
};","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode insertGreatestCommonDivisors(ListNode head) {
        
    }
}","# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def insertGreatestCommonDivisors(self, head):
        """"""
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """"""
        ","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:
        ","/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* insertGreatestCommonDivisors(struct ListNode* head){

}","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode InsertGreatestCommonDivisors(ListNode head) {
        
    }
}","/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var insertGreatestCommonDivisors = function(head) {
    
};","# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @return {ListNode}
def insert_greatest_common_divisors(head)
    
end","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */
class Solution {
    func insertGreatestCommonDivisors(_ head: ListNode?) -> ListNode? {
        
    }
}","/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func insertGreatestCommonDivisors(head *ListNode) *ListNode {
    
}","/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
    def insertGreatestCommonDivisors(head: ListNode): ListNode = {
        
    }
}","/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun insertGreatestCommonDivisors(head: ListNode?): ListNode? {
        
    }
}","// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn insert_greatest_common_divisors(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        
    }
}","/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val = 0, $next = null) {
 *         $this->val = $val;
 *         $this->next = $next;
 *     }
 * }
 */
class Solution {

    /**
     * @param ListNode $head
     * @return ListNode
     */
    function insertGreatestCommonDivisors($head) {
        
    }
}","/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function insertGreatestCommonDivisors(head: ListNode | null): ListNode | null {

};","; Definition for singly-linked list:
#|

; val : integer?
; next : (or/c list-node? #f)
(struct list-node
  (val next) #:mutable #:transparent)

; constructor
(define (make-list-node [val 0])
  (list-node val #f))

|#

(define/contract (insert-greatest-common-divisors head)
  (-> (or/c list-node? #f) (or/c list-node? #f))

  )","%% Definition for singly-linked list.
%%
%% -record(list_node, {val = 0 :: integer(),
%%                     next = null :: 'null' | #list_node{}}).

-spec insert_greatest_common_divisors(Head :: #list_node{} | null) -> #list_node{} | null.
insert_greatest_common_divisors(Head) ->
  .","# Definition for singly-linked list.
#
# defmodule ListNode do
#   @type t :: %__MODULE__{
#           val: integer,
#           next: ListNode.t() | nil
#         }
#   defstruct val: 0, next: nil
# end

defmodule Solution do
  @spec insert_greatest_common_divisors(head :: ListNode.t | nil) :: ListNode.t | nil
  def insert_greatest_common_divisors(head) do

  end
end","/**
 * Definition for singly-linked list.
 * class ListNode {
 *   int val;
 *   ListNode? next;
 *   ListNode([this.val = 0, this.next]);
 * }
 */
class Solution {
  ListNode? insertGreatestCommonDivisors(ListNode? head) {

  }
}","<p>Given the head of a linked list <code>head</code>, in which each node contains an integer value.</p>","<p>

<p>Between every pair of adjacent nodes, insert a new node with a value equal to the <strong>greatest common divisor</strong> of them.</p>

<p>Return <em>the linked list after insertion</em>.</p>

<p>The <strong>greatest common divisor</strong> of two numbers is the largest positive integer that evenly divides both numbers.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/18/ex1_copy.png"" style=""width: 641px; height: 181px;"" />
<pre>
<strong>Input:</strong> head = [18,6,10,3]
<strong>Output:</strong> [18,6,6,2,10,1,3]
<strong>Explanation:</strong> The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).
- We insert the greatest common divisor of 18 and 6 = 6 between the 1<sup>st</sup> and the 2<sup>nd</sup> nodes.
- We insert the greatest common divisor of 6 and 10 = 2 between the 2<sup>nd</sup> and the 3<sup>rd</sup> nodes.
- We insert the greatest common divisor of 10 and 3 = 1 between the 3<sup>rd</sup> and the 4<sup>th</sup> nodes.
There are no more adjacent nodes, so we return the linked list.
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/07/18/ex2_copy1.png"" style=""width: 51px; height: 191px;"" />
<pre>
<strong>Input:</strong> head = [7]
<strong>Output:</strong> [7]
<strong>Explanation:</strong> The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes.
There are no pairs of adjacent nodes, so we return the initial linked list.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li>
	<li><code>1 &lt;= Node.val &lt;= 1000</code></li>
</ul>
","
LeetCode Problem #2807
Title: Insert Greatest Common Divisors in Linked List
Description:
Given the head of a linked list head, in which each node contains an integer value....
","Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers. Example 1: Input: head = [18, 6, 10, 3] Output: [18, 6, 6, 2, 10, 1, 3] Explanation: The 1 st diagram denotes the initial linked list and the 2 nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes). - We insert the greatest common divisor of 18 and 6 = 6 between the 1 st and the 2 nd nodes. - We insert the greatest common divisor of 6 and 10 = 2 between the 2 nd and the 3 rd nodes. - We insert the greatest common divisor of 10 and 3 = 1 between the 3 rd and the 4 th nodes. There are no more adjacent nodes, so we return the linked list. Example 2: Input: head = [7] Output: [7] Explanation: The 1 st diagram denotes the initial linked list and the 2 nd diagram denotes the linked list after inserting the new nodes. There are no pairs of adjacent nodes, so we return the initial linked list. Constraints: The number of nodes in the list is in the range [1, 5000]. 1 <= Node. val <= 1000
","Given the head of a linked list head, in which each node contains an integer value. Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers. Example 1: Input: head = [18, 6, 10, 3] Output: [18, 6, 6, 2, 10, 1, 3] Explanation: The 1 st diagram denotes the initial linked list and the 2 nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes). - We insert the greatest common divisor of 18 and 6 = 6 between the 1 st and the 2 nd nodes. - We insert the greatest common divisor of 6 and 10 = 2 between the 2 nd and the 3 rd nodes. - We insert the greatest common divisor of 10 and 3 = 1 between the 3 rd and the 4 th nodes. There are no more adjacent nodes, so we return the linked list. Example 2: Input: head = [7] Output: [7] Explanation: The 1 st diagram denotes the initial linked list and the 2 nd diagram denotes the linked list after inserting the new nodes. There are no pairs of adjacent nodes, so we return the initial linked list. Constraints: The number of nodes in the list is in the range [1, 5000]. 1 <= Node. val <= 1000",
max-pair-sum-in-an-array,Max Pair Sum in an Array,2815.0,2902.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. You have to find the <strong>maximum</strong> sum of a pair of numbers from <code>nums</code> such that the maximum <strong>digit </strong>in both numbers are equal.</p>

<p>Return <em>the maximum sum or</em> <code>-1</code><em> if no such pair exists</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [51,71,17,24,42]
<strong>Output:</strong> 88
<strong>Explanation:</strong> 
For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. 
For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.
It can be shown that there are no other pairs with equal maximum digits, so the answer is 88.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3,4]
<strong>Output:</strong> -1
<strong>Explanation:</strong> No pair exists in nums with equal maximum digits.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
</ul>
",1.0,False,"class Solution {
public:
    int maxSum(vector<int>& nums) {
        
    }
};","class Solution {
    public int maxSum(int[] nums) {
        
    }
}","class Solution(object):
    def maxSum(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def maxSum(self, nums: List[int]) -> int:
        ","int maxSum(int* nums, int numsSize){

}","public class Solution {
    public int MaxSum(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSum = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def max_sum(nums)
    
end","class Solution {
    func maxSum(_ nums: [Int]) -> Int {
        
    }
}","func maxSum(nums []int) int {
    
}","object Solution {
    def maxSum(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun maxSum(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn max_sum(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxSum($nums) {
        
    }
}","function maxSum(nums: number[]): number {

};","(define/contract (max-sum nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec max_sum(Nums :: [integer()]) -> integer().
max_sum(Nums) ->
  .","defmodule Solution do
  @spec max_sum(nums :: [integer]) :: integer
  def max_sum(nums) do

  end
end","class Solution {
  int maxSum(List<int> nums) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. You have to find the <strong>maximum</strong> sum of a pair of numbers from <code>nums</code> such that the maximum <strong>digit </strong>in both numbers are equal.</p>,"<p>

<p>Return <em>the maximum sum or</em> <code>-1</code><em> if no such pair exists</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [51,71,17,24,42]
<strong>Output:</strong> 88
<strong>Explanation:</strong> 
For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. 
For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.
It can be shown that there are no other pairs with equal maximum digits, so the answer is 88.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3,4]
<strong>Output:</strong> -1
<strong>Explanation:</strong> No pair exists in nums with equal maximum digits.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
</ul>
","
LeetCode Problem #2815
Title: Max Pair Sum in an Array
Description:
You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal....
","Return the maximum sum or -1 if no such pair exists. Example 1: Input: nums = [51, 71, 17, 24, 42] Output: 88 Explanation: For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66. It can be shown that there are no other pairs with equal maximum digits, so the answer is 88. Example 2: Input: nums = [1, 2, 3, 4] Output: -1 Explanation: No pair exists in nums with equal maximum digits. Constraints: 2 <= nums.length <= 100^1 <= nums[i] <= 10e4
","You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal. Return the maximum sum or -1 if no such pair exists. Example 1: Input: nums = [51, 71, 17, 24, 42] Output: 88 Explanation: For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66. It can be shown that there are no other pairs with equal maximum digits, so the answer is 88. Example 2: Input: nums = [1, 2, 3, 4] Output: -1 Explanation: No pair exists in nums with equal maximum digits. Constraints: 2 <= nums.length <= 100^1 <= nums[i] <= 10e4",
maximum-elegance-of-a-k-length-subsequence,Maximum Elegance of a K-Length Subsequence,2813.0,2894.0,"<p>You are given a <strong>0-indexed</strong> 2D integer array <code>items</code> of length <code>n</code> and an integer <code>k</code>.</p>

<p><code>items[i] = [profit<sub>i</sub>, category<sub>i</sub>]</code>, where <code>profit<sub>i</sub></code> and <code>category<sub>i</sub></code> denote the profit and category of the <code>i<sup>th</sup></code> item respectively.</p>

<p>Let&#39;s define the <strong>elegance</strong> of a <strong>subsequence</strong> of <code>items</code> as <code>total_profit + distinct_categories<sup>2</sup></code>, where <code>total_profit</code> is the sum of all profits in the subsequence, and <code>distinct_categories</code> is the number of <strong>distinct</strong> categories from all the categories in the selected subsequence.</p>

<p>Your task is to find the <strong>maximum elegance</strong> from all subsequences of size <code>k</code> in <code>items</code>.</p>

<p>Return <em>an integer denoting the maximum elegance of a subsequence of </em><code>items</code><em> with size exactly </em><code>k</code>.</p>

<p><strong>Note:</strong> A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> items = [[3,2],[5,1],[10,1]], k = 2
<strong>Output:</strong> 17
<strong>Explanation: </strong>In this example, we have to select a subsequence of size 2.
We can select items[0] = [3,2] and items[2] = [10,1].
The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].
Hence, the elegance is 13 + 2<sup>2</sup> = 17, and we can show that it is the maximum achievable elegance. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> items = [[3,1],[3,1],[2,2],[5,3]], k = 3
<strong>Output:</strong> 19
<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. 
We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. 
The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. 
Hence, the elegance is 10 + 3<sup>2</sup> = 19, and we can show that it is the maximum achievable elegance.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> items = [[1,1],[2,1],[3,1]], k = 3
<strong>Output:</strong> 7
<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. 
We should select all the items. 
The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. 
Hence, the maximum elegance is 6 + 1<sup>2</sup> = 7.  </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= items.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>items[i].length == 2</code></li>
	<li><code>items[i][0] == profit<sub>i</sub></code></li>
	<li><code>items[i][1] == category<sub>i</sub></code></li>
	<li><code>1 &lt;= profit<sub>i</sub> &lt;= 10<sup>9</sup></code></li>
	<li><code>1 &lt;= category<sub>i</sub> &lt;= n </code></li>
	<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
",3.0,False,"class Solution {
public:
    long long findMaximumElegance(vector<vector<int>>& items, int k) {
        
    }
};","class Solution {
    public long findMaximumElegance(int[][] items, int k) {
        
    }
}","class Solution(object):
    def findMaximumElegance(self, items, k):
        """"""
        :type items: List[List[int]]
        :type k: int
        :rtype: int
        """"""
        ","class Solution:
    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:
        ","long long findMaximumElegance(int** items, int itemsSize, int* itemsColSize, int k){

}","public class Solution {
    public long FindMaximumElegance(int[][] items, int k) {
        
    }
}","/**
 * @param {number[][]} items
 * @param {number} k
 * @return {number}
 */
var findMaximumElegance = function(items, k) {
    
};","# @param {Integer[][]} items
# @param {Integer} k
# @return {Integer}
def find_maximum_elegance(items, k)
    
end","class Solution {
    func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {
        
    }
}","func findMaximumElegance(items [][]int, k int) int64 {
    
}","object Solution {
    def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {
        
    }
}","class Solution {
    fun findMaximumElegance(items: Array<IntArray>, k: Int): Long {
        
    }
}","impl Solution {
    pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer[][] $items
     * @param Integer $k
     * @return Integer
     */
    function findMaximumElegance($items, $k) {
        
    }
}","function findMaximumElegance(items: number[][], k: number): number {

};","(define/contract (find-maximum-elegance items k)
  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)

  )","-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer().
find_maximum_elegance(Items, K) ->
  .","defmodule Solution do
  @spec find_maximum_elegance(items :: [[integer]], k :: integer) :: integer
  def find_maximum_elegance(items, k) do

  end
end","class Solution {
  int findMaximumElegance(List<List<int>> items, int k) {

  }
}",<p>You are given a <strong>0-indexed</strong> 2D integer array <code>items</code> of length <code>n</code> and an integer <code>k</code>.</p>,"<p>

<p><code>items[i] = [profit<sub>i</sub>, category<sub>i</sub>]</code>, where <code>profit<sub>i</sub></code> and <code>category<sub>i</sub></code> denote the profit and category of the <code>i<sup>th</sup></code> item respectively.</p>

<p>Let&#39;s define the <strong>elegance</strong> of a <strong>subsequence</strong> of <code>items</code> as <code>total_profit + distinct_categories<sup>2</sup></code>, where <code>total_profit</code> is the sum of all profits in the subsequence, and <code>distinct_categories</code> is the number of <strong>distinct</strong> categories from all the categories in the selected subsequence.</p>

<p>Your task is to find the <strong>maximum elegance</strong> from all subsequences of size <code>k</code> in <code>items</code>.</p>

<p>Return <em>an integer denoting the maximum elegance of a subsequence of </em><code>items</code><em> with size exactly </em><code>k</code>.</p>

<p><strong>Note:</strong> A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> items = [[3,2],[5,1],[10,1]], k = 2
<strong>Output:</strong> 17
<strong>Explanation: </strong>In this example, we have to select a subsequence of size 2.
We can select items[0] = [3,2] and items[2] = [10,1].
The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].
Hence, the elegance is 13 + 2<sup>2</sup> = 17, and we can show that it is the maximum achievable elegance. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> items = [[3,1],[3,1],[2,2],[5,3]], k = 3
<strong>Output:</strong> 19
<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. 
We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. 
The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. 
Hence, the elegance is 10 + 3<sup>2</sup> = 19, and we can show that it is the maximum achievable elegance.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> items = [[1,1],[2,1],[3,1]], k = 3
<strong>Output:</strong> 7
<strong>Explanation:</strong> In this example, we have to select a subsequence of size 3. 
We should select all the items. 
The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. 
Hence, the maximum elegance is 6 + 1<sup>2</sup> = 7.  </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= items.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>items[i].length == 2</code></li>
	<li><code>items[i][0] == profit<sub>i</sub></code></li>
	<li><code>items[i][1] == category<sub>i</sub></code></li>
	<li><code>1 &lt;= profit<sub>i</sub> &lt;= 10<sup>9</sup></code></li>
	<li><code>1 &lt;= category<sub>i</sub> &lt;= n </code></li>
	<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
","
LeetCode Problem #2813
Title: Maximum Elegance of a K-Length Subsequence
Description:
You are given a 0-indexed 2D integer array items of length n and an integer k....
","items[i] = [profit i, category i ], where profit i and category i denote the profit and category of the i th item respectively. Let's define the elegance of a subsequence of items as total_profit + distinct_categories 2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence. Your task is to find the maximum elegance from all subsequences of size k in items. Return an integer denoting the maximum elegance of a subsequence of items with size exactly k. Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. Example 1: Input: items = [[3, 2], [5, 1], [10, 1]], k = 2 Output: 17 Explanation: In this example, we have to select a subsequence of size 2. We can select items[0] = [3, 2] and items[2] = [10, 1]. The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2, 1]. Hence, the elegance is 13 + 2^2 = 17, and we can show that it is the maximum achievable elegance. Example 2: Input: items = [[3, 1], [3, 1], [2, 2], [5, 3]], k = 3 Output: 19 Explanation: In this example, we have to select a subsequence of size 3. We can select items[0] = [3, 1], items[2] = [2, 2], and items[3] = [5, 3]. The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1, 2, 3]. Hence, the elegance is 10 + 3^2 = 19, and we can show that it is the maximum achievable elegance. Example 3: Input: items = [[1, 1], [2, 1], [3, 1]], k = 3 Output: 7 Explanation: In this example, we have to select a subsequence of size 3. We should select all the items. The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. Hence, the maximum elegance is 6 + 1^2 = 7. Constraints: 1 <= items.length == n <= 10e5 items[i].length == 2 items[i][0] == profit i items[i][1] == category i 1 <= profit i <= 10e9 1 <= category i <= n 1 <= k <= n
","You are given a 0-indexed 2D integer array items of length n and an integer k. items[i] = [profit i, category i ], where profit i and category i denote the profit and category of the i th item respectively. Let's define the elegance of a subsequence of items as total_profit + distinct_categories 2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence. Your task is to find the maximum elegance from all subsequences of size k in items. Return an integer denoting the maximum elegance of a subsequence of items with size exactly k. Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. Example 1: Input: items = [[3, 2], [5, 1], [10, 1]], k = 2 Output: 17 Explanation: In this example, we have to select a subsequence of size 2. We can select items[0] = [3, 2] and items[2] = [10, 1]. The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2, 1]. Hence, the elegance is 13 + 2^2 = 17, and we can show that it is the maximum achievable elegance. Example 2: Input: items = [[3, 1], [3, 1], [2, 2], [5, 3]], k = 3 Output: 19 Explanation: In this example, we have to select a subsequence of size 3. We can select items[0] = [3, 1], items[2] = [2, 2], and items[3] = [5, 3]. The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1, 2, 3]. Hence, the elegance is 10 + 3^2 = 19, and we can show that it is the maximum achievable elegance. Example 3: Input: items = [[1, 1], [2, 1], [3, 1]], k = 3 Output: 7 Explanation: In this example, we have to select a subsequence of size 3. We should select all the items. The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. Hence, the maximum elegance is 6 + 1^2 = 7. Constraints: 1 <= items.length == n <= 10e5 items[i].length == 2 items[i][0] == profit i items[i][1] == category i 1 <= profit i <= 10e9 1 <= category i <= n 1 <= k <= n",
visit-array-positions-to-maximize-score,Visit Array Positions to Maximize Score,2786.0,2893.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>x</code>.</p>

<p>You are <strong>initially</strong> at position <code>0</code> in the array and you can visit other positions according to the following rules:</p>

<ul>
	<li>If you are currently in position <code>i</code>, then you can move to <strong>any</strong> position <code>j</code> such that <code>i &lt; j</code>.</li>
	<li>For each position <code>i</code> that you visit, you get a score of <code>nums[i]</code>.</li>
	<li>If you move from a position <code>i</code> to a position <code>j</code> and the <strong>parities</strong> of <code>nums[i]</code> and <code>nums[j]</code> differ, then you lose a score of <code>x</code>.</li>
</ul>

<p>Return <em>the <strong>maximum</strong> total score you can get</em>.</p>

<p><strong>Note</strong> that initially you have <code>nums[0]</code> points.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,6,1,9,2], x = 5
<strong>Output:</strong> 13
<strong>Explanation:</strong> We can visit the following positions in the array: 0 -&gt; 2 -&gt; 3 -&gt; 4.
The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -&gt; 3 will make you lose a score of x = 5.
The total score will be: 2 + 6 + 1 + 9 - 5 = 13.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,4,6,8], x = 3
<strong>Output:</strong> 20
<strong>Explanation:</strong> All the integers in the array have the same parities, so we can visit all of them without losing any score.
The total score is: 2 + 4 + 6 + 8 = 20.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i], x &lt;= 10<sup>6</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    long long maxScore(vector<int>& nums, int x) {
        
    }
};","class Solution {
    public long maxScore(int[] nums, int x) {
        
    }
}","class Solution(object):
    def maxScore(self, nums, x):
        """"""
        :type nums: List[int]
        :type x: int
        :rtype: int
        """"""
        ","class Solution:
    def maxScore(self, nums: List[int], x: int) -> int:
        ","long long maxScore(int* nums, int numsSize, int x){

}","public class Solution {
    public long MaxScore(int[] nums, int x) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} x
 * @return {number}
 */
var maxScore = function(nums, x) {
    
};","# @param {Integer[]} nums
# @param {Integer} x
# @return {Integer}
def max_score(nums, x)
    
end","class Solution {
    func maxScore(_ nums: [Int], _ x: Int) -> Int {
        
    }
}","func maxScore(nums []int, x int) int64 {
    
}","object Solution {
    def maxScore(nums: Array[Int], x: Int): Long = {
        
    }
}","class Solution {
    fun maxScore(nums: IntArray, x: Int): Long {
        
    }
}","impl Solution {
    pub fn max_score(nums: Vec<i32>, x: i32) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $x
     * @return Integer
     */
    function maxScore($nums, $x) {
        
    }
}","function maxScore(nums: number[], x: number): number {

};","(define/contract (max-score nums x)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec max_score(Nums :: [integer()], X :: integer()) -> integer().
max_score(Nums, X) ->
  .","defmodule Solution do
  @spec max_score(nums :: [integer], x :: integer) :: integer
  def max_score(nums, x) do

  end
end","class Solution {
  int maxScore(List<int> nums, int x) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>x</code>.</p>,"<p>

<p>You are <strong>initially</strong> at position <code>0</code> in the array and you can visit other positions according to the following rules:</p>

<ul>
	<li>If you are currently in position <code>i</code>, then you can move to <strong>any</strong> position <code>j</code> such that <code>i &lt; j</code>.</li>
	<li>For each position <code>i</code> that you visit, you get a score of <code>nums[i]</code>.</li>
	<li>If you move from a position <code>i</code> to a position <code>j</code> and the <strong>parities</strong> of <code>nums[i]</code> and <code>nums[j]</code> differ, then you lose a score of <code>x</code>.</li>
</ul>

<p>Return <em>the <strong>maximum</strong> total score you can get</em>.</p>

<p><strong>Note</strong> that initially you have <code>nums[0]</code> points.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,6,1,9,2], x = 5
<strong>Output:</strong> 13
<strong>Explanation:</strong> We can visit the following positions in the array: 0 -&gt; 2 -&gt; 3 -&gt; 4.
The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -&gt; 3 will make you lose a score of x = 5.
The total score will be: 2 + 6 + 1 + 9 - 5 = 13.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,4,6,8], x = 3
<strong>Output:</strong> 20
<strong>Explanation:</strong> All the integers in the array have the same parities, so we can visit all of them without losing any score.
The total score is: 2 + 4 + 6 + 8 = 20.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i], x &lt;= 10<sup>6</sup></code></li>
</ul>
","
LeetCode Problem #2786
Title: Visit Array Positions to Maximize Score
Description:
You are given a 0-indexed integer array nums and a positive integer x....
","You are initially at position 0 in the array and you can visit other positions according to the following rules: If you are currently in position i, then you can move to any position j such that i < j. For each position i that you visit, you get a score of nums[i]. If you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x. Return the maximum total score you can get. Note that initially you have nums[0] points. Example 1: Input: nums = [2, 3, 6, 1, 9, 2], x = 5 Output: 13 Explanation: We can visit the following positions in the array: 0 -> 2 -> 3 -> 4. The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5. The total score will be: 2 + 6 + 1 + 9 - 5 = 13. Example 2: Input: nums = [2, 4, 6, 8], x = 3 Output: 20 Explanation: All the integers in the array have the same parities, so we can visit all of them without losing any score. The total score is: 2 + 4 + 6 + 8 = 20. Constraints: 2 <= nums.length <= 10e5 1 <= nums[i], x <= 10e6
","You are given a 0-indexed integer array nums and a positive integer x. You are initially at position 0 in the array and you can visit other positions according to the following rules: If you are currently in position i, then you can move to any position j such that i < j. For each position i that you visit, you get a score of nums[i]. If you move from a position i to a position j and the parities of nums[i] and nums[j] differ, then you lose a score of x. Return the maximum total score you can get. Note that initially you have nums[0] points. Example 1: Input: nums = [2, 3, 6, 1, 9, 2], x = 5 Output: 13 Explanation: We can visit the following positions in the array: 0 -> 2 -> 3 -> 4. The corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5. The total score will be: 2 + 6 + 1 + 9 - 5 = 13. Example 2: Input: nums = [2, 4, 6, 8], x = 3 Output: 20 Explanation: All the integers in the array have the same parities, so we can visit all of them without losing any score. The total score is: 2 + 4 + 6 + 8 = 20. Constraints: 2 <= nums.length <= 10e5 1 <= nums[i], x <= 10e6",
check-if-array-is-good,Check if Array is Good,2784.0,2892.0,"<p>You are given an integer array <code>nums</code>. We consider an array <strong>good </strong>if it is a permutation of an array <code>base[n]</code>.</p>

<p><code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is an array of length <code>n + 1</code> which contains <code>1</code> to <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>). For example, <code>base[1] = [1, 1]</code> and<code> base[3] = [1, 2, 3, 3]</code>.</p>

<p>Return <code>true</code> <em>if the given array is good, otherwise return</em><em> </em><code>false</code>.</p>

<p><strong>Note: </strong>A permutation of integers represents an arrangement of these numbers.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 1, 3]
<strong>Output:</strong> false
<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1, 3, 3, 2]
<strong>Output:</strong> true
<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1, 1]
<strong>Output:</strong> true
<strong>Explanation:</strong> Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.</pre>

<p><strong class=""example"">Example 4:</strong></p>

<pre>
<strong>Input:</strong> nums = [3, 4, 4, 1, 2, 1]
<strong>Output:</strong> false
<strong>Explanation:</strong> Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= num[i] &lt;= 200</code></li>
</ul>
",1.0,False,"class Solution {
public:
    bool isGood(vector<int>& nums) {
        
    }
};","class Solution {
    public boolean isGood(int[] nums) {
        
    }
}","class Solution(object):
    def isGood(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""
        ","class Solution:
    def isGood(self, nums: List[int]) -> bool:
        ","bool isGood(int* nums, int numsSize){

}","public class Solution {
    public bool IsGood(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {boolean}
 */
var isGood = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Boolean}
def is_good(nums)
    
end","class Solution {
    func isGood(_ nums: [Int]) -> Bool {
        
    }
}","func isGood(nums []int) bool {
    
}","object Solution {
    def isGood(nums: Array[Int]): Boolean = {
        
    }
}","class Solution {
    fun isGood(nums: IntArray): Boolean {
        
    }
}","impl Solution {
    pub fn is_good(nums: Vec<i32>) -> bool {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function isGood($nums) {
        
    }
}","function isGood(nums: number[]): boolean {

};","(define/contract (is-good nums)
  (-> (listof exact-integer?) boolean?)

  )","-spec is_good(Nums :: [integer()]) -> boolean().
is_good(Nums) ->
  .","defmodule Solution do
  @spec is_good(nums :: [integer]) :: boolean
  def is_good(nums) do

  end
end","class Solution {
  bool isGood(List<int> nums) {

  }
}",<p>You are given an integer array <code>nums</code>. We consider an array <strong>good </strong>if it is a permutation of an array <code>base[n]</code>.</p>,"<p>

<p><code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is an array of length <code>n + 1</code> which contains <code>1</code> to <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>). For example, <code>base[1] = [1, 1]</code> and<code> base[3] = [1, 2, 3, 3]</code>.</p>

<p>Return <code>true</code> <em>if the given array is good, otherwise return</em><em> </em><code>false</code>.</p>

<p><strong>Note: </strong>A permutation of integers represents an arrangement of these numbers.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2, 1, 3]
<strong>Output:</strong> false
<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1, 3, 3, 2]
<strong>Output:</strong> true
<strong>Explanation:</strong> Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1, 1]
<strong>Output:</strong> true
<strong>Explanation:</strong> Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.</pre>

<p><strong class=""example"">Example 4:</strong></p>

<pre>
<strong>Input:</strong> nums = [3, 4, 4, 1, 2, 1]
<strong>Output:</strong> false
<strong>Explanation:</strong> Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= num[i] &lt;= 200</code></li>
</ul>
","
LeetCode Problem #2784
Title: Check if Array is Good
Description:
You are given an integer array nums. We consider an array good if it is a permutation of an array base[n]....
","base[n] = [1, 2,. . . , n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n ). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3]. Return true if the given array is good, otherwise return false. Note: A permutation of integers represents an arrangement of these numbers. Example 1: Input: nums = [2, 1, 3] Output: false Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false. Example 2: Input: nums = [1, 3, 3, 2] Output: true Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true. Example 3: Input: nums = [1, 1] Output: true Explanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true. Example 4: Input: nums = [3, 4, 4, 1, 2, 1] Output: false Explanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false. Constraints: 1 <= nums.length <= 100^1 <= num[i] <= 200
","You are given an integer array nums. We consider an array good if it is a permutation of an array base[n]. base[n] = [1, 2,. . . , n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n ). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3]. Return true if the given array is good, otherwise return false. Note: A permutation of integers represents an arrangement of these numbers. Example 1: Input: nums = [2, 1, 3] Output: false Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false. Example 2: Input: nums = [1, 3, 3, 2] Output: true Explanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true. Example 3: Input: nums = [1, 1] Output: true Explanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true. Example 4: Input: nums = [3, 4, 4, 1, 2, 1] Output: false Explanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false. Constraints: 1 <= nums.length <= 100^1 <= num[i] <= 200",
maximum-beauty-of-an-array-after-applying-operation,Maximum Beauty of an Array After Applying Operation,2779.0,2891.0,"<p>You are given a <strong>0-indexed</strong> array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>.</p>

<p>In one operation, you can do the following:</p>

<ul>
	<li>Choose an index <code>i</code> that <strong>hasn&#39;t been chosen before</strong> from the range <code>[0, nums.length - 1]</code>.</li>
	<li>Replace <code>nums[i]</code> with any integer from the range <code>[nums[i] - k, nums[i] + k]</code>.</li>
</ul>

<p>The <strong>beauty</strong> of the array is the length of the longest subsequence consisting of equal elements.</p>

<p>Return <em>the <strong>maximum</strong> possible beauty of the array </em><code>nums</code><em> after applying the operation any number of times.</em></p>

<p><strong>Note</strong> that you can apply the operation to each index <strong>only once</strong>.</p>

<p>A&nbsp;<strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,6,1,2], k = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we apply the following operations:
- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].
- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].
After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).
It can be proven that 3 is the maximum possible length we can achieve.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,1,1,1], k = 10
<strong>Output:</strong> 4
<strong>Explanation:</strong> In this example we don&#39;t have to apply any operations.
The beauty of the array nums is 4 (whole array).
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int maximumBeauty(vector<int>& nums, int k) {
        
    }
};","class Solution {
    public int maximumBeauty(int[] nums, int k) {
        
    }
}","class Solution(object):
    def maximumBeauty(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: int
        """"""
        ","class Solution:
    def maximumBeauty(self, nums: List[int], k: int) -> int:
        ","int maximumBeauty(int* nums, int numsSize, int k){

}","public class Solution {
    public int MaximumBeauty(int[] nums, int k) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var maximumBeauty = function(nums, k) {
    
};","# @param {Integer[]} nums
# @param {Integer} k
# @return {Integer}
def maximum_beauty(nums, k)
    
end","class Solution {
    func maximumBeauty(_ nums: [Int], _ k: Int) -> Int {
        
    }
}","func maximumBeauty(nums []int, k int) int {
    
}","object Solution {
    def maximumBeauty(nums: Array[Int], k: Int): Int = {
        
    }
}","class Solution {
    fun maximumBeauty(nums: IntArray, k: Int): Int {
        
    }
}","impl Solution {
    pub fn maximum_beauty(nums: Vec<i32>, k: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Integer
     */
    function maximumBeauty($nums, $k) {
        
    }
}","function maximumBeauty(nums: number[], k: number): number {

};","(define/contract (maximum-beauty nums k)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec maximum_beauty(Nums :: [integer()], K :: integer()) -> integer().
maximum_beauty(Nums, K) ->
  .","defmodule Solution do
  @spec maximum_beauty(nums :: [integer], k :: integer) :: integer
  def maximum_beauty(nums, k) do

  end
end","class Solution {
  int maximumBeauty(List<int> nums, int k) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>nums</code> and a <strong>non-negative</strong> integer <code>k</code>.</p>,"<p>

<p>In one operation, you can do the following:</p>

<ul>
	<li>Choose an index <code>i</code> that <strong>hasn&#39;t been chosen before</strong> from the range <code>[0, nums.length - 1]</code>.</li>
	<li>Replace <code>nums[i]</code> with any integer from the range <code>[nums[i] - k, nums[i] + k]</code>.</li>
</ul>

<p>The <strong>beauty</strong> of the array is the length of the longest subsequence consisting of equal elements.</p>

<p>Return <em>the <strong>maximum</strong> possible beauty of the array </em><code>nums</code><em> after applying the operation any number of times.</em></p>

<p><strong>Note</strong> that you can apply the operation to each index <strong>only once</strong>.</p>

<p>A&nbsp;<strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,6,1,2], k = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we apply the following operations:
- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].
- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].
After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).
It can be proven that 3 is the maximum possible length we can achieve.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,1,1,1], k = 10
<strong>Output:</strong> 4
<strong>Explanation:</strong> In this example we don&#39;t have to apply any operations.
The beauty of the array nums is 4 (whole array).
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>
</ul>
","
LeetCode Problem #2779
Title: Maximum Beauty of an Array After Applying Operation
Description:
You are given a 0-indexed array nums and a non-negative integer k....
","In one operation, you can do the following: Choose an index i that hasn't been chosen before from the range [0, nums.length - 1]. Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k]. The beauty of the array is the length of the longest subsequence consisting of equal elements. Return the maximum possible beauty of the array nums after applying the operation any number of times. Note that you can apply the operation to each index only once. A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements. Example 1: Input: nums = [4, 6, 1, 2], k = 2 Output: 3 Explanation: In this example, we apply the following operations: - Choose index 1, replace it with 4 (from range [4, 8]), nums = [4, 4, 1, 2]. - Choose index 3, replace it with 4 (from range [0, 4]), nums = [4, 4, 1, 4]. After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3). It can be proven that 3 is the maximum possible length we can achieve. Example 2: Input: nums = [1, 1, 1, 1], k = 10 Output: 4 Explanation: In this example we don't have to apply any operations. The beauty of the array nums is 4 (whole array). Constraints: 1 <= nums.length <= 10e5 0 <= nums[i], k <= 10e5
","You are given a 0-indexed array nums and a non-negative integer k. In one operation, you can do the following: Choose an index i that hasn't been chosen before from the range [0, nums.length - 1]. Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k]. The beauty of the array is the length of the longest subsequence consisting of equal elements. Return the maximum possible beauty of the array nums after applying the operation any number of times. Note that you can apply the operation to each index only once. A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements. Example 1: Input: nums = [4, 6, 1, 2], k = 2 Output: 3 Explanation: In this example, we apply the following operations: - Choose index 1, replace it with 4 (from range [4, 8]), nums = [4, 4, 1, 2]. - Choose index 3, replace it with 4 (from range [0, 4]), nums = [4, 4, 1, 4]. After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3). It can be proven that 3 is the maximum possible length we can achieve. Example 2: Input: nums = [1, 1, 1, 1], k = 10 Output: 4 Explanation: In this example we don't have to apply any operations. The beauty of the array nums is 4 (whole array). Constraints: 1 <= nums.length <= 10e5 0 <= nums[i], k <= 10e5",
number-of-black-blocks,Number of Black Blocks,2768.0,2889.0,"<p>You are given two integers <code>m</code> and <code>n</code> representing the dimensions of a&nbsp;<strong>0-indexed</strong>&nbsp;<code>m x n</code> grid.</p>

<p>You are also given a <strong>0-indexed</strong> 2D integer matrix <code>coordinates</code>, where <code>coordinates[i] = [x, y]</code> indicates that the cell with coordinates <code>[x, y]</code> is colored <strong>black</strong>. All cells in the grid that do not appear in <code>coordinates</code> are <strong>white</strong>.</p>

<p>A block is defined as a <code>2 x 2</code> submatrix of the grid. More formally, a block with cell <code>[x, y]</code> as its top-left corner where <code>0 &lt;= x &lt; m - 1</code> and <code>0 &lt;= y &lt; n - 1</code> contains the coordinates <code>[x, y]</code>, <code>[x + 1, y]</code>, <code>[x, y + 1]</code>, and <code>[x + 1, y + 1]</code>.</p>

<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>arr</code> <em>of size</em> <code>5</code> <em>such that</em> <code>arr[i]</code> <em>is the number of blocks that contains exactly</em> <code>i</code> <em><strong>black</strong> cells</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0]]
<strong>Output:</strong> [3,1,0,0,0]
<strong>Explanation:</strong> The grid looks like this:
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png"" style=""width: 150px; height: 128px;"" />
There is only 1 block with one black cell, and it is the block starting with cell [0,0].
The other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. 
Thus, we return [3,1,0,0,0]. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]
<strong>Output:</strong> [0,2,2,0,0]
<strong>Explanation:</strong> The grid looks like this:
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png"" style=""width: 150px; height: 128px;"" />
There are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).
The other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.
Therefore, we return [0,2,2,0,0].
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li>
	<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= coordinates.length &lt;= 10<sup>4</sup></code></li>
	<li><code>coordinates[i].length == 2</code></li>
	<li><code>0 &lt;= coordinates[i][0] &lt; m</code></li>
	<li><code>0 &lt;= coordinates[i][1] &lt; n</code></li>
	<li>It is guaranteed that <code>coordinates</code> contains pairwise distinct coordinates.</li>
</ul>
",2.0,False,"class Solution {
public:
    vector<long long> countBlackBlocks(int m, int n, vector<vector<int>>& coordinates) {
        
    }
};","class Solution {
    public long[] countBlackBlocks(int m, int n, int[][] coordinates) {
        
    }
}","class Solution(object):
    def countBlackBlocks(self, m, n, coordinates):
        """"""
        :type m: int
        :type n: int
        :type coordinates: List[List[int]]
        :rtype: List[int]
        """"""
        ","class Solution:
    def countBlackBlocks(self, m: int, n: int, coordinates: List[List[int]]) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
long long* countBlackBlocks(int m, int n, int** coordinates, int coordinatesSize, int* coordinatesColSize, int* returnSize){

}","public class Solution {
    public long[] CountBlackBlocks(int m, int n, int[][] coordinates) {
        
    }
}","/**
 * @param {number} m
 * @param {number} n
 * @param {number[][]} coordinates
 * @return {number[]}
 */
var countBlackBlocks = function(m, n, coordinates) {
    
};","# @param {Integer} m
# @param {Integer} n
# @param {Integer[][]} coordinates
# @return {Integer[]}
def count_black_blocks(m, n, coordinates)
    
end","class Solution {
    func countBlackBlocks(_ m: Int, _ n: Int, _ coordinates: [[Int]]) -> [Int] {
        
    }
}","func countBlackBlocks(m int, n int, coordinates [][]int) []int64 {
    
}","object Solution {
    def countBlackBlocks(m: Int, n: Int, coordinates: Array[Array[Int]]): Array[Long] = {
        
    }
}","class Solution {
    fun countBlackBlocks(m: Int, n: Int, coordinates: Array<IntArray>): LongArray {
        
    }
}","impl Solution {
    pub fn count_black_blocks(m: i32, n: i32, coordinates: Vec<Vec<i32>>) -> Vec<i64> {
        
    }
}","class Solution {

    /**
     * @param Integer $m
     * @param Integer $n
     * @param Integer[][] $coordinates
     * @return Integer[]
     */
    function countBlackBlocks($m, $n, $coordinates) {
        
    }
}","function countBlackBlocks(m: number, n: number, coordinates: number[][]): number[] {

};","(define/contract (count-black-blocks m n coordinates)
  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))

  )","-spec count_black_blocks(M :: integer(), N :: integer(), Coordinates :: [[integer()]]) -> [integer()].
count_black_blocks(M, N, Coordinates) ->
  .","defmodule Solution do
  @spec count_black_blocks(m :: integer, n :: integer, coordinates :: [[integer]]) :: [integer]
  def count_black_blocks(m, n, coordinates) do

  end
end","class Solution {
  List<int> countBlackBlocks(int m, int n, List<List<int>> coordinates) {

  }
}",<p>You are given two integers <code>m</code> and <code>n</code> representing the dimensions of a&nbsp;<strong>0-indexed</strong>&nbsp;<code>m x n</code> grid.</p>,"<p>

<p>You are also given a <strong>0-indexed</strong> 2D integer matrix <code>coordinates</code>, where <code>coordinates[i] = [x, y]</code> indicates that the cell with coordinates <code>[x, y]</code> is colored <strong>black</strong>. All cells in the grid that do not appear in <code>coordinates</code> are <strong>white</strong>.</p>

<p>A block is defined as a <code>2 x 2</code> submatrix of the grid. More formally, a block with cell <code>[x, y]</code> as its top-left corner where <code>0 &lt;= x &lt; m - 1</code> and <code>0 &lt;= y &lt; n - 1</code> contains the coordinates <code>[x, y]</code>, <code>[x + 1, y]</code>, <code>[x, y + 1]</code>, and <code>[x + 1, y + 1]</code>.</p>

<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>arr</code> <em>of size</em> <code>5</code> <em>such that</em> <code>arr[i]</code> <em>is the number of blocks that contains exactly</em> <code>i</code> <em><strong>black</strong> cells</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0]]
<strong>Output:</strong> [3,1,0,0,0]
<strong>Explanation:</strong> The grid looks like this:
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-44656-am.png"" style=""width: 150px; height: 128px;"" />
There is only 1 block with one black cell, and it is the block starting with cell [0,0].
The other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. 
Thus, we return [3,1,0,0,0]. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]
<strong>Output:</strong> [0,2,2,0,0]
<strong>Explanation:</strong> The grid looks like this:
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/06/18/screen-shot-2023-06-18-at-45018-am.png"" style=""width: 150px; height: 128px;"" />
There are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).
The other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.
Therefore, we return [0,2,2,0,0].
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li>
	<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= coordinates.length &lt;= 10<sup>4</sup></code></li>
	<li><code>coordinates[i].length == 2</code></li>
	<li><code>0 &lt;= coordinates[i][0] &lt; m</code></li>
	<li><code>0 &lt;= coordinates[i][1] &lt; n</code></li>
	<li>It is guaranteed that <code>coordinates</code> contains pairwise distinct coordinates.</li>
</ul>
","
LeetCode Problem #2768
Title: Number of Black Blocks
Description:
You are given two integers m and n representing the dimensions of a 0-indexed m x n grid....
","You are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white. A block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1]. Return a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells. Example 1: Input: m = 3, n = 3, coordinates = [[0, 0]] Output: [3, 1, 0, 0, 0] Explanation: The grid looks like this: There is only 1 block with one black cell, and it is the block starting with cell [0, 0]. The other 3 blocks start with cells [0, 1], [1, 0] and [1, 1]. They all have zero black cells. Thus, we return [3, 1, 0, 0, 0]. Example 2: Input: m = 3, n = 3, coordinates = [[0, 0], [1, 1], [0, 2]] Output: [0, 2, 2, 0, 0] Explanation: The grid looks like this: There are 2 blocks with two black cells (the ones starting with cell coordinates [0, 0] and [0, 1]). The other 2 blocks have starting cell coordinates of [1, 0] and [1, 1]. They both have 1 black cell. Therefore, we return [0, 2, 2, 0, 0]. Constraints: 2 <= m <= 10e5 2 <= n <= 10e5 0 <= coordinates.length <= 10e4 coordinates[i].length == 2^0 <= coordinates[i][0] < m 0 <= coordinates[i][1] < n It is guaranteed that coordinates contains pairwise distinct coordinates.
","You are given two integers m and n representing the dimensions of a 0-indexed m x n grid. You are also given a 0-indexed 2D integer matrix coordinates, where coordinates[i] = [x, y] indicates that the cell with coordinates [x, y] is colored black. All cells in the grid that do not appear in coordinates are white. A block is defined as a 2 x 2 submatrix of the grid. More formally, a block with cell [x, y] as its top-left corner where 0 <= x < m - 1 and 0 <= y < n - 1 contains the coordinates [x, y], [x + 1, y], [x, y + 1], and [x + 1, y + 1]. Return a 0-indexed integer array arr of size 5 such that arr[i] is the number of blocks that contains exactly i black cells. Example 1: Input: m = 3, n = 3, coordinates = [[0, 0]] Output: [3, 1, 0, 0, 0] Explanation: The grid looks like this: There is only 1 block with one black cell, and it is the block starting with cell [0, 0]. The other 3 blocks start with cells [0, 1], [1, 0] and [1, 1]. They all have zero black cells. Thus, we return [3, 1, 0, 0, 0]. Example 2: Input: m = 3, n = 3, coordinates = [[0, 0], [1, 1], [0, 2]] Output: [0, 2, 2, 0, 0] Explanation: The grid looks like this: There are 2 blocks with two black cells (the ones starting with cell coordinates [0, 0] and [0, 1]). The other 2 blocks have starting cell coordinates of [1, 0] and [1, 1]. They both have 1 black cell. Therefore, we return [0, 2, 2, 0, 0]. Constraints: 2 <= m <= 10e5 2 <= n <= 10e5 0 <= coordinates.length <= 10e4 coordinates[i].length == 2^0 <= coordinates[i][0] < m 0 <= coordinates[i][1] < n It is guaranteed that coordinates contains pairwise distinct coordinates.",
minimum-index-of-a-valid-split,Minimum Index of a Valid Split,2780.0,2888.0,"<p>An element <code>x</code> of an integer array <code>arr</code> of length <code>m</code> is <strong>dominant</strong> if <code>freq(x) * 2 &gt; m</code>, where <code>freq(x)</code> is the number of occurrences of <code>x</code> in <code>arr</code>. Note that this definition implies that <code>arr</code> can have <strong>at most one</strong> dominant element.</p>

<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> with one dominant element.</p>

<p>You can split <code>nums</code> at an index <code>i</code> into two arrays <code>nums[0, ..., i]</code> and <code>nums[i + 1, ..., n - 1]</code>, but the split is only <strong>valid</strong> if:</p>

<ul>
	<li><code>0 &lt;= i &lt; n - 1</code></li>
	<li><code>nums[0, ..., i]</code>, and <code>nums[i + 1, ..., n - 1]</code> have the same dominant element.</li>
</ul>

<p>Here, <code>nums[i, ..., j]</code> denotes the subarray of <code>nums</code> starting at index <code>i</code> and ending at index <code>j</code>, both ends being inclusive. Particularly, if <code>j &lt; i</code> then <code>nums[i, ..., j]</code> denotes an empty subarray.</p>

<p>Return <em>the <strong>minimum</strong> index of a <strong>valid split</strong></em>. If no valid split exists, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,2,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can split the array at index 2 to obtain arrays [1,2,2] and [2]. 
In array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 &gt; 3. 
In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 &gt; 1.
Both [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. 
It can be shown that index 2 is the minimum index of a valid split. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,1,3,1,1,1,7,1,2,1]
<strong>Output:</strong> 4
<strong>Explanation:</strong> We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].
In array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.
In array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.
Both [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.
It can be shown that index 4 is the minimum index of a valid split.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,3,3,3,7,2,2]
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be shown that there is no valid split.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>nums</code> has exactly one dominant element.</li>
</ul>
",2.0,False,"class Solution {
public:
    int minimumIndex(vector<int>& nums) {
        
    }
};","class Solution {
    public int minimumIndex(List<Integer> nums) {
        
    }
}","class Solution(object):
    def minimumIndex(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def minimumIndex(self, nums: List[int]) -> int:
        ","int minimumIndex(int* nums, int numsSize){

}","public class Solution {
    public int MinimumIndex(IList<int> nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var minimumIndex = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def minimum_index(nums)
    
end","class Solution {
    func minimumIndex(_ nums: [Int]) -> Int {
        
    }
}","func minimumIndex(nums []int) int {
    
}","object Solution {
    def minimumIndex(nums: List[Int]): Int = {
        
    }
}","class Solution {
    fun minimumIndex(nums: List<Int>): Int {
        
    }
}","impl Solution {
    pub fn minimum_index(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function minimumIndex($nums) {
        
    }
}","function minimumIndex(nums: number[]): number {

};","(define/contract (minimum-index nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec minimum_index(Nums :: [integer()]) -> integer().
minimum_index(Nums) ->
  .","defmodule Solution do
  @spec minimum_index(nums :: [integer]) :: integer
  def minimum_index(nums) do

  end
end","class Solution {
  int minimumIndex(List<int> nums) {

  }
}","<p>An element <code>x</code> of an integer array <code>arr</code> of length <code>m</code> is <strong>dominant</strong> if <code>freq(x) * 2 &gt; m</code>, where <code>freq(x)</code> is the number of occurrences of <code>x</code> in <code>arr</code>. Note that this definition implies that <code>arr</code> can have <strong>at most one</strong> dominant element.</p>","<p>

<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> with one dominant element.</p>

<p>You can split <code>nums</code> at an index <code>i</code> into two arrays <code>nums[0, ..., i]</code> and <code>nums[i + 1, ..., n - 1]</code>, but the split is only <strong>valid</strong> if:</p>

<ul>
	<li><code>0 &lt;= i &lt; n - 1</code></li>
	<li><code>nums[0, ..., i]</code>, and <code>nums[i + 1, ..., n - 1]</code> have the same dominant element.</li>
</ul>

<p>Here, <code>nums[i, ..., j]</code> denotes the subarray of <code>nums</code> starting at index <code>i</code> and ending at index <code>j</code>, both ends being inclusive. Particularly, if <code>j &lt; i</code> then <code>nums[i, ..., j]</code> denotes an empty subarray.</p>

<p>Return <em>the <strong>minimum</strong> index of a <strong>valid split</strong></em>. If no valid split exists, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,2,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can split the array at index 2 to obtain arrays [1,2,2] and [2]. 
In array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 &gt; 3. 
In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 &gt; 1.
Both [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. 
It can be shown that index 2 is the minimum index of a valid split. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,1,3,1,1,1,7,1,2,1]
<strong>Output:</strong> 4
<strong>Explanation:</strong> We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].
In array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.
In array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.
Both [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.
It can be shown that index 4 is the minimum index of a valid split.</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,3,3,3,7,2,2]
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be shown that there is no valid split.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>nums</code> has exactly one dominant element.</li>
</ul>
","
LeetCode Problem #2780
Title: Minimum Index of a Valid Split
Description:
An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element....
","You are given a 0-indexed integer array nums of length n with one dominant element. You can split nums at an index i into two arrays nums[0,. . . , i] and nums[i + 1,. . . , n - 1], but the split is only valid if: 0 <= i < n - 1 nums[0,. . . , i], and nums[i + 1,. . . , n - 1] have the same dominant element. Here, nums[i,. . . , j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i,. . . , j] denotes an empty subarray. Return the minimum index of a valid split. If no valid split exists, return -1. Example 1: Input: nums = [1, 2, 2, 2] Output: 2 Explanation: We can split the array at index 2 to obtain arrays [1, 2, 2] and [2]. In array [1, 2, 2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3. In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1. Both [1, 2, 2] and [2] have the same dominant element as nums, so this is a valid split. It can be shown that index 2 is the minimum index of a valid split. Example 2: Input: nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1] Output: 4 Explanation: We can split the array at index 4 to obtain arrays [2, 1, 3, 1, 1] and [1, 7, 1, 2, 1]. In array [2, 1, 3, 1, 1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. In array [1, 7, 1, 2, 1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. Both [2, 1, 3, 1, 1] and [1, 7, 1, 2, 1] have the same dominant element as nums, so this is a valid split. It can be shown that index 4 is the minimum index of a valid split. Example 3: Input: nums = [3, 3, 3, 3, 7, 2, 2] Output: -1 Explanation: It can be shown that there is no valid split. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9 nums has exactly one dominant element.
","An element x of an integer array arr of length m is dominant if freq(x) * 2 > m, where freq(x) is the number of occurrences of x in arr. Note that this definition implies that arr can have at most one dominant element. You are given a 0-indexed integer array nums of length n with one dominant element. You can split nums at an index i into two arrays nums[0,. . . , i] and nums[i + 1,. . . , n - 1], but the split is only valid if: 0 <= i < n - 1 nums[0,. . . , i], and nums[i + 1,. . . , n - 1] have the same dominant element. Here, nums[i,. . . , j] denotes the subarray of nums starting at index i and ending at index j, both ends being inclusive. Particularly, if j < i then nums[i,. . . , j] denotes an empty subarray. Return the minimum index of a valid split. If no valid split exists, return -1. Example 1: Input: nums = [1, 2, 2, 2] Output: 2 Explanation: We can split the array at index 2 to obtain arrays [1, 2, 2] and [2]. In array [1, 2, 2], element 2 is dominant since it occurs twice in the array and 2 * 2 > 3. In array [2], element 2 is dominant since it occurs once in the array and 1 * 2 > 1. Both [1, 2, 2] and [2] have the same dominant element as nums, so this is a valid split. It can be shown that index 2 is the minimum index of a valid split. Example 2: Input: nums = [2, 1, 3, 1, 1, 1, 7, 1, 2, 1] Output: 4 Explanation: We can split the array at index 4 to obtain arrays [2, 1, 3, 1, 1] and [1, 7, 1, 2, 1]. In array [2, 1, 3, 1, 1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. In array [1, 7, 1, 2, 1], element 1 is dominant since it occurs thrice in the array and 3 * 2 > 5. Both [2, 1, 3, 1, 1] and [1, 7, 1, 2, 1] have the same dominant element as nums, so this is a valid split. It can be shown that index 4 is the minimum index of a valid split. Example 3: Input: nums = [3, 3, 3, 3, 7, 2, 2] Output: -1 Explanation: It can be shown that there is no valid split. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9 nums has exactly one dominant element.",
sort-vowels-in-a-string,Sort Vowels in a String,2785.0,2887.0,"<p>Given a <strong>0-indexed</strong> string <code>s</code>, <strong>permute</strong> <code>s</code> to get a new string <code>t</code> such that:</p>

<ul>
	<li>All consonants remain in their original places. More formally, if there is an index <code>i</code> with <code>0 &lt;= i &lt; s.length</code> such that <code>s[i]</code> is a consonant, then <code>t[i] = s[i]</code>.</li>
	<li>The vowels must be sorted in the <strong>nondecreasing</strong> order of their <strong>ASCII</strong> values. More formally, for pairs of indices <code>i</code>, <code>j</code> with <code>0 &lt;= i &lt; j &lt; s.length</code> such that <code>s[i]</code> and <code>s[j]</code> are vowels, then <code>t[i]</code> must not have a higher ASCII value than <code>t[j]</code>.</li>
</ul>

<p>Return <em>the resulting string</em>.</p>

<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;lEetcOde&quot;
<strong>Output:</strong> &quot;lEOtcede&quot;
<strong>Explanation:</strong> &#39;E&#39;, &#39;O&#39;, and &#39;e&#39; are the vowels in s; &#39;l&#39;, &#39;t&#39;, &#39;c&#39;, and &#39;d&#39; are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;lYmpH&quot;
<strong>Output:</strong> &quot;lYmpH&quot;
<strong>Explanation:</strong> There are no vowels in s (all characters in s are consonants), so we return &quot;lYmpH&quot;.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>
	<li><code>s</code> consists only of letters of the&nbsp;English alphabet&nbsp;in <strong>uppercase and lowercase</strong>.</li>
</ul>
",2.0,False,"class Solution {
public:
    string sortVowels(string s) {
        
    }
};","class Solution {
    public String sortVowels(String s) {
        
    }
}","class Solution(object):
    def sortVowels(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""
        ","class Solution:
    def sortVowels(self, s: str) -> str:
        ","char * sortVowels(char * s){

}","public class Solution {
    public string SortVowels(string s) {
        
    }
}","/**
 * @param {string} s
 * @return {string}
 */
var sortVowels = function(s) {
    
};","# @param {String} s
# @return {String}
def sort_vowels(s)
    
end","class Solution {
    func sortVowels(_ s: String) -> String {
        
    }
}","func sortVowels(s string) string {
    
}","object Solution {
    def sortVowels(s: String): String = {
        
    }
}","class Solution {
    fun sortVowels(s: String): String {
        
    }
}","impl Solution {
    pub fn sort_vowels(s: String) -> String {
        
    }
}","class Solution {

    /**
     * @param String $s
     * @return String
     */
    function sortVowels($s) {
        
    }
}","function sortVowels(s: string): string {

};","(define/contract (sort-vowels s)
  (-> string? string?)

  )","-spec sort_vowels(S :: unicode:unicode_binary()) -> unicode:unicode_binary().
sort_vowels(S) ->
  .","defmodule Solution do
  @spec sort_vowels(s :: String.t) :: String.t
  def sort_vowels(s) do

  end
end","class Solution {
  String sortVowels(String s) {

  }
}","<p>Given a <strong>0-indexed</strong> string <code>s</code>, <strong>permute</strong> <code>s</code> to get a new string <code>t</code> such that:</p>","<p>

<ul>
	<li>All consonants remain in their original places. More formally, if there is an index <code>i</code> with <code>0 &lt;= i &lt; s.length</code> such that <code>s[i]</code> is a consonant, then <code>t[i] = s[i]</code>.</li>
	<li>The vowels must be sorted in the <strong>nondecreasing</strong> order of their <strong>ASCII</strong> values. More formally, for pairs of indices <code>i</code>, <code>j</code> with <code>0 &lt;= i &lt; j &lt; s.length</code> such that <code>s[i]</code> and <code>s[j]</code> are vowels, then <code>t[i]</code> must not have a higher ASCII value than <code>t[j]</code>.</li>
</ul>

<p>Return <em>the resulting string</em>.</p>

<p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;lEetcOde&quot;
<strong>Output:</strong> &quot;lEOtcede&quot;
<strong>Explanation:</strong> &#39;E&#39;, &#39;O&#39;, and &#39;e&#39; are the vowels in s; &#39;l&#39;, &#39;t&#39;, &#39;c&#39;, and &#39;d&#39; are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;lYmpH&quot;
<strong>Output:</strong> &quot;lYmpH&quot;
<strong>Explanation:</strong> There are no vowels in s (all characters in s are consonants), so we return &quot;lYmpH&quot;.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>
	<li><code>s</code> consists only of letters of the&nbsp;English alphabet&nbsp;in <strong>uppercase and lowercase</strong>.</li>
</ul>
","
LeetCode Problem #2785
Title: Sort Vowels in a String
Description:
Given a 0-indexed string s, permute s to get a new string t such that:...
","All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i]. The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j]. Return the resulting string. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels. Example 1: Input: s = ""lEetcOde"" Output: ""lEOtcede"" Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places. Example 2: Input: s = ""lYmpH"" Output: ""lYmpH"" Explanation: There are no vowels in s (all characters in s are consonants), so we return ""lYmpH"". Constraints: 1 <= s.length <= 10e5 s consists only of letters of the English alphabet in uppercase and lowercase.
","Given a 0-indexed string s, permute s to get a new string t such that: All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i]. The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j]. Return the resulting string. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels. Example 1: Input: s = ""lEetcOde"" Output: ""lEOtcede"" Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places. Example 2: Input: s = ""lYmpH"" Output: ""lYmpH"" Explanation: There are no vowels in s (all characters in s are consonants), so we return ""lYmpH"". Constraints: 1 <= s.length <= 10e5 s consists only of letters of the English alphabet in uppercase and lowercase.",
faulty-keyboard,Faulty Keyboard,2810.0,2886.0,"<p>Your laptop keyboard is faulty, and whenever you type a character <code>&#39;i&#39;</code> on it, it reverses the string that you have written. Typing other characters works as expected.</p>

<p>You are given a <strong>0-indexed</strong> string <code>s</code>, and you type each character of <code>s</code> using your faulty keyboard.</p>

<p>Return <em>the final string that will be present on your laptop screen.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;string&quot;
<strong>Output:</strong> &quot;rtsng&quot;
<strong>Explanation:</strong> 
After typing first character, the text on the screen is &quot;s&quot;.
After the second character, the text is &quot;st&quot;. 
After the third character, the text is &quot;str&quot;.
Since the fourth character is an &#39;i&#39;, the text gets reversed and becomes &quot;rts&quot;.
After the fifth character, the text is &quot;rtsn&quot;. 
After the sixth character, the text is &quot;rtsng&quot;. 
Therefore, we return &quot;rtsng&quot;.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;poiinter&quot;
<strong>Output:</strong> &quot;ponter&quot;
<strong>Explanation:</strong> 
After the first character, the text on the screen is &quot;p&quot;.
After the second character, the text is &quot;po&quot;. 
Since the third character you type is an &#39;i&#39;, the text gets reversed and becomes &quot;op&quot;. 
Since the fourth character you type is an &#39;i&#39;, the text gets reversed and becomes &quot;po&quot;.
After the fifth character, the text is &quot;pon&quot;.
After the sixth character, the text is &quot;pont&quot;. 
After the seventh character, the text is &quot;ponte&quot;. 
After the eighth character, the text is &quot;ponter&quot;. 
Therefore, we return &quot;ponter&quot;.</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 100</code></li>
	<li><code>s</code> consists of lowercase English letters.</li>
	<li><code>s[0] != &#39;i&#39;</code></li>
</ul>
",1.0,False,"class Solution {
public:
    string finalString(string s) {
        
    }
};","class Solution {
    public String finalString(String s) {
        
    }
}","class Solution(object):
    def finalString(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""
        ","class Solution:
    def finalString(self, s: str) -> str:
        ","char * finalString(char * s){

}","public class Solution {
    public string FinalString(string s) {
        
    }
}","/**
 * @param {string} s
 * @return {string}
 */
var finalString = function(s) {
    
};","# @param {String} s
# @return {String}
def final_string(s)
    
end","class Solution {
    func finalString(_ s: String) -> String {
        
    }
}","func finalString(s string) string {
    
}","object Solution {
    def finalString(s: String): String = {
        
    }
}","class Solution {
    fun finalString(s: String): String {
        
    }
}","impl Solution {
    pub fn final_string(s: String) -> String {
        
    }
}","class Solution {

    /**
     * @param String $s
     * @return String
     */
    function finalString($s) {
        
    }
}","function finalString(s: string): string {

};","(define/contract (final-string s)
  (-> string? string?)

  )","-spec final_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().
final_string(S) ->
  .","defmodule Solution do
  @spec final_string(s :: String.t) :: String.t
  def final_string(s) do

  end
end","class Solution {
  String finalString(String s) {

  }
}","<p>Your laptop keyboard is faulty, and whenever you type a character <code>&#39;i&#39;</code> on it, it reverses the string that you have written. Typing other characters works as expected.</p>","<p>

<p>You are given a <strong>0-indexed</strong> string <code>s</code>, and you type each character of <code>s</code> using your faulty keyboard.</p>

<p>Return <em>the final string that will be present on your laptop screen.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;string&quot;
<strong>Output:</strong> &quot;rtsng&quot;
<strong>Explanation:</strong> 
After typing first character, the text on the screen is &quot;s&quot;.
After the second character, the text is &quot;st&quot;. 
After the third character, the text is &quot;str&quot;.
Since the fourth character is an &#39;i&#39;, the text gets reversed and becomes &quot;rts&quot;.
After the fifth character, the text is &quot;rtsn&quot;. 
After the sixth character, the text is &quot;rtsng&quot;. 
Therefore, we return &quot;rtsng&quot;.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;poiinter&quot;
<strong>Output:</strong> &quot;ponter&quot;
<strong>Explanation:</strong> 
After the first character, the text on the screen is &quot;p&quot;.
After the second character, the text is &quot;po&quot;. 
Since the third character you type is an &#39;i&#39;, the text gets reversed and becomes &quot;op&quot;. 
Since the fourth character you type is an &#39;i&#39;, the text gets reversed and becomes &quot;po&quot;.
After the fifth character, the text is &quot;pon&quot;.
After the sixth character, the text is &quot;pont&quot;. 
After the seventh character, the text is &quot;ponte&quot;. 
After the eighth character, the text is &quot;ponter&quot;. 
Therefore, we return &quot;ponter&quot;.</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 100</code></li>
	<li><code>s</code> consists of lowercase English letters.</li>
	<li><code>s[0] != &#39;i&#39;</code></li>
</ul>
","
LeetCode Problem #2810
Title: Faulty Keyboard
Description:
Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected....
","You are given a 0-indexed string s, and you type each character of s using your faulty keyboard. Return the final string that will be present on your laptop screen. Example 1: Input: s = ""string"" Output: ""rtsng"" Explanation: After typing first character, the text on the screen is ""s"". After the second character, the text is ""st"". After the third character, the text is ""str"". Since the fourth character is an 'i', the text gets reversed and becomes ""rts"". After the fifth character, the text is ""rtsn"". After the sixth character, the text is ""rtsng"". Therefore, we return ""rtsng"". Example 2: Input: s = ""poiinter"" Output: ""ponter"" Explanation: After the first character, the text on the screen is ""p"". After the second character, the text is ""po"". Since the third character you type is an 'i', the text gets reversed and becomes ""op"". Since the fourth character you type is an 'i', the text gets reversed and becomes ""po"". After the fifth character, the text is ""pon"". After the sixth character, the text is ""pont"". After the seventh character, the text is ""ponte"". After the eighth character, the text is ""ponter"". Therefore, we return ""ponter"". Constraints: 1 <= s.length <= 100 s consists of lowercase English letters. s[0] != 'i'
","Your laptop keyboard is faulty, and whenever you type a character 'i' on it, it reverses the string that you have written. Typing other characters works as expected. You are given a 0-indexed string s, and you type each character of s using your faulty keyboard. Return the final string that will be present on your laptop screen. Example 1: Input: s = ""string"" Output: ""rtsng"" Explanation: After typing first character, the text on the screen is ""s"". After the second character, the text is ""st"". After the third character, the text is ""str"". Since the fourth character is an 'i', the text gets reversed and becomes ""rts"". After the fifth character, the text is ""rtsn"". After the sixth character, the text is ""rtsng"". Therefore, we return ""rtsng"". Example 2: Input: s = ""poiinter"" Output: ""ponter"" Explanation: After the first character, the text on the screen is ""p"". After the second character, the text is ""po"". Since the third character you type is an 'i', the text gets reversed and becomes ""op"". Since the fourth character you type is an 'i', the text gets reversed and becomes ""po"". After the fifth character, the text is ""pon"". After the sixth character, the text is ""pont"". After the seventh character, the text is ""ponte"". After the eighth character, the text is ""ponter"". Therefore, we return ""ponter"". Constraints: 1 <= s.length <= 100 s consists of lowercase English letters. s[0] != 'i'","export function finalString() {
  
}"
length-of-the-longest-valid-substring,Length of the Longest Valid Substring,2781.0,2884.0,"<p>You are given a string <code>word</code> and an array of strings <code>forbidden</code>.</p>

<p>A string is called <strong>valid</strong> if none of its substrings are present in <code>forbidden</code>.</p>

<p>Return <em>the length of the <strong>longest valid substring</strong> of the string </em><code>word</code>.</p>

<p>A <strong>substring</strong> is a contiguous sequence of characters in a string, possibly empty.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> word = &quot;cbaaaabc&quot;, forbidden = [&quot;aaa&quot;,&quot;cb&quot;]
<strong>Output:</strong> 4
<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;ba&quot;, &quot;aa&quot;, &quot;bc&quot;, &quot;baa&quot;, &quot;aab&quot;, &quot;ab&quot;, &quot;abc&quot;and &quot;aabc&quot;. The length of the longest valid substring is 4. 
It can be shown that all other substrings contain either &quot;aaa&quot; or &quot;cb&quot; as a substring. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> word = &quot;leetcode&quot;, forbidden = [&quot;de&quot;,&quot;le&quot;,&quot;e&quot;]
<strong>Output:</strong> 4
<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;l&quot;, &quot;t&quot;, &quot;c&quot;, &quot;o&quot;, &quot;d&quot;, &quot;tc&quot;, &quot;co&quot;, &quot;od&quot;, &quot;tco&quot;, &quot;cod&quot;, and &quot;tcod&quot;. The length of the longest valid substring is 4.
It can be shown that all other substrings contain either &quot;de&quot;, &quot;le&quot;, or &quot;e&quot; as a substring. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>
	<li><code>word</code> consists only of lowercase English letters.</li>
	<li><code>1 &lt;= forbidden.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= forbidden[i].length &lt;= 10</code></li>
	<li><code>forbidden[i]</code> consists only of lowercase English letters.</li>
</ul>
",3.0,False,"class Solution {
public:
    int longestValidSubstring(string word, vector<string>& forbidden) {
        
    }
};","class Solution {
    public int longestValidSubstring(String word, List<String> forbidden) {
        
    }
}","class Solution(object):
    def longestValidSubstring(self, word, forbidden):
        """"""
        :type word: str
        :type forbidden: List[str]
        :rtype: int
        """"""
        ","class Solution:
    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:
        ","int longestValidSubstring(char * word, char ** forbidden, int forbiddenSize){

}","public class Solution {
    public int LongestValidSubstring(string word, IList<string> forbidden) {
        
    }
}","/**
 * @param {string} word
 * @param {string[]} forbidden
 * @return {number}
 */
var longestValidSubstring = function(word, forbidden) {
    
};","# @param {String} word
# @param {String[]} forbidden
# @return {Integer}
def longest_valid_substring(word, forbidden)
    
end","class Solution {
    func longestValidSubstring(_ word: String, _ forbidden: [String]) -> Int {
        
    }
}","func longestValidSubstring(word string, forbidden []string) int {
    
}","object Solution {
    def longestValidSubstring(word: String, forbidden: List[String]): Int = {
        
    }
}","class Solution {
    fun longestValidSubstring(word: String, forbidden: List<String>): Int {
        
    }
}","impl Solution {
    pub fn longest_valid_substring(word: String, forbidden: Vec<String>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String $word
     * @param String[] $forbidden
     * @return Integer
     */
    function longestValidSubstring($word, $forbidden) {
        
    }
}","function longestValidSubstring(word: string, forbidden: string[]): number {

};","(define/contract (longest-valid-substring word forbidden)
  (-> string? (listof string?) exact-integer?)

  )","-spec longest_valid_substring(Word :: unicode:unicode_binary(), Forbidden :: [unicode:unicode_binary()]) -> integer().
longest_valid_substring(Word, Forbidden) ->
  .","defmodule Solution do
  @spec longest_valid_substring(word :: String.t, forbidden :: [String.t]) :: integer
  def longest_valid_substring(word, forbidden) do

  end
end","class Solution {
  int longestValidSubstring(String word, List<String> forbidden) {

  }
}",<p>You are given a string <code>word</code> and an array of strings <code>forbidden</code>.</p>,"<p>

<p>A string is called <strong>valid</strong> if none of its substrings are present in <code>forbidden</code>.</p>

<p>Return <em>the length of the <strong>longest valid substring</strong> of the string </em><code>word</code>.</p>

<p>A <strong>substring</strong> is a contiguous sequence of characters in a string, possibly empty.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> word = &quot;cbaaaabc&quot;, forbidden = [&quot;aaa&quot;,&quot;cb&quot;]
<strong>Output:</strong> 4
<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;c&quot;, &quot;b&quot;, &quot;a&quot;, &quot;ba&quot;, &quot;aa&quot;, &quot;bc&quot;, &quot;baa&quot;, &quot;aab&quot;, &quot;ab&quot;, &quot;abc&quot;and &quot;aabc&quot;. The length of the longest valid substring is 4. 
It can be shown that all other substrings contain either &quot;aaa&quot; or &quot;cb&quot; as a substring. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> word = &quot;leetcode&quot;, forbidden = [&quot;de&quot;,&quot;le&quot;,&quot;e&quot;]
<strong>Output:</strong> 4
<strong>Explanation:</strong> There are 11 valid substrings in word: &quot;l&quot;, &quot;t&quot;, &quot;c&quot;, &quot;o&quot;, &quot;d&quot;, &quot;tc&quot;, &quot;co&quot;, &quot;od&quot;, &quot;tco&quot;, &quot;cod&quot;, and &quot;tcod&quot;. The length of the longest valid substring is 4.
It can be shown that all other substrings contain either &quot;de&quot;, &quot;le&quot;, or &quot;e&quot; as a substring. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>
	<li><code>word</code> consists only of lowercase English letters.</li>
	<li><code>1 &lt;= forbidden.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= forbidden[i].length &lt;= 10</code></li>
	<li><code>forbidden[i]</code> consists only of lowercase English letters.</li>
</ul>
","
LeetCode Problem #2781
Title: Length of the Longest Valid Substring
Description:
You are given a string word and an array of strings forbidden....
","A string is called valid if none of its substrings are present in forbidden. Return the length of the longest valid substring of the string word. A substring is a contiguous sequence of characters in a string, possibly empty. Example 1: Input: word = ""cbaaaabc"", forbidden = [""aaa"", ""cb""] Output: 4 Explanation: There are 11 valid substrings in word: ""c"", ""b"", ""a"", ""ba"", ""aa"", ""bc"", ""baa"", ""aab"", ""ab"", ""abc""and ""aabc"". The length of the longest valid substring is 4. It can be shown that all other substrings contain either ""aaa"" or ""cb"" as a substring. Example 2: Input: word = ""leetcode"", forbidden = [""de"", ""le"", ""e""] Output: 4 Explanation: There are 11 valid substrings in word: ""l"", ""t"", ""c"", ""o"", ""d"", ""tc"", ""co"", ""od"", ""tco"", ""cod"", and ""tcod"". The length of the longest valid substring is 4. It can be shown that all other substrings contain either ""de"", ""le"", or ""e"" as a substring. Constraints: 1 <= word.length <= 10e5 word consists only of lowercase English letters. 1 <= forbidden.length <= 10e5 1 <= forbidden[i].length <= 10 forbidden[i] consists only of lowercase English letters.
","You are given a string word and an array of strings forbidden. A string is called valid if none of its substrings are present in forbidden. Return the length of the longest valid substring of the string word. A substring is a contiguous sequence of characters in a string, possibly empty. Example 1: Input: word = ""cbaaaabc"", forbidden = [""aaa"", ""cb""] Output: 4 Explanation: There are 11 valid substrings in word: ""c"", ""b"", ""a"", ""ba"", ""aa"", ""bc"", ""baa"", ""aab"", ""ab"", ""abc""and ""aabc"". The length of the longest valid substring is 4. It can be shown that all other substrings contain either ""aaa"" or ""cb"" as a substring. Example 2: Input: word = ""leetcode"", forbidden = [""de"", ""le"", ""e""] Output: 4 Explanation: There are 11 valid substrings in word: ""l"", ""t"", ""c"", ""o"", ""d"", ""tc"", ""co"", ""od"", ""tco"", ""cod"", and ""tcod"". The length of the longest valid substring is 4. It can be shown that all other substrings contain either ""de"", ""le"", or ""e"" as a substring. Constraints: 1 <= word.length <= 10e5 word consists only of lowercase English letters. 1 <= forbidden.length <= 10e5 1 <= forbidden[i].length <= 10 forbidden[i] consists only of lowercase English letters.",
partition-string-into-minimum-beautiful-substrings,Partition String Into Minimum Beautiful Substrings,2767.0,2883.0,"<p>Given a binary string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that each substring is <strong>beautiful</strong>.</p>

<p>A string is <strong>beautiful</strong> if:</p>

<ul>
	<li>It doesn&#39;t contain leading zeros.</li>
	<li>It&#39;s the <strong>binary</strong> representation of a number that is a power of <code>5</code>.</li>
</ul>

<p>Return <em>the <strong>minimum</strong> number of substrings in such partition. </em>If it is impossible to partition the string <code>s</code> into beautiful substrings,&nbsp;return <code>-1</code>.</p>

<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;1011&quot;
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can paritition the given string into [&quot;101&quot;, &quot;1&quot;].
- The string &quot;101&quot; does not contain leading zeros and is the binary representation of integer 5<sup>1</sup> = 5.
- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.
It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;111&quot;
<strong>Output:</strong> 3
<strong>Explanation:</strong> We can paritition the given string into [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;].
- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.
It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;0&quot;
<strong>Output:</strong> -1
<strong>Explanation:</strong> We can not partition the given string into beautiful substrings.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 15</code></li>
	<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
",2.0,False,"class Solution {
public:
    int minimumBeautifulSubstrings(string s) {
        
    }
};","class Solution {
    public int minimumBeautifulSubstrings(String s) {
        
    }
}","class Solution(object):
    def minimumBeautifulSubstrings(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""
        ","class Solution:
    def minimumBeautifulSubstrings(self, s: str) -> int:
        ","int minimumBeautifulSubstrings(char * s){

}","public class Solution {
    public int MinimumBeautifulSubstrings(string s) {
        
    }
}","/**
 * @param {string} s
 * @return {number}
 */
var minimumBeautifulSubstrings = function(s) {
    
};","# @param {String} s
# @return {Integer}
def minimum_beautiful_substrings(s)
    
end","class Solution {
    func minimumBeautifulSubstrings(_ s: String) -> Int {
        
    }
}","func minimumBeautifulSubstrings(s string) int {
    
}","object Solution {
    def minimumBeautifulSubstrings(s: String): Int = {
        
    }
}","class Solution {
    fun minimumBeautifulSubstrings(s: String): Int {
        
    }
}","impl Solution {
    pub fn minimum_beautiful_substrings(s: String) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function minimumBeautifulSubstrings($s) {
        
    }
}","function minimumBeautifulSubstrings(s: string): number {

};","(define/contract (minimum-beautiful-substrings s)
  (-> string? exact-integer?)

  )","-spec minimum_beautiful_substrings(S :: unicode:unicode_binary()) -> integer().
minimum_beautiful_substrings(S) ->
  .","defmodule Solution do
  @spec minimum_beautiful_substrings(s :: String.t) :: integer
  def minimum_beautiful_substrings(s) do

  end
end","class Solution {
  int minimumBeautifulSubstrings(String s) {

  }
}","<p>Given a binary string <code>s</code>, partition the string into one or more <strong>substrings</strong> such that each substring is <strong>beautiful</strong>.</p>","<p>

<p>A string is <strong>beautiful</strong> if:</p>

<ul>
	<li>It doesn&#39;t contain leading zeros.</li>
	<li>It&#39;s the <strong>binary</strong> representation of a number that is a power of <code>5</code>.</li>
</ul>

<p>Return <em>the <strong>minimum</strong> number of substrings in such partition. </em>If it is impossible to partition the string <code>s</code> into beautiful substrings,&nbsp;return <code>-1</code>.</p>

<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;1011&quot;
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can paritition the given string into [&quot;101&quot;, &quot;1&quot;].
- The string &quot;101&quot; does not contain leading zeros and is the binary representation of integer 5<sup>1</sup> = 5.
- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.
It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;111&quot;
<strong>Output:</strong> 3
<strong>Explanation:</strong> We can paritition the given string into [&quot;1&quot;, &quot;1&quot;, &quot;1&quot;].
- The string &quot;1&quot; does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.
It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;0&quot;
<strong>Output:</strong> -1
<strong>Explanation:</strong> We can not partition the given string into beautiful substrings.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 15</code></li>
	<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
","
LeetCode Problem #2767
Title: Partition String Into Minimum Beautiful Substrings
Description:
Given a binary string s, partition the string into one or more substrings such that each substring is beautiful....
","A string is beautiful if: It doesn't contain leading zeros. It's the binary representation of a number that is a power of 5. Return the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings, return -1. A substring is a contiguous sequence of characters in a string. Example 1: Input: s = ""1011"" Output: 2 Explanation: We can paritition the given string into [""101"", ""1""]. - The string ""101"" does not contain leading zeros and is the binary representation of integer 5^1 = 5. - The string ""1"" does not contain leading zeros and is the binary representation of integer 5^0 = 1. It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into. Example 2: Input: s = ""111"" Output: 3 Explanation: We can paritition the given string into [""1"", ""1"", ""1""]. - The string ""1"" does not contain leading zeros and is the binary representation of integer 5^0 = 1. It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into. Example 3: Input: s = ""0"" Output: -1 Explanation: We can not partition the given string into beautiful substrings. Constraints: 1 <= s.length <= 15 s[i] is either '0' or '1'.
","Given a binary string s, partition the string into one or more substrings such that each substring is beautiful. A string is beautiful if: It doesn't contain leading zeros. It's the binary representation of a number that is a power of 5. Return the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings, return -1. A substring is a contiguous sequence of characters in a string. Example 1: Input: s = ""1011"" Output: 2 Explanation: We can paritition the given string into [""101"", ""1""]. - The string ""101"" does not contain leading zeros and is the binary representation of integer 5^1 = 5. - The string ""1"" does not contain leading zeros and is the binary representation of integer 5^0 = 1. It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into. Example 2: Input: s = ""111"" Output: 3 Explanation: We can paritition the given string into [""1"", ""1"", ""1""]. - The string ""1"" does not contain leading zeros and is the binary representation of integer 5^0 = 1. It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into. Example 3: Input: s = ""0"" Output: -1 Explanation: We can not partition the given string into beautiful substrings. Constraints: 1 <= s.length <= 15 s[i] is either '0' or '1'.",
ways-to-express-an-integer-as-sum-of-powers,Ways to Express an Integer as Sum of Powers,2787.0,2882.0,"<p>Given two <strong>positive</strong> integers <code>n</code> and <code>x</code>.</p>

<p>Return <em>the number of ways </em><code>n</code><em> can be expressed as the sum of the </em><code>x<sup>th</sup></code><em> power of <strong>unique</strong> positive integers, in other words, the number of sets of unique integers </em><code>[n<sub>1</sub>, n<sub>2</sub>, ..., n<sub>k</sub>]</code><em> where </em><code>n = n<sub>1</sub><sup>x</sup> + n<sub>2</sub><sup>x</sup> + ... + n<sub>k</sub><sup>x</sup></code><em>.</em></p>

<p>Since the result can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>

<p>For example, if <code>n = 160</code> and <code>x = 3</code>, one way to express <code>n</code> is <code>n = 2<sup>3</sup> + 3<sup>3</sup> + 5<sup>3</sup></code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 10, x = 2
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can express n as the following: n = 3<sup>2</sup> + 1<sup>2</sup> = 10.
It can be shown that it is the only way to express 10 as the sum of the 2<sup>nd</sup> power of unique integers.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 4, x = 1
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can express n in the following ways:
- n = 4<sup>1</sup> = 4.
- n = 3<sup>1</sup> + 1<sup>1</sup> = 4.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 300</code></li>
	<li><code>1 &lt;= x &lt;= 5</code></li>
</ul>
",2.0,False,"class Solution {
public:
    int numberOfWays(int n, int x) {
        
    }
};","class Solution {
    public int numberOfWays(int n, int x) {
        
    }
}","class Solution(object):
    def numberOfWays(self, n, x):
        """"""
        :type n: int
        :type x: int
        :rtype: int
        """"""
        ","class Solution:
    def numberOfWays(self, n: int, x: int) -> int:
        ","int numberOfWays(int n, int x){

}","public class Solution {
    public int NumberOfWays(int n, int x) {
        
    }
}","/**
 * @param {number} n
 * @param {number} x
 * @return {number}
 */
var numberOfWays = function(n, x) {
    
};","# @param {Integer} n
# @param {Integer} x
# @return {Integer}
def number_of_ways(n, x)
    
end","class Solution {
    func numberOfWays(_ n: Int, _ x: Int) -> Int {
        
    }
}","func numberOfWays(n int, x int) int {
    
}","object Solution {
    def numberOfWays(n: Int, x: Int): Int = {
        
    }
}","class Solution {
    fun numberOfWays(n: Int, x: Int): Int {
        
    }
}","impl Solution {
    pub fn number_of_ways(n: i32, x: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer $n
     * @param Integer $x
     * @return Integer
     */
    function numberOfWays($n, $x) {
        
    }
}","function numberOfWays(n: number, x: number): number {

};","(define/contract (number-of-ways n x)
  (-> exact-integer? exact-integer? exact-integer?)

  )","-spec number_of_ways(N :: integer(), X :: integer()) -> integer().
number_of_ways(N, X) ->
  .","defmodule Solution do
  @spec number_of_ways(n :: integer, x :: integer) :: integer
  def number_of_ways(n, x) do

  end
end","class Solution {
  int numberOfWays(int n, int x) {

  }
}",<p>Given two <strong>positive</strong> integers <code>n</code> and <code>x</code>.</p>,"<p>

<p>Return <em>the number of ways </em><code>n</code><em> can be expressed as the sum of the </em><code>x<sup>th</sup></code><em> power of <strong>unique</strong> positive integers, in other words, the number of sets of unique integers </em><code>[n<sub>1</sub>, n<sub>2</sub>, ..., n<sub>k</sub>]</code><em> where </em><code>n = n<sub>1</sub><sup>x</sup> + n<sub>2</sub><sup>x</sup> + ... + n<sub>k</sub><sup>x</sup></code><em>.</em></p>

<p>Since the result can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p>

<p>For example, if <code>n = 160</code> and <code>x = 3</code>, one way to express <code>n</code> is <code>n = 2<sup>3</sup> + 3<sup>3</sup> + 5<sup>3</sup></code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 10, x = 2
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can express n as the following: n = 3<sup>2</sup> + 1<sup>2</sup> = 10.
It can be shown that it is the only way to express 10 as the sum of the 2<sup>nd</sup> power of unique integers.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 4, x = 1
<strong>Output:</strong> 2
<strong>Explanation:</strong> We can express n in the following ways:
- n = 4<sup>1</sup> = 4.
- n = 3<sup>1</sup> + 1<sup>1</sup> = 4.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 300</code></li>
	<li><code>1 &lt;= x &lt;= 5</code></li>
</ul>
","
LeetCode Problem #2787
Title: Ways to Express an Integer as Sum of Powers
Description:
Given two positive integers n and x....
","Return the number of ways n can be expressed as the sum of the x th power of unique positive integers, in other words, the number of sets of unique integers [n 1, n 2,. . . , n k ] where n = n 1 x + n 2 x +. . . + n k x. Since the result can be very large, return it modulo 10e9 + 7. For example, if n = 160 and x = 3, one way to express n is n = 2^3 + 3^3 + 5^3. Example 1: Input: n = 10, x = 2 Output: 1 Explanation: We can express n as the following: n = 3^2 + 1^2 = 10. It can be shown that it is the only way to express 10 as the sum of the 2 nd power of unique integers. Example 2: Input: n = 4, x = 1 Output: 2 Explanation: We can express n in the following ways: - n = 4^1 = 4. - n = 3^1 + 1^1 = 4. Constraints: 1 <= n <= 300^1 <= x <= 5
","Given two positive integers n and x. Return the number of ways n can be expressed as the sum of the x th power of unique positive integers, in other words, the number of sets of unique integers [n 1, n 2,. . . , n k ] where n = n 1 x + n 2 x +. . . + n k x. Since the result can be very large, return it modulo 10e9 + 7. For example, if n = 160 and x = 3, one way to express n is n = 2^3 + 3^3 + 5^3. Example 1: Input: n = 10, x = 2 Output: 1 Explanation: We can express n as the following: n = 3^2 + 1^2 = 10. It can be shown that it is the only way to express 10 as the sum of the 2 nd power of unique integers. Example 2: Input: n = 4, x = 1 Output: 2 Explanation: We can express n in the following ways: - n = 4^1 = 4. - n = 3^1 + 1^1 = 4. Constraints: 1 <= n <= 300^1 <= x <= 5",
split-strings-by-separator,Split Strings by Separator,2788.0,2881.0,"<p>Given an array of strings <code>words</code> and a character <code>separator</code>, <strong>split</strong> each string in <code>words</code> by <code>separator</code>.</p>

<p>Return <em>an array of strings containing the new strings formed after the splits, <strong>excluding empty strings</strong>.</em></p>

<p><strong>Notes</strong></p>

<ul>
	<li><code>separator</code> is used to determine where the split should occur, but it is not included as part of the resulting strings.</li>
	<li>A split may result in more than two strings.</li>
	<li>The resulting strings must maintain the same order as they were initially given.</li>
</ul>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;one.two.three&quot;,&quot;four.five&quot;,&quot;six&quot;], separator = &quot;.&quot;
<strong>Output:</strong> [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;]
<strong>Explanation: </strong>In this example we split as follows:

&quot;one.two.three&quot; splits into &quot;one&quot;, &quot;two&quot;, &quot;three&quot;
&quot;four.five&quot; splits into &quot;four&quot;, &quot;five&quot;
&quot;six&quot; splits into &quot;six&quot; 

Hence, the resulting array is [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;].</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;$easy$&quot;,&quot;$problem$&quot;], separator = &quot;$&quot;
<strong>Output:</strong> [&quot;easy&quot;,&quot;problem&quot;]
<strong>Explanation:</strong> In this example we split as follows: 

&quot;$easy$&quot; splits into &quot;easy&quot; (excluding empty strings)
&quot;$problem$&quot; splits into &quot;problem&quot; (excluding empty strings)

Hence, the resulting array is [&quot;easy&quot;,&quot;problem&quot;].
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;|||&quot;], separator = &quot;|&quot;
<strong>Output:</strong> []
<strong>Explanation:</strong> In this example the resulting split of &quot;|||&quot; will contain only empty strings, so we return an empty array []. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= words.length &lt;= 100</code></li>
	<li><code>1 &lt;= words[i].length &lt;= 20</code></li>
	<li>characters in <code>words[i]</code> are either lowercase English letters or characters from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>
	<li><code>separator</code> is a character from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>
</ul>
",1.0,False,"class Solution {
public:
    vector<string> splitWordsBySeparator(vector<string>& words, char separator) {
        
    }
};","class Solution {
    public List<String> splitWordsBySeparator(List<String> words, char separator) {
        
    }
}","class Solution(object):
    def splitWordsBySeparator(self, words, separator):
        """"""
        :type words: List[str]
        :type separator: str
        :rtype: List[str]
        """"""
        ","class Solution:
    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** splitWordsBySeparator(char ** words, int wordsSize, char separator, int* returnSize){

}","public class Solution {
    public IList<string> SplitWordsBySeparator(IList<string> words, char separator) {
        
    }
}","/**
 * @param {string[]} words
 * @param {character} separator
 * @return {string[]}
 */
var splitWordsBySeparator = function(words, separator) {
    
};","# @param {String[]} words
# @param {Character} separator
# @return {String[]}
def split_words_by_separator(words, separator)
    
end","class Solution {
    func splitWordsBySeparator(_ words: [String], _ separator: Character) -> [String] {
        
    }
}","func splitWordsBySeparator(words []string, separator byte) []string {
    
}","object Solution {
    def splitWordsBySeparator(words: List[String], separator: Char): List[String] = {
        
    }
}","class Solution {
    fun splitWordsBySeparator(words: List<String>, separator: Char): List<String> {
        
    }
}","impl Solution {
    pub fn split_words_by_separator(words: Vec<String>, separator: char) -> Vec<String> {
        
    }
}","class Solution {

    /**
     * @param String[] $words
     * @param String $separator
     * @return String[]
     */
    function splitWordsBySeparator($words, $separator) {
        
    }
}","function splitWordsBySeparator(words: string[], separator: string): string[] {

};","(define/contract (split-words-by-separator words separator)
  (-> (listof string?) char? (listof string?))

  )","-spec split_words_by_separator(Words :: [unicode:unicode_binary()], Separator :: char()) -> [unicode:unicode_binary()].
split_words_by_separator(Words, Separator) ->
  .","defmodule Solution do
  @spec split_words_by_separator(words :: [String.t], separator :: char) :: [String.t]
  def split_words_by_separator(words, separator) do

  end
end","class Solution {
  List<String> splitWordsBySeparator(List<String> words, String separator) {

  }
}","<p>Given an array of strings <code>words</code> and a character <code>separator</code>, <strong>split</strong> each string in <code>words</code> by <code>separator</code>.</p>","<p>

<p>Return <em>an array of strings containing the new strings formed after the splits, <strong>excluding empty strings</strong>.</em></p>

<p><strong>Notes</strong></p>

<ul>
	<li><code>separator</code> is used to determine where the split should occur, but it is not included as part of the resulting strings.</li>
	<li>A split may result in more than two strings.</li>
	<li>The resulting strings must maintain the same order as they were initially given.</li>
</ul>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;one.two.three&quot;,&quot;four.five&quot;,&quot;six&quot;], separator = &quot;.&quot;
<strong>Output:</strong> [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;]
<strong>Explanation: </strong>In this example we split as follows:

&quot;one.two.three&quot; splits into &quot;one&quot;, &quot;two&quot;, &quot;three&quot;
&quot;four.five&quot; splits into &quot;four&quot;, &quot;five&quot;
&quot;six&quot; splits into &quot;six&quot; 

Hence, the resulting array is [&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;].</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;$easy$&quot;,&quot;$problem$&quot;], separator = &quot;$&quot;
<strong>Output:</strong> [&quot;easy&quot;,&quot;problem&quot;]
<strong>Explanation:</strong> In this example we split as follows: 

&quot;$easy$&quot; splits into &quot;easy&quot; (excluding empty strings)
&quot;$problem$&quot; splits into &quot;problem&quot; (excluding empty strings)

Hence, the resulting array is [&quot;easy&quot;,&quot;problem&quot;].
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;|||&quot;], separator = &quot;|&quot;
<strong>Output:</strong> []
<strong>Explanation:</strong> In this example the resulting split of &quot;|||&quot; will contain only empty strings, so we return an empty array []. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= words.length &lt;= 100</code></li>
	<li><code>1 &lt;= words[i].length &lt;= 20</code></li>
	<li>characters in <code>words[i]</code> are either lowercase English letters or characters from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>
	<li><code>separator</code> is a character from the string <code>&quot;.,|$#@&quot;</code> (excluding the quotes)</li>
</ul>
","
LeetCode Problem #2788
Title: Split Strings by Separator
Description:
Given an array of strings words and a character separator, split each string in words by separator....
","Return an array of strings containing the new strings formed after the splits, excluding empty strings. Notes separator is used to determine where the split should occur, but it is not included as part of the resulting strings. A split may result in more than two strings. The resulting strings must maintain the same order as they were initially given. Example 1: Input: words = [""one. two. three"", ""four. five"", ""six""], separator = "". "" Output: [""one"", ""two"", ""three"", ""four"", ""five"", ""six""] Explanation: In this example we split as follows: ""one. two. three"" splits into ""one"", ""two"", ""three"" ""four. five"" splits into ""four"", ""five"" ""six"" splits into ""six"" Hence, the resulting array is [""one"", ""two"", ""three"", ""four"", ""five"", ""six""]. Example 2: Input: words = [""$easy$"", ""$problem$""], separator = ""$"" Output: [""easy"", ""problem""] Explanation: In this example we split as follows: ""$easy$"" splits into ""easy"" (excluding empty strings) ""$problem$"" splits into ""problem"" (excluding empty strings) Hence, the resulting array is [""easy"", ""problem""]. Example 3: Input: words = [""|||""], separator = ""|"" Output: [] Explanation: In this example the resulting split of ""|||"" will contain only empty strings, so we return an empty array []. Constraints: 1 <= words.length <= 100^1 <= words[i].length <= 20 characters in words[i] are either lowercase English letters or characters from the string "". , |$#@"" (excluding the quotes) separator is a character from the string "". , |$#@"" (excluding the quotes)
","Given an array of strings words and a character separator, split each string in words by separator. Return an array of strings containing the new strings formed after the splits, excluding empty strings. Notes separator is used to determine where the split should occur, but it is not included as part of the resulting strings. A split may result in more than two strings. The resulting strings must maintain the same order as they were initially given. Example 1: Input: words = [""one. two. three"", ""four. five"", ""six""], separator = "". "" Output: [""one"", ""two"", ""three"", ""four"", ""five"", ""six""] Explanation: In this example we split as follows: ""one. two. three"" splits into ""one"", ""two"", ""three"" ""four. five"" splits into ""four"", ""five"" ""six"" splits into ""six"" Hence, the resulting array is [""one"", ""two"", ""three"", ""four"", ""five"", ""six""]. Example 2: Input: words = [""$easy$"", ""$problem$""], separator = ""$"" Output: [""easy"", ""problem""] Explanation: In this example we split as follows: ""$easy$"" splits into ""easy"" (excluding empty strings) ""$problem$"" splits into ""problem"" (excluding empty strings) Hence, the resulting array is [""easy"", ""problem""]. Example 3: Input: words = [""|||""], separator = ""|"" Output: [] Explanation: In this example the resulting split of ""|||"" will contain only empty strings, so we return an empty array []. Constraints: 1 <= words.length <= 100^1 <= words[i].length <= 20 characters in words[i] are either lowercase English letters or characters from the string "". , |$#@"" (excluding the quotes) separator is a character from the string "". , |$#@"" (excluding the quotes)",
apply-operations-to-make-all-array-elements-equal-to-zero,Apply Operations to Make All Array Elements Equal to Zero,2772.0,2878.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>k</code>.</p>

<p>You can apply the following operation on the array <strong>any</strong> number of times:</p>

<ul>
	<li>Choose <strong>any</strong> subarray of size <code>k</code> from the array and <strong>decrease</strong> all its elements by <code>1</code>.</li>
</ul>

<p>Return <code>true</code><em> if you can make all the array elements equal to </em><code>0</code><em>, or </em><code>false</code><em> otherwise</em>.</p>

<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,2,3,1,1,0], k = 3
<strong>Output:</strong> true
<strong>Explanation:</strong> We can do the following operations:
- Choose the subarray [2,2,3]. The resulting array will be nums = [<strong><u>1</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,1,1,0].
- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,<strong><u>1</u></strong>,<strong><u>0</u></strong>,<strong><u>0</u></strong>,0].
- Choose the subarray [1,1,1]. The resulting array will be nums = [<u><strong>0</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>,0,0,0].
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,1,1], k = 2
<strong>Output:</strong> false
<strong>Explanation:</strong> It is not possible to make all the array elements equal to 0.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    bool checkArray(vector<int>& nums, int k) {
        
    }
};","class Solution {
    public boolean checkArray(int[] nums, int k) {
        
    }
}","class Solution(object):
    def checkArray(self, nums, k):
        """"""
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """"""
        ","class Solution:
    def checkArray(self, nums: List[int], k: int) -> bool:
        ","bool checkArray(int* nums, int numsSize, int k){

}","public class Solution {
    public bool CheckArray(int[] nums, int k) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var checkArray = function(nums, k) {
    
};","# @param {Integer[]} nums
# @param {Integer} k
# @return {Boolean}
def check_array(nums, k)
    
end","class Solution {
    func checkArray(_ nums: [Int], _ k: Int) -> Bool {
        
    }
}","func checkArray(nums []int, k int) bool {
    
}","object Solution {
    def checkArray(nums: Array[Int], k: Int): Boolean = {
        
    }
}","class Solution {
    fun checkArray(nums: IntArray, k: Int): Boolean {
        
    }
}","impl Solution {
    pub fn check_array(nums: Vec<i32>, k: i32) -> bool {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $k
     * @return Boolean
     */
    function checkArray($nums, $k) {
        
    }
}","function checkArray(nums: number[], k: number): boolean {

};","(define/contract (check-array nums k)
  (-> (listof exact-integer?) exact-integer? boolean?)

  )","-spec check_array(Nums :: [integer()], K :: integer()) -> boolean().
check_array(Nums, K) ->
  .","defmodule Solution do
  @spec check_array(nums :: [integer], k :: integer) :: boolean
  def check_array(nums, k) do

  end
end","class Solution {
  bool checkArray(List<int> nums, int k) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and a positive integer <code>k</code>.</p>,"<p>

<p>You can apply the following operation on the array <strong>any</strong> number of times:</p>

<ul>
	<li>Choose <strong>any</strong> subarray of size <code>k</code> from the array and <strong>decrease</strong> all its elements by <code>1</code>.</li>
</ul>

<p>Return <code>true</code><em> if you can make all the array elements equal to </em><code>0</code><em>, or </em><code>false</code><em> otherwise</em>.</p>

<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,2,3,1,1,0], k = 3
<strong>Output:</strong> true
<strong>Explanation:</strong> We can do the following operations:
- Choose the subarray [2,2,3]. The resulting array will be nums = [<strong><u>1</u></strong>,<strong><u>1</u></strong>,<strong><u>2</u></strong>,1,1,0].
- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,<strong><u>1</u></strong>,<strong><u>0</u></strong>,<strong><u>0</u></strong>,0].
- Choose the subarray [1,1,1]. The resulting array will be nums = [<u><strong>0</strong></u>,<u><strong>0</strong></u>,<u><strong>0</strong></u>,0,0,0].
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,1,1], k = 2
<strong>Output:</strong> false
<strong>Explanation:</strong> It is not possible to make all the array elements equal to 0.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>
</ul>
","
LeetCode Problem #2772
Title: Apply Operations to Make All Array Elements Equal to Zero
Description:
You are given a 0-indexed integer array nums and a positive integer k....
","You can apply the following operation on the array any number of times: Choose any subarray of size k from the array and decrease all its elements by 1. Return true if you can make all the array elements equal to 0, or false otherwise. A subarray is a contiguous non-empty part of an array. Example 1: Input: nums = [2, 2, 3, 1, 1, 0], k = 3 Output: true Explanation: We can do the following operations: - Choose the subarray [2, 2, 3]. The resulting array will be nums = [ 1, 1, 2, 1, 1, 0]. - Choose the subarray [2, 1, 1]. The resulting array will be nums = [1, 1, 1, 0, 0, 0]. - Choose the subarray [1, 1, 1]. The resulting array will be nums = [ 0, 0, 0, 0, 0, 0]. Example 2: Input: nums = [1, 3, 1, 1], k = 2 Output: false Explanation: It is not possible to make all the array elements equal to 0. Constraints: 1 <= k <= nums.length <= 10e5 0 <= nums[i] <= 10e6
","You are given a 0-indexed integer array nums and a positive integer k. You can apply the following operation on the array any number of times: Choose any subarray of size k from the array and decrease all its elements by 1. Return true if you can make all the array elements equal to 0, or false otherwise. A subarray is a contiguous non-empty part of an array. Example 1: Input: nums = [2, 2, 3, 1, 1, 0], k = 3 Output: true Explanation: We can do the following operations: - Choose the subarray [2, 2, 3]. The resulting array will be nums = [ 1, 1, 2, 1, 1, 0]. - Choose the subarray [2, 1, 1]. The resulting array will be nums = [1, 1, 1, 0, 0, 0]. - Choose the subarray [1, 1, 1]. The resulting array will be nums = [ 0, 0, 0, 0, 0, 0]. Example 2: Input: nums = [1, 3, 1, 1], k = 2 Output: false Explanation: It is not possible to make all the array elements equal to 0. Constraints: 1 <= k <= nums.length <= 10e5 0 <= nums[i] <= 10e6",
shortest-string-that-contains-three-strings,Shortest String That Contains Three Strings,2800.0,2877.0,"Given three strings <code>a</code>, <code>b</code>, and <code>c</code>, your task is to find a string that has the<strong> minimum</strong> length and contains all three strings as <strong>substrings</strong>.
<p>If there are multiple such strings, return the<em> </em><strong>lexicographically<em> </em>smallest </strong>one.</p>

<p>Return <em>a string denoting the answer to the problem.</em></p>

<p><strong>Notes</strong></p>

<ul>
	<li>A string <code>a</code> is <strong>lexicographically smaller</strong> than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears <strong>earlier </strong>in the alphabet than the corresponding letter in <code>b</code>.</li>
	<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>
</ul>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> a = &quot;abc&quot;, b = &quot;bca&quot;, c = &quot;aaa&quot;
<strong>Output:</strong> &quot;aaabca&quot;
<strong>Explanation:</strong>  We show that &quot;aaabca&quot; contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and &quot;aaabca&quot; is the lexicographically smallest one.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> a = &quot;ab&quot;, b = &quot;ba&quot;, c = &quot;aba&quot;
<strong>Output:</strong> &quot;aba&quot;
<strong>Explanation: </strong>We show that the string &quot;aba&quot; contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that &quot;aba&quot; is the lexicographically smallest one.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= a.length, b.length, c.length &lt;= 100</code></li>
	<li><code>a</code>, <code>b</code>, <code>c</code> consist only of lowercase English letters.</li>
</ul>
",2.0,False,"class Solution {
public:
    string minimumString(string a, string b, string c) {
        
    }
};","class Solution {
    public String minimumString(String a, String b, String c) {
        
    }
}","class Solution(object):
    def minimumString(self, a, b, c):
        """"""
        :type a: str
        :type b: str
        :type c: str
        :rtype: str
        """"""
        ","class Solution:
    def minimumString(self, a: str, b: str, c: str) -> str:
        ","char * minimumString(char * a, char * b, char * c){

}","public class Solution {
    public string MinimumString(string a, string b, string c) {
        
    }
}","/**
 * @param {string} a
 * @param {string} b
 * @param {string} c
 * @return {string}
 */
var minimumString = function(a, b, c) {
    
};","# @param {String} a
# @param {String} b
# @param {String} c
# @return {String}
def minimum_string(a, b, c)
    
end","class Solution {
    func minimumString(_ a: String, _ b: String, _ c: String) -> String {
        
    }
}","func minimumString(a string, b string, c string) string {
    
}","object Solution {
    def minimumString(a: String, b: String, c: String): String = {
        
    }
}","class Solution {
    fun minimumString(a: String, b: String, c: String): String {
        
    }
}","impl Solution {
    pub fn minimum_string(a: String, b: String, c: String) -> String {
        
    }
}","class Solution {

    /**
     * @param String $a
     * @param String $b
     * @param String $c
     * @return String
     */
    function minimumString($a, $b, $c) {
        
    }
}","function minimumString(a: string, b: string, c: string): string {

};","(define/contract (minimum-string a b c)
  (-> string? string? string? string?)

  )","-spec minimum_string(A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), C :: unicode:unicode_binary()) -> unicode:unicode_binary().
minimum_string(A, B, C) ->
  .","defmodule Solution do
  @spec minimum_string(a :: String.t, b :: String.t, c :: String.t) :: String.t
  def minimum_string(a, b, c) do

  end
end","class Solution {
  String minimumString(String a, String b, String c) {

  }
}","Given three strings <code>a</code>, <code>b</code>, and <code>c</code>, your task is to find a string that has the<strong> minimum</strong> length and contains all three strings as <strong>substrings</strong>.
<p>If there are multiple such strings, return the<em> </em><strong>lexicographically<em> </em>smallest </strong>one.</p>","<p>

<p>Return <em>a string denoting the answer to the problem.</em></p>

<p><strong>Notes</strong></p>

<ul>
	<li>A string <code>a</code> is <strong>lexicographically smaller</strong> than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears <strong>earlier </strong>in the alphabet than the corresponding letter in <code>b</code>.</li>
	<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>
</ul>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> a = &quot;abc&quot;, b = &quot;bca&quot;, c = &quot;aaa&quot;
<strong>Output:</strong> &quot;aaabca&quot;
<strong>Explanation:</strong>  We show that &quot;aaabca&quot; contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and &quot;aaabca&quot; is the lexicographically smallest one.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> a = &quot;ab&quot;, b = &quot;ba&quot;, c = &quot;aba&quot;
<strong>Output:</strong> &quot;aba&quot;
<strong>Explanation: </strong>We show that the string &quot;aba&quot; contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that &quot;aba&quot; is the lexicographically smallest one.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= a.length, b.length, c.length &lt;= 100</code></li>
	<li><code>a</code>, <code>b</code>, <code>c</code> consist only of lowercase English letters.</li>
</ul>
","
LeetCode Problem #2800
Title: Shortest String That Contains Three Strings
Description:
Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings. If there are multiple such strings, return the lexicographically smallest one....
","Return a string denoting the answer to the problem. Notes A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. A substring is a contiguous sequence of characters within a string. Example 1: Input: a = ""abc"", b = ""bca"", c = ""aaa"" Output: ""aaabca"" Explanation: We show that ""aaabca"" contains all the given strings: a = ans[2. . . 4], b = ans[3. . 5], c = ans[0. . 2]. It can be shown that the length of the resulting string would be at least 6 and ""aaabca"" is the lexicographically smallest one. Example 2: Input: a = ""ab"", b = ""ba"", c = ""aba"" Output: ""aba"" Explanation: We show that the string ""aba"" contains all the given strings: a = ans[0. . 1], b = ans[1. . 2], c = ans[0. . 2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that ""aba"" is the lexicographically smallest one. Constraints: 1 <= a.length, b.length, c.length <= 100 a, b, c consist only of lowercase English letters.
","Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings. If there are multiple such strings, return the lexicographically smallest one. Return a string denoting the answer to the problem. Notes A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. A substring is a contiguous sequence of characters within a string. Example 1: Input: a = ""abc"", b = ""bca"", c = ""aaa"" Output: ""aaabca"" Explanation: We show that ""aaabca"" contains all the given strings: a = ans[2. . . 4], b = ans[3. . 5], c = ans[0. . 2]. It can be shown that the length of the resulting string would be at least 6 and ""aaabca"" is the lexicographically smallest one. Example 2: Input: a = ""ab"", b = ""ba"", c = ""aba"" Output: ""aba"" Explanation: We show that the string ""aba"" contains all the given strings: a = ans[0. . 1], b = ans[1. . 2], c = ans[0. . 2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that ""aba"" is the lexicographically smallest one. Constraints: 1 <= a.length, b.length, c.length <= 100 a, b, c consist only of lowercase English letters.",
number-of-employees-who-met-the-target,Number of Employees Who Met the Target,2798.0,2876.0,"<p>There are <code>n</code> employees in a company, numbered from <code>0</code> to <code>n - 1</code>. Each employee <code>i</code> has worked for <code>hours[i]</code> hours in the company.</p>

<p>The company requires each employee to work for <strong>at least</strong> <code>target</code> hours.</p>

<p>You are given a <strong>0-indexed</strong> array of non-negative integers <code>hours</code> of length <code>n</code> and a non-negative integer <code>target</code>.</p>

<p>Return <em>the integer denoting the number of employees who worked at least</em> <code>target</code> <em>hours</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> hours = [0,1,2,3,4], target = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> The company wants each employee to work for at least 2 hours.
- Employee 0 worked for 0 hours and didn&#39;t meet the target.
- Employee 1 worked for 1 hours and didn&#39;t meet the target.
- Employee 2 worked for 2 hours and met the target.
- Employee 3 worked for 3 hours and met the target.
- Employee 4 worked for 4 hours and met the target.
There are 3 employees who met the target.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> hours = [5,1,4,2,2], target = 6
<strong>Output:</strong> 0
<strong>Explanation:</strong> The company wants each employee to work for at least 6 hours.
There are 0 employees who met the target.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == hours.length &lt;= 50</code></li>
	<li><code>0 &lt;=&nbsp;hours[i], target &lt;= 10<sup>5</sup></code></li>
</ul>
",1.0,False,"class Solution {
public:
    int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {
        
    }
};","class Solution {
    public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {
        
    }
}","class Solution(object):
    def numberOfEmployeesWhoMetTarget(self, hours, target):
        """"""
        :type hours: List[int]
        :type target: int
        :rtype: int
        """"""
        ","class Solution:
    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:
        ","int numberOfEmployeesWhoMetTarget(int* hours, int hoursSize, int target){

}","public class Solution {
    public int NumberOfEmployeesWhoMetTarget(int[] hours, int target) {
        
    }
}","/**
 * @param {number[]} hours
 * @param {number} target
 * @return {number}
 */
var numberOfEmployeesWhoMetTarget = function(hours, target) {
    
};","# @param {Integer[]} hours
# @param {Integer} target
# @return {Integer}
def number_of_employees_who_met_target(hours, target)
    
end","class Solution {
    func numberOfEmployeesWhoMetTarget(_ hours: [Int], _ target: Int) -> Int {
        
    }
}","func numberOfEmployeesWhoMetTarget(hours []int, target int) int {
    
}","object Solution {
    def numberOfEmployeesWhoMetTarget(hours: Array[Int], target: Int): Int = {
        
    }
}","class Solution {
    fun numberOfEmployeesWhoMetTarget(hours: IntArray, target: Int): Int {
        
    }
}","impl Solution {
    pub fn number_of_employees_who_met_target(hours: Vec<i32>, target: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $hours
     * @param Integer $target
     * @return Integer
     */
    function numberOfEmployeesWhoMetTarget($hours, $target) {
        
    }
}","function numberOfEmployeesWhoMetTarget(hours: number[], target: number): number {

};","(define/contract (number-of-employees-who-met-target hours target)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec number_of_employees_who_met_target(Hours :: [integer()], Target :: integer()) -> integer().
number_of_employees_who_met_target(Hours, Target) ->
  .","defmodule Solution do
  @spec number_of_employees_who_met_target(hours :: [integer], target :: integer) :: integer
  def number_of_employees_who_met_target(hours, target) do

  end
end","class Solution {
  int numberOfEmployeesWhoMetTarget(List<int> hours, int target) {

  }
}","<p>There are <code>n</code> employees in a company, numbered from <code>0</code> to <code>n - 1</code>. Each employee <code>i</code> has worked for <code>hours[i]</code> hours in the company.</p>","<p>

<p>The company requires each employee to work for <strong>at least</strong> <code>target</code> hours.</p>

<p>You are given a <strong>0-indexed</strong> array of non-negative integers <code>hours</code> of length <code>n</code> and a non-negative integer <code>target</code>.</p>

<p>Return <em>the integer denoting the number of employees who worked at least</em> <code>target</code> <em>hours</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> hours = [0,1,2,3,4], target = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> The company wants each employee to work for at least 2 hours.
- Employee 0 worked for 0 hours and didn&#39;t meet the target.
- Employee 1 worked for 1 hours and didn&#39;t meet the target.
- Employee 2 worked for 2 hours and met the target.
- Employee 3 worked for 3 hours and met the target.
- Employee 4 worked for 4 hours and met the target.
There are 3 employees who met the target.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> hours = [5,1,4,2,2], target = 6
<strong>Output:</strong> 0
<strong>Explanation:</strong> The company wants each employee to work for at least 6 hours.
There are 0 employees who met the target.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n == hours.length &lt;= 50</code></li>
	<li><code>0 &lt;=&nbsp;hours[i], target &lt;= 10<sup>5</sup></code></li>
</ul>
","
LeetCode Problem #2798
Title: Number of Employees Who Met the Target
Description:
There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company....
","The company requires each employee to work for at least target hours. You are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target. Return the integer denoting the number of employees who worked at least target hours. Example 1: Input: hours = [0, 1, 2, 3, 4], target = 2 Output: 3 Explanation: The company wants each employee to work for at least 2 hours. - Employee 0 worked for 0 hours and didn't meet the target. - Employee 1 worked for 1 hours and didn't meet the target. - Employee 2 worked for 2 hours and met the target. - Employee 3 worked for 3 hours and met the target. - Employee 4 worked for 4 hours and met the target. There are 3 employees who met the target. Example 2: Input: hours = [5, 1, 4, 2, 2], target = 6 Output: 0 Explanation: The company wants each employee to work for at least 6 hours. There are 0 employees who met the target. Constraints: 1 <= n == hours.length <= 50^0 <= hours[i], target <= 10e5
","There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company. The company requires each employee to work for at least target hours. You are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target. Return the integer denoting the number of employees who worked at least target hours. Example 1: Input: hours = [0, 1, 2, 3, 4], target = 2 Output: 3 Explanation: The company wants each employee to work for at least 2 hours. - Employee 0 worked for 0 hours and didn't meet the target. - Employee 1 worked for 1 hours and didn't meet the target. - Employee 2 worked for 2 hours and met the target. - Employee 3 worked for 3 hours and met the target. - Employee 4 worked for 4 hours and met the target. There are 3 employees who met the target. Example 2: Input: hours = [5, 1, 4, 2, 2], target = 6 Output: 0 Explanation: The company wants each employee to work for at least 6 hours. There are 0 employees who met the target. Constraints: 1 <= n == hours.length <= 50^0 <= hours[i], target <= 10e5",
prime-pairs-with-target-sum,Prime Pairs With Target Sum,2761.0,2873.0,"<p>You are given an integer <code>n</code>. We say that two integers <code>x</code> and <code>y</code> form a prime number pair if:</p>

<ul>
	<li><code>1 &lt;= x &lt;= y &lt;= n</code></li>
	<li><code>x + y == n</code></li>
	<li><code>x</code> and <code>y</code> are prime numbers</li>
</ul>

<p>Return <em>the 2D sorted list of prime number pairs</em> <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The list should be sorted in <strong>increasing</strong> order of <code>x<sub>i</sub></code>. If there are no prime number pairs at all, return <em>an empty array</em>.</p>

<p><strong>Note:</strong> A prime number is a natural number greater than <code>1</code> with only two factors, itself and <code>1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 10
<strong>Output:</strong> [[3,7],[5,5]]
<strong>Explanation:</strong> In this example, there are two prime pairs that satisfy the criteria. 
These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 2
<strong>Output:</strong> []
<strong>Explanation:</strong> We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    vector<vector<int>> findPrimePairs(int n) {
        
    }
};","class Solution {
    public List<List<Integer>> findPrimePairs(int n) {
        
    }
}","class Solution(object):
    def findPrimePairs(self, n):
        """"""
        :type n: int
        :rtype: List[List[int]]
        """"""
        ","class Solution:
    def findPrimePairs(self, n: int) -> List[List[int]]:
        ","/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** findPrimePairs(int n, int* returnSize, int** returnColumnSizes){

}","public class Solution {
    public IList<IList<int>> FindPrimePairs(int n) {
        
    }
}","/**
 * @param {number} n
 * @return {number[][]}
 */
var findPrimePairs = function(n) {
    
};","# @param {Integer} n
# @return {Integer[][]}
def find_prime_pairs(n)
    
end","class Solution {
    func findPrimePairs(_ n: Int) -> [[Int]] {
        
    }
}","func findPrimePairs(n int) [][]int {
    
}","object Solution {
    def findPrimePairs(n: Int): List[List[Int]] = {
        
    }
}","class Solution {
    fun findPrimePairs(n: Int): List<List<Int>> {
        
    }
}","impl Solution {
    pub fn find_prime_pairs(n: i32) -> Vec<Vec<i32>> {
        
    }
}","class Solution {

    /**
     * @param Integer $n
     * @return Integer[][]
     */
    function findPrimePairs($n) {
        
    }
}","function findPrimePairs(n: number): number[][] {

};","(define/contract (find-prime-pairs n)
  (-> exact-integer? (listof (listof exact-integer?)))

  )","-spec find_prime_pairs(N :: integer()) -> [[integer()]].
find_prime_pairs(N) ->
  .","defmodule Solution do
  @spec find_prime_pairs(n :: integer) :: [[integer]]
  def find_prime_pairs(n) do

  end
end","class Solution {
  List<List<int>> findPrimePairs(int n) {

  }
}",<p>You are given an integer <code>n</code>. We say that two integers <code>x</code> and <code>y</code> form a prime number pair if:</p>,"<p>

<ul>
	<li><code>1 &lt;= x &lt;= y &lt;= n</code></li>
	<li><code>x + y == n</code></li>
	<li><code>x</code> and <code>y</code> are prime numbers</li>
</ul>

<p>Return <em>the 2D sorted list of prime number pairs</em> <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The list should be sorted in <strong>increasing</strong> order of <code>x<sub>i</sub></code>. If there are no prime number pairs at all, return <em>an empty array</em>.</p>

<p><strong>Note:</strong> A prime number is a natural number greater than <code>1</code> with only two factors, itself and <code>1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 10
<strong>Output:</strong> [[3,7],[5,5]]
<strong>Explanation:</strong> In this example, there are two prime pairs that satisfy the criteria. 
These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 2
<strong>Output:</strong> []
<strong>Explanation:</strong> We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li>
</ul>
","
LeetCode Problem #2761
Title: Prime Pairs With Target Sum
Description:
You are given an integer n. We say that two integers x and y form a prime number pair if:...
","1 <= x <= y <= n x + y == n x and y are prime numbers Return the 2D sorted list of prime number pairs [x i, y i ]. The list should be sorted in increasing order of x i. If there are no prime number pairs at all, return an empty array. Note: A prime number is a natural number greater than 1 with only two factors, itself and 1. Example 1: Input: n = 10 Output: [[3, 7], [5, 5]] Explanation: In this example, there are two prime pairs that satisfy the criteria. These pairs are [3, 7] and [5, 5], and we return them in the sorted order as described in the problem statement. Example 2: Input: n = 2 Output: [] Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. Constraints: 1 <= n <= 10e6
","You are given an integer n. We say that two integers x and y form a prime number pair if: 1 <= x <= y <= n x + y == n x and y are prime numbers Return the 2D sorted list of prime number pairs [x i, y i ]. The list should be sorted in increasing order of x i. If there are no prime number pairs at all, return an empty array. Note: A prime number is a natural number greater than 1 with only two factors, itself and 1. Example 1: Input: n = 10 Output: [[3, 7], [5, 5]] Explanation: In this example, there are two prime pairs that satisfy the criteria. These pairs are [3, 7] and [5, 5], and we return them in the sorted order as described in the problem statement. Example 2: Input: n = 2 Output: [] Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. Constraints: 1 <= n <= 10e6",
largest-element-in-an-array-after-merge-operations,Largest Element in an Array after Merge Operations,2789.0,2872.0,"<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of positive integers.</p>

<p>You can do the following operation on the array <strong>any</strong> number of times:</p>

<ul>
	<li>Choose an integer <code>i</code> such that <code>0 &lt;= i &lt; nums.length - 1</code> and <code>nums[i] &lt;= nums[i + 1]</code>. Replace the element <code>nums[i + 1]</code> with <code>nums[i] + nums[i + 1]</code> and delete the element <code>nums[i]</code> from the array.</li>
</ul>

<p>Return <em>the value of the <b>largest</b> element that you can possibly obtain in the final array.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,7,9,3]
<strong>Output:</strong> 21
<strong>Explanation:</strong> We can apply the following operations on the array:
- Choose i = 0. The resulting array will be nums = [<u>5</u>,7,9,3].
- Choose i = 1. The resulting array will be nums = [5,<u>16</u>,3].
- Choose i = 0. The resulting array will be nums = [<u>21</u>,3].
The largest element in the final array is 21. It can be shown that we cannot obtain a larger element.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,3,3]
<strong>Output:</strong> 11
<strong>Explanation:</strong> We can do the following operations on the array:
- Choose i = 1. The resulting array will be nums = [5,<u>6</u>].
- Choose i = 0. The resulting array will be nums = [<u>11</u>].
There is only one element in the final array, which is 11.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    long long maxArrayValue(vector<int>& nums) {
        
    }
};","class Solution {
    public long maxArrayValue(int[] nums) {
        
    }
}","class Solution(object):
    def maxArrayValue(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def maxArrayValue(self, nums: List[int]) -> int:
        ","long long maxArrayValue(int* nums, int numsSize){

}","public class Solution {
    public long MaxArrayValue(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var maxArrayValue = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def max_array_value(nums)
    
end","class Solution {
    func maxArrayValue(_ nums: [Int]) -> Int {
        
    }
}","func maxArrayValue(nums []int) int64 {
    
}","object Solution {
    def maxArrayValue(nums: Array[Int]): Long = {
        
    }
}","class Solution {
    fun maxArrayValue(nums: IntArray): Long {
        
    }
}","impl Solution {
    pub fn max_array_value(nums: Vec<i32>) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function maxArrayValue($nums) {
        
    }
}","function maxArrayValue(nums: number[]): number {

};","(define/contract (max-array-value nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec max_array_value(Nums :: [integer()]) -> integer().
max_array_value(Nums) ->
  .","defmodule Solution do
  @spec max_array_value(nums :: [integer]) :: integer
  def max_array_value(nums) do

  end
end","class Solution {
  int maxArrayValue(List<int> nums) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of positive integers.</p>,"<p>

<p>You can do the following operation on the array <strong>any</strong> number of times:</p>

<ul>
	<li>Choose an integer <code>i</code> such that <code>0 &lt;= i &lt; nums.length - 1</code> and <code>nums[i] &lt;= nums[i + 1]</code>. Replace the element <code>nums[i + 1]</code> with <code>nums[i] + nums[i + 1]</code> and delete the element <code>nums[i]</code> from the array.</li>
</ul>

<p>Return <em>the value of the <b>largest</b> element that you can possibly obtain in the final array.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,7,9,3]
<strong>Output:</strong> 21
<strong>Explanation:</strong> We can apply the following operations on the array:
- Choose i = 0. The resulting array will be nums = [<u>5</u>,7,9,3].
- Choose i = 1. The resulting array will be nums = [5,<u>16</u>,3].
- Choose i = 0. The resulting array will be nums = [<u>21</u>,3].
The largest element in the final array is 21. It can be shown that we cannot obtain a larger element.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,3,3]
<strong>Output:</strong> 11
<strong>Explanation:</strong> We can do the following operations on the array:
- Choose i = 1. The resulting array will be nums = [5,<u>6</u>].
- Choose i = 0. The resulting array will be nums = [<u>11</u>].
There is only one element in the final array, which is 11.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>
</ul>
","
LeetCode Problem #2789
Title: Largest Element in an Array after Merge Operations
Description:
You are given a 0-indexed array nums consisting of positive integers....
","You can do the following operation on the array any number of times: Choose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array. Return the value of the largest element that you can possibly obtain in the final array. Example 1: Input: nums = [2, 3, 7, 9, 3] Output: 21 Explanation: We can apply the following operations on the array: - Choose i = 0. The resulting array will be nums = [ 5, 7, 9, 3]. - Choose i = 1. The resulting array will be nums = [5, 16, 3]. - Choose i = 0. The resulting array will be nums = [ 21, 3]. The largest element in the final array is 21. It can be shown that we cannot obtain a larger element. Example 2: Input: nums = [5, 3, 3] Output: 11 Explanation: We can do the following operations on the array: - Choose i = 1. The resulting array will be nums = [5, 6 ]. - Choose i = 0. The resulting array will be nums = [ 11 ]. There is only one element in the final array, which is 11. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e6
","You are given a 0-indexed array nums consisting of positive integers. You can do the following operation on the array any number of times: Choose an integer i such that 0 <= i < nums.length - 1 and nums[i] <= nums[i + 1]. Replace the element nums[i + 1] with nums[i] + nums[i + 1] and delete the element nums[i] from the array. Return the value of the largest element that you can possibly obtain in the final array. Example 1: Input: nums = [2, 3, 7, 9, 3] Output: 21 Explanation: We can apply the following operations on the array: - Choose i = 0. The resulting array will be nums = [ 5, 7, 9, 3]. - Choose i = 1. The resulting array will be nums = [5, 16, 3]. - Choose i = 0. The resulting array will be nums = [ 21, 3]. The largest element in the final array is 21. It can be shown that we cannot obtain a larger element. Example 2: Input: nums = [5, 3, 3] Output: 11 Explanation: We can do the following operations on the array: - Choose i = 1. The resulting array will be nums = [5, 6 ]. - Choose i = 0. The resulting array will be nums = [ 11 ]. There is only one element in the final array, which is 11. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e6",
double-a-number-represented-as-a-linked-list,Double a Number Represented as a Linked List,2816.0,2871.0,"<p>You are given the <code>head</code> of a <strong>non-empty</strong> linked list representing a non-negative integer without leading zeroes.</p>

<p>Return <em>the </em><code>head</code><em> of the linked list after <strong>doubling</strong> it</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/28/example.png"" style=""width: 401px; height: 81px;"" />
<pre>
<strong>Input:</strong> head = [1,8,9]
<strong>Output:</strong> [3,7,8]
<strong>Explanation:</strong> The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/28/example2.png"" style=""width: 401px; height: 81px;"" />
<pre>
<strong>Input:</strong> head = [9,9,9]
<strong>Output:</strong> [1,9,9,8]
<strong>Explanation:</strong> The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is in the range <code>[1, 10<sup>4</sup>]</code></li>
	<li><font face=""monospace""><code>0 &lt;= Node.val &lt;= 9</code></font></li>
	<li>The input is generated such that the list represents a number that does not have leading zeros, except the number <code>0</code> itself.</li>
</ul>
",2.0,False,"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* doubleIt(ListNode* head) {
        
    }
};","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode doubleIt(ListNode head) {
        
    }
}","# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def doubleIt(self, head):
        """"""
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """"""
        ","# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        ","/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* doubleIt(struct ListNode* head){

}","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode DoubleIt(ListNode head) {
        
    }
}","/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var doubleIt = function(head) {
    
};","# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @return {ListNode}
def double_it(head)
    
end","/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */
class Solution {
    func doubleIt(_ head: ListNode?) -> ListNode? {
        
    }
}","/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func doubleIt(head *ListNode) *ListNode {
    
}","/**
 * Definition for singly-linked list.
 * class ListNode(_x: Int = 0, _next: ListNode = null) {
 *   var next: ListNode = _next
 *   var x: Int = _x
 * }
 */
object Solution {
    def doubleIt(head: ListNode): ListNode = {
        
    }
}","/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun doubleIt(head: ListNode?): ListNode? {
        
    }
}","// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn double_it(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        
    }
}","/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val = 0, $next = null) {
 *         $this->val = $val;
 *         $this->next = $next;
 *     }
 * }
 */
class Solution {

    /**
     * @param ListNode $head
     * @return ListNode
     */
    function doubleIt($head) {
        
    }
}","/**
 * Definition for singly-linked list.
 * class ListNode {
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     }
 * }
 */

function doubleIt(head: ListNode | null): ListNode | null {

};","; Definition for singly-linked list:
#|

; val : integer?
; next : (or/c list-node? #f)
(struct list-node
  (val next) #:mutable #:transparent)

; constructor
(define (make-list-node [val 0])
  (list-node val #f))

|#

(define/contract (double-it head)
  (-> (or/c list-node? #f) (or/c list-node? #f))

  )","%% Definition for singly-linked list.
%%
%% -record(list_node, {val = 0 :: integer(),
%%                     next = null :: 'null' | #list_node{}}).

-spec double_it(Head :: #list_node{} | null) -> #list_node{} | null.
double_it(Head) ->
  .","# Definition for singly-linked list.
#
# defmodule ListNode do
#   @type t :: %__MODULE__{
#           val: integer,
#           next: ListNode.t() | nil
#         }
#   defstruct val: 0, next: nil
# end

defmodule Solution do
  @spec double_it(head :: ListNode.t | nil) :: ListNode.t | nil
  def double_it(head) do

  end
end","/**
 * Definition for singly-linked list.
 * class ListNode {
 *   int val;
 *   ListNode? next;
 *   ListNode([this.val = 0, this.next]);
 * }
 */
class Solution {
  ListNode? doubleIt(ListNode? head) {

  }
}",<p>You are given the <code>head</code> of a <strong>non-empty</strong> linked list representing a non-negative integer without leading zeroes.</p>,"<p>

<p>Return <em>the </em><code>head</code><em> of the linked list after <strong>doubling</strong> it</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/28/example.png"" style=""width: 401px; height: 81px;"" />
<pre>
<strong>Input:</strong> head = [1,8,9]
<strong>Output:</strong> [3,7,8]
<strong>Explanation:</strong> The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/28/example2.png"" style=""width: 401px; height: 81px;"" />
<pre>
<strong>Input:</strong> head = [9,9,9]
<strong>Output:</strong> [1,9,9,8]
<strong>Explanation:</strong> The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li>The number of nodes in the list is in the range <code>[1, 10<sup>4</sup>]</code></li>
	<li><font face=""monospace""><code>0 &lt;= Node.val &lt;= 9</code></font></li>
	<li>The input is generated such that the list represents a number that does not have leading zeros, except the number <code>0</code> itself.</li>
</ul>
","
LeetCode Problem #2816
Title: Double a Number Represented as a Linked List
Description:
You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes....
","Return the head of the linked list after doubling it. Example 1: Input: head = [1, 8, 9] Output: [3, 7, 8] Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378. Example 2: Input: head = [9, 9, 9] Output: [1, 9, 9, 8] Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. Constraints: The number of nodes in the list is in the range [1, 10e4 ] 0 <= Node. val <= 9 The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.
","You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes. Return the head of the linked list after doubling it. Example 1: Input: head = [1, 8, 9] Output: [3, 7, 8] Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378. Example 2: Input: head = [9, 9, 9] Output: [1, 9, 9, 8] Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. Constraints: The number of nodes in the list is in the range [1, 10e4 ] 0 <= Node. val <= 9 The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.",
longest-alternating-subarray,Longest Alternating Subarray,2765.0,2870.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray <code>s</code> of length <code>m</code> is called <strong>alternating</strong> if:</p>

<ul>
	<li><code>m</code> is greater than <code>1</code>.</li>
	<li><code>s<sub>1</sub> = s<sub>0</sub> + 1</code>.</li>
	<li>The <strong>0-indexed</strong> subarray <code>s</code> looks like <code>[s<sub>0</sub>, s<sub>1</sub>, s<sub>0</sub>, s<sub>1</sub>,...,s<sub>(m-1) % 2</sub>]</code>. In other words, <code>s<sub>1</sub> - s<sub>0</sub> = 1</code>, <code>s<sub>2</sub> - s<sub>1</sub> = -1</code>, <code>s<sub>3</sub> - s<sub>2</sub> = 1</code>, <code>s<sub>4</sub> - s<sub>3</sub> = -1</code>, and so on up to <code>s[m - 1] - s[m - 2] = (-1)<sup>m</sup></code>.</li>
</ul>

<p>Return <em>the maximum length of all <strong>alternating</strong> subarrays present in </em><code>nums</code> <em>or </em><code>-1</code><em> if no such subarray exists</em><em>.</em></p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,4,3,4]
<strong>Output:</strong> 4
<strong>Explanation:</strong> The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,5,6]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
</ul>
",1.0,False,"class Solution {
public:
    int alternatingSubarray(vector<int>& nums) {
        
    }
};","class Solution {
    public int alternatingSubarray(int[] nums) {
        
    }
}","class Solution(object):
    def alternatingSubarray(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def alternatingSubarray(self, nums: List[int]) -> int:
        ","int alternatingSubarray(int* nums, int numsSize){

}","public class Solution {
    public int AlternatingSubarray(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var alternatingSubarray = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def alternating_subarray(nums)
    
end","class Solution {
    func alternatingSubarray(_ nums: [Int]) -> Int {
        
    }
}","func alternatingSubarray(nums []int) int {
    
}","object Solution {
    def alternatingSubarray(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun alternatingSubarray(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn alternating_subarray(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function alternatingSubarray($nums) {
        
    }
}","function alternatingSubarray(nums: number[]): number {

};","(define/contract (alternating-subarray nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec alternating_subarray(Nums :: [integer()]) -> integer().
alternating_subarray(Nums) ->
  .","defmodule Solution do
  @spec alternating_subarray(nums :: [integer]) :: integer
  def alternating_subarray(nums) do

  end
end","class Solution {
  int alternatingSubarray(List<int> nums) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray <code>s</code> of length <code>m</code> is called <strong>alternating</strong> if:</p>,"<p>

<ul>
	<li><code>m</code> is greater than <code>1</code>.</li>
	<li><code>s<sub>1</sub> = s<sub>0</sub> + 1</code>.</li>
	<li>The <strong>0-indexed</strong> subarray <code>s</code> looks like <code>[s<sub>0</sub>, s<sub>1</sub>, s<sub>0</sub>, s<sub>1</sub>,...,s<sub>(m-1) % 2</sub>]</code>. In other words, <code>s<sub>1</sub> - s<sub>0</sub> = 1</code>, <code>s<sub>2</sub> - s<sub>1</sub> = -1</code>, <code>s<sub>3</sub> - s<sub>2</sub> = 1</code>, <code>s<sub>4</sub> - s<sub>3</sub> = -1</code>, and so on up to <code>s[m - 1] - s[m - 2] = (-1)<sup>m</sup></code>.</li>
</ul>

<p>Return <em>the maximum length of all <strong>alternating</strong> subarrays present in </em><code>nums</code> <em>or </em><code>-1</code><em> if no such subarray exists</em><em>.</em></p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,4,3,4]
<strong>Output:</strong> 4
<strong>Explanation:</strong> The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,5,6]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>
</ul>
","
LeetCode Problem #2765
Title: Longest Alternating Subarray
Description:
You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:...
","m is greater than 1. s 1 = s 0 + 1. The 0-indexed subarray s looks like [s 0, s 1, s 0, s 1,. . . , s (m-1) % 2 ]. In other words, s 1 - s 0 = 1, s 2 - s 1 = -1, s 3 - s 2 = 1, s 4 - s 3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1) m. Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 3, 4, 3, 4] Output: 4 Explanation: The alternating subarrays are [3, 4], [3, 4, 3], and [3, 4, 3, 4]. The longest of these is [3, 4, 3, 4], which is of length 4. Example 2: Input: nums = [4, 5, 6] Output: 2 Explanation: [4, 5] and [5, 6] are the only two alternating subarrays. They are both of length 2. Constraints: 2 <= nums.length <= 100^1 <= nums[i] <= 10e4
","You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if: m is greater than 1. s 1 = s 0 + 1. The 0-indexed subarray s looks like [s 0, s 1, s 0, s 1,. . . , s (m-1) % 2 ]. In other words, s 1 - s 0 = 1, s 2 - s 1 = -1, s 3 - s 2 = 1, s 4 - s 3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1) m. Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 3, 4, 3, 4] Output: 4 Explanation: The alternating subarrays are [3, 4], [3, 4, 3], and [3, 4, 3, 4]. The longest of these is [3, 4, 3, 4], which is of length 4. Example 2: Input: nums = [4, 5, 6] Output: 2 Explanation: [4, 5] and [5, 6] are the only two alternating subarrays. They are both of length 2. Constraints: 2 <= nums.length <= 100^1 <= nums[i] <= 10e4",
longest-non-decreasing-subarray-from-two-arrays,Longest Non-decreasing Subarray From Two Arrays,2771.0,2869.0,"<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>.</p>

<p>Let&#39;s define another <strong>0-indexed</strong> integer array, <code>nums3</code>, of length <code>n</code>. For each index <code>i</code> in the range <code>[0, n - 1]</code>, you can assign either <code>nums1[i]</code> or <code>nums2[i]</code> to <code>nums3[i]</code>.</p>

<p>Your task is to maximize the length of the <strong>longest non-decreasing subarray</strong> in <code>nums3</code> by choosing its values optimally.</p>

<p>Return <em>an integer representing the length of the <strong>longest non-decreasing</strong> subarray in</em> <code>nums3</code>.</p>

<p><strong>Note: </strong>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [2,3,1], nums2 = [1,2,1]
<strong>Output:</strong> 2
<strong>Explanation: </strong>One way to construct nums3 is: 
nums3 = [nums1[0], nums2[1], nums2[2]] =&gt; [2,2,1]. 
The subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. 
We can show that 2 is the maximum achievable length.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,3,2,1], nums2 = [2,2,3,4]
<strong>Output:</strong> 4
<strong>Explanation:</strong> One way to construct nums3 is: 
nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] =&gt; [1,2,3,4]. 
The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,1], nums2 = [2,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> One way to construct nums3 is: 
nums3 = [nums1[0], nums1[1]] =&gt; [1,1]. 
The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums1.length == nums2.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
        
    }
};","class Solution {
    public int maxNonDecreasingLength(int[] nums1, int[] nums2) {
        
    }
}","class Solution(object):
    def maxNonDecreasingLength(self, nums1, nums2):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:
        ","int maxNonDecreasingLength(int* nums1, int nums1Size, int* nums2, int nums2Size){

}","public class Solution {
    public int MaxNonDecreasingLength(int[] nums1, int[] nums2) {
        
    }
}","/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number}
 */
var maxNonDecreasingLength = function(nums1, nums2) {
    
};","# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Integer}
def max_non_decreasing_length(nums1, nums2)
    
end","class Solution {
    func maxNonDecreasingLength(_ nums1: [Int], _ nums2: [Int]) -> Int {
        
    }
}","func maxNonDecreasingLength(nums1 []int, nums2 []int) int {
    
}","object Solution {
    def maxNonDecreasingLength(nums1: Array[Int], nums2: Array[Int]): Int = {
        
    }
}","class Solution {
    fun maxNonDecreasingLength(nums1: IntArray, nums2: IntArray): Int {
        
    }
}","impl Solution {
    pub fn max_non_decreasing_length(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @return Integer
     */
    function maxNonDecreasingLength($nums1, $nums2) {
        
    }
}","function maxNonDecreasingLength(nums1: number[], nums2: number[]): number {

};","(define/contract (max-non-decreasing-length nums1 nums2)
  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)

  )","-spec max_non_decreasing_length(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().
max_non_decreasing_length(Nums1, Nums2) ->
  .","defmodule Solution do
  @spec max_non_decreasing_length(nums1 :: [integer], nums2 :: [integer]) :: integer
  def max_non_decreasing_length(nums1, nums2) do

  end
end","class Solution {
  int maxNonDecreasingLength(List<int> nums1, List<int> nums2) {

  }
}",<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>.</p>,"<p>

<p>Let&#39;s define another <strong>0-indexed</strong> integer array, <code>nums3</code>, of length <code>n</code>. For each index <code>i</code> in the range <code>[0, n - 1]</code>, you can assign either <code>nums1[i]</code> or <code>nums2[i]</code> to <code>nums3[i]</code>.</p>

<p>Your task is to maximize the length of the <strong>longest non-decreasing subarray</strong> in <code>nums3</code> by choosing its values optimally.</p>

<p>Return <em>an integer representing the length of the <strong>longest non-decreasing</strong> subarray in</em> <code>nums3</code>.</p>

<p><strong>Note: </strong>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [2,3,1], nums2 = [1,2,1]
<strong>Output:</strong> 2
<strong>Explanation: </strong>One way to construct nums3 is: 
nums3 = [nums1[0], nums2[1], nums2[2]] =&gt; [2,2,1]. 
The subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. 
We can show that 2 is the maximum achievable length.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,3,2,1], nums2 = [2,2,3,4]
<strong>Output:</strong> 4
<strong>Explanation:</strong> One way to construct nums3 is: 
nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] =&gt; [1,2,3,4]. 
The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [1,1], nums2 = [2,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> One way to construct nums3 is: 
nums3 = [nums1[0], nums1[1]] =&gt; [1,1]. 
The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums1.length == nums2.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2771
Title: Longest Non-decreasing Subarray From Two Arrays
Description:
You are given two 0-indexed integer arrays nums1 and nums2 of length n....
","Let's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i]. Your task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally. Return an integer representing the length of the longest non-decreasing subarray in nums3. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums1 = [2, 3, 1], nums2 = [1, 2, 1] Output: 2 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums2[1], nums2[2]] => [2, 2, 1]. The subarray starting from index 0 and ending at index 1, [2, 2], forms a non-decreasing subarray of length 2. We can show that 2 is the maximum achievable length. Example 2: Input: nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4] Output: 4 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1, 2, 3, 4]. The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length. Example 3: Input: nums1 = [1, 1], nums2 = [2, 2] Output: 2 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums1[1]] => [1, 1]. The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length. Constraints: 1 <= nums1.length == nums2.length == n <= 10e5 1 <= nums1[i], nums2[i] <= 10e9
","You are given two 0-indexed integer arrays nums1 and nums2 of length n. Let's define another 0-indexed integer array, nums3, of length n. For each index i in the range [0, n - 1], you can assign either nums1[i] or nums2[i] to nums3[i]. Your task is to maximize the length of the longest non-decreasing subarray in nums3 by choosing its values optimally. Return an integer representing the length of the longest non-decreasing subarray in nums3. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums1 = [2, 3, 1], nums2 = [1, 2, 1] Output: 2 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums2[1], nums2[2]] => [2, 2, 1]. The subarray starting from index 0 and ending at index 1, [2, 2], forms a non-decreasing subarray of length 2. We can show that 2 is the maximum achievable length. Example 2: Input: nums1 = [1, 3, 2, 1], nums2 = [2, 2, 3, 4] Output: 4 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] => [1, 2, 3, 4]. The entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length. Example 3: Input: nums1 = [1, 1], nums2 = [2, 2] Output: 2 Explanation: One way to construct nums3 is: nums3 = [nums1[0], nums1[1]] => [1, 1]. The entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length. Constraints: 1 <= nums1.length == nums2.length == n <= 10e5 1 <= nums1[i], nums2[i] <= 10e9",
continuous-subarrays,Continuous Subarrays,2762.0,2868.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray of <code>nums</code> is called <strong>continuous</strong> if:</p>

<ul>
	<li>Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code><sub> </sub>be the indices in the subarray. Then, for each pair of indices <code>i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j</code>, <code><font face=""monospace"">0 &lt;=</font> |nums[i<sub>1</sub>] - nums[i<sub>2</sub>]| &lt;= 2</code>.</li>
</ul>

<p>Return <em>the total number of <strong>continuous</strong> subarrays.</em></p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,4,2,4]
<strong>Output:</strong> 8
<strong>Explanation:</strong> 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
</pre>

<p>&nbsp;</p>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3]
<strong>Output:</strong> 6
<strong>Explanation:</strong> 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    long long continuousSubarrays(vector<int>& nums) {
        
    }
};","class Solution {
    public long continuousSubarrays(int[] nums) {
        
    }
}","class Solution(object):
    def continuousSubarrays(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def continuousSubarrays(self, nums: List[int]) -> int:
        ","long long continuousSubarrays(int* nums, int numsSize){

}","public class Solution {
    public long ContinuousSubarrays(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var continuousSubarrays = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def continuous_subarrays(nums)
    
end","class Solution {
    func continuousSubarrays(_ nums: [Int]) -> Int {
        
    }
}","func continuousSubarrays(nums []int) int64 {
    
}","object Solution {
    def continuousSubarrays(nums: Array[Int]): Long = {
        
    }
}","class Solution {
    fun continuousSubarrays(nums: IntArray): Long {
        
    }
}","impl Solution {
    pub fn continuous_subarrays(nums: Vec<i32>) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function continuousSubarrays($nums) {
        
    }
}","function continuousSubarrays(nums: number[]): number {

};","(define/contract (continuous-subarrays nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec continuous_subarrays(Nums :: [integer()]) -> integer().
continuous_subarrays(Nums) ->
  .","defmodule Solution do
  @spec continuous_subarrays(nums :: [integer]) :: integer
  def continuous_subarrays(nums) do

  end
end","class Solution {
  int continuousSubarrays(List<int> nums) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. A subarray of <code>nums</code> is called <strong>continuous</strong> if:</p>,"<p>

<ul>
	<li>Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code><sub> </sub>be the indices in the subarray. Then, for each pair of indices <code>i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j</code>, <code><font face=""monospace"">0 &lt;=</font> |nums[i<sub>1</sub>] - nums[i<sub>2</sub>]| &lt;= 2</code>.</li>
</ul>

<p>Return <em>the total number of <strong>continuous</strong> subarrays.</em></p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,4,2,4]
<strong>Output:</strong> 8
<strong>Explanation:</strong> 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
</pre>

<p>&nbsp;</p>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3]
<strong>Output:</strong> 6
<strong>Explanation:</strong> 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2762
Title: Continuous Subarrays
Description:
You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:...
","Let i, i + 1,. . . , j be the indices in the subarray. Then, for each pair of indices i <= i 1, i 2 <= j, 0 <= |nums[i 1 ] - nums[i 2 ]| <= 2. Return the total number of continuous subarrays. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [5, 4, 2, 4] Output: 8 Explanation: Continuous subarray of size 1: [5], [4], [2], [4]. Continuous subarray of size 2: [5, 4], [4, 2], [2, 4]. Continuous subarray of size 3: [4, 2, 4]. Thereare no subarrys of size 4. Total continuous subarrays = 4 + 3 + 1 = 8. It can be shown that there are no more continuous subarrays. Example 2: Input: nums = [1, 2, 3] Output: 6 Explanation: Continuous subarray of size 1: [1], [2], [3]. Continuous subarray of size 2: [1, 2], [2, 3]. Continuous subarray of size 3: [1, 2, 3]. Total continuous subarrays = 3 + 2 + 1 = 6. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9
","You are given a 0-indexed integer array nums. A subarray of nums is called continuous if: Let i, i + 1,. . . , j be the indices in the subarray. Then, for each pair of indices i <= i 1, i 2 <= j, 0 <= |nums[i 1 ] - nums[i 2 ]| <= 2. Return the total number of continuous subarrays. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [5, 4, 2, 4] Output: 8 Explanation: Continuous subarray of size 1: [5], [4], [2], [4]. Continuous subarray of size 2: [5, 4], [4, 2], [2, 4]. Continuous subarray of size 3: [4, 2, 4]. Thereare no subarrys of size 4. Total continuous subarrays = 4 + 3 + 1 = 8. It can be shown that there are no more continuous subarrays. Example 2: Input: nums = [1, 2, 3] Output: 6 Explanation: Continuous subarray of size 1: [1], [2], [3]. Continuous subarray of size 2: [1, 2], [2, 3]. Continuous subarray of size 3: [1, 2, 3]. Total continuous subarrays = 3 + 2 + 1 = 6. Constraints: 1 <= nums.length <= 10e5 1 <= nums[i] <= 10e9",
ways-to-split-array-into-good-subarrays,Ways to Split Array Into Good Subarrays,2750.0,2867.0,"<p>You are given a binary array <code>nums</code>.</p>

<p>A subarray of an array is <strong>good</strong> if it contains <strong>exactly</strong> <strong>one</strong> element with the value <code>1</code>.</p>

<p>Return <em>an integer denoting the number of ways to split the array </em><code>nums</code><em> into <strong>good</strong> subarrays</em>. As the number may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [0,1,0,0,1]
<strong>Output:</strong> 3
<strong>Explanation:</strong> There are 3 ways to split nums into good subarrays:
- [0,1] [0,0,1]
- [0,1,0] [0,1]
- [0,1,0,0] [1]
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [0,1,0]
<strong>Output:</strong> 1
<strong>Explanation:</strong> There is 1 way to split nums into good subarrays:
- [0,1,0]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 1</code></li>
</ul>
",2.0,False,"class Solution {
public:
    int numberOfGoodSubarraySplits(vector<int>& nums) {
        
    }
};","class Solution {
    public int numberOfGoodSubarraySplits(int[] nums) {
        
    }
}","class Solution(object):
    def numberOfGoodSubarraySplits(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:
        ","int numberOfGoodSubarraySplits(int* nums, int numsSize){

}","public class Solution {
    public int NumberOfGoodSubarraySplits(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var numberOfGoodSubarraySplits = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def number_of_good_subarray_splits(nums)
    
end","class Solution {
    func numberOfGoodSubarraySplits(_ nums: [Int]) -> Int {
        
    }
}","func numberOfGoodSubarraySplits(nums []int) int {
    
}","object Solution {
    def numberOfGoodSubarraySplits(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun numberOfGoodSubarraySplits(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn number_of_good_subarray_splits(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function numberOfGoodSubarraySplits($nums) {
        
    }
}","function numberOfGoodSubarraySplits(nums: number[]): number {

};","(define/contract (number-of-good-subarray-splits nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec number_of_good_subarray_splits(Nums :: [integer()]) -> integer().
number_of_good_subarray_splits(Nums) ->
  .","defmodule Solution do
  @spec number_of_good_subarray_splits(nums :: [integer]) :: integer
  def number_of_good_subarray_splits(nums) do

  end
end","class Solution {
  int numberOfGoodSubarraySplits(List<int> nums) {

  }
}",<p>You are given a binary array <code>nums</code>.</p>,"<p>

<p>A subarray of an array is <strong>good</strong> if it contains <strong>exactly</strong> <strong>one</strong> element with the value <code>1</code>.</p>

<p>Return <em>an integer denoting the number of ways to split the array </em><code>nums</code><em> into <strong>good</strong> subarrays</em>. As the number may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [0,1,0,0,1]
<strong>Output:</strong> 3
<strong>Explanation:</strong> There are 3 ways to split nums into good subarrays:
- [0,1] [0,0,1]
- [0,1,0] [0,1]
- [0,1,0,0] [1]
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [0,1,0]
<strong>Output:</strong> 1
<strong>Explanation:</strong> There is 1 way to split nums into good subarrays:
- [0,1,0]
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>0 &lt;= nums[i] &lt;= 1</code></li>
</ul>
","
LeetCode Problem #2750
Title: Ways to Split Array Into Good Subarrays
Description:
You are given a binary array nums....
","A subarray of an array is good if it contains exactly one element with the value 1. Return an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 10e9 + 7. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [0, 1, 0, 0, 1] Output: 3 Explanation: There are 3 ways to split nums into good subarrays: - [0, 1] [0, 0, 1] - [0, 1, 0] [0, 1] - [0, 1, 0, 0] [1] Example 2: Input: nums = [0, 1, 0] Output: 1 Explanation: There is 1 way to split nums into good subarrays: - [0, 1, 0] Constraints: 1 <= nums.length <= 10e5 0 <= nums[i] <= 1
","You are given a binary array nums. A subarray of an array is good if it contains exactly one element with the value 1. Return an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 10e9 + 7. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [0, 1, 0, 0, 1] Output: 3 Explanation: There are 3 ways to split nums into good subarrays: - [0, 1] [0, 0, 1] - [0, 1, 0] [0, 1] - [0, 1, 0, 0] [1] Example 2: Input: nums = [0, 1, 0] Output: 1 Explanation: There is 1 way to split nums into good subarrays: - [0, 1, 0] Constraints: 1 <= nums.length <= 10e5 0 <= nums[i] <= 1",
longest-even-odd-subarray-with-threshold,Longest Even Odd Subarray With Threshold,2760.0,2866.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>threshold</code>.</p>

<p>Find the length of the <strong>longest subarray</strong> of <code>nums</code> starting at index <code>l</code> and ending at index <code>r</code> <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> that satisfies the following conditions:</p>

<ul>
	<li><code>nums[l] % 2 == 0</code></li>
	<li>For all indices <code>i</code> in the range <code>[l, r - 1]</code>, <code>nums[i] % 2 != nums[i + 1] % 2</code></li>
	<li>For all indices <code>i</code> in the range <code>[l, r]</code>, <code>nums[i] &lt;= threshold</code></li>
</ul>

<p>Return <em>an integer denoting the length of the longest such subarray.</em></p>

<p><strong>Note:</strong> A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,2,5,4], threshold = 5
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This subarray satisfies the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2], threshold = 2
<strong>Output:</strong> 1
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. 
It satisfies all the conditions and we can show that 1 is the maximum possible achievable length.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,4,5], threshold = 4
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. 
It satisfies all the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 100 </code></li>
	<li><code>1 &lt;= nums[i] &lt;= 100 </code></li>
	<li><code>1 &lt;= threshold &lt;= 100</code></li>
</ul>
",1.0,False,"class Solution {
public:
    int longestAlternatingSubarray(vector<int>& nums, int threshold) {
        
    }
};","class Solution {
    public int longestAlternatingSubarray(int[] nums, int threshold) {
        
    }
}","class Solution(object):
    def longestAlternatingSubarray(self, nums, threshold):
        """"""
        :type nums: List[int]
        :type threshold: int
        :rtype: int
        """"""
        ","class Solution:
    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:
        ","int longestAlternatingSubarray(int* nums, int numsSize, int threshold){

}","public class Solution {
    public int LongestAlternatingSubarray(int[] nums, int threshold) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} threshold
 * @return {number}
 */
var longestAlternatingSubarray = function(nums, threshold) {
    
};","# @param {Integer[]} nums
# @param {Integer} threshold
# @return {Integer}
def longest_alternating_subarray(nums, threshold)
    
end","class Solution {
    func longestAlternatingSubarray(_ nums: [Int], _ threshold: Int) -> Int {
        
    }
}","func longestAlternatingSubarray(nums []int, threshold int) int {
    
}","object Solution {
    def longestAlternatingSubarray(nums: Array[Int], threshold: Int): Int = {
        
    }
}","class Solution {
    fun longestAlternatingSubarray(nums: IntArray, threshold: Int): Int {
        
    }
}","impl Solution {
    pub fn longest_alternating_subarray(nums: Vec<i32>, threshold: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $threshold
     * @return Integer
     */
    function longestAlternatingSubarray($nums, $threshold) {
        
    }
}","function longestAlternatingSubarray(nums: number[], threshold: number): number {

};","(define/contract (longest-alternating-subarray nums threshold)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec longest_alternating_subarray(Nums :: [integer()], Threshold :: integer()) -> integer().
longest_alternating_subarray(Nums, Threshold) ->
  .","defmodule Solution do
  @spec longest_alternating_subarray(nums :: [integer], threshold :: integer) :: integer
  def longest_alternating_subarray(nums, threshold) do

  end
end","class Solution {
  int longestAlternatingSubarray(List<int> nums, int threshold) {

  }
}",<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> and an integer <code>threshold</code>.</p>,"<p>

<p>Find the length of the <strong>longest subarray</strong> of <code>nums</code> starting at index <code>l</code> and ending at index <code>r</code> <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> that satisfies the following conditions:</p>

<ul>
	<li><code>nums[l] % 2 == 0</code></li>
	<li>For all indices <code>i</code> in the range <code>[l, r - 1]</code>, <code>nums[i] % 2 != nums[i + 1] % 2</code></li>
	<li>For all indices <code>i</code> in the range <code>[l, r]</code>, <code>nums[i] &lt;= threshold</code></li>
</ul>

<p>Return <em>an integer denoting the length of the longest such subarray.</em></p>

<p><strong>Note:</strong> A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,2,5,4], threshold = 5
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This subarray satisfies the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2], threshold = 2
<strong>Output:</strong> 1
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. 
It satisfies all the conditions and we can show that 1 is the maximum possible achievable length.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,4,5], threshold = 4
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, we can select the subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. 
It satisfies all the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 100 </code></li>
	<li><code>1 &lt;= nums[i] &lt;= 100 </code></li>
	<li><code>1 &lt;= threshold &lt;= 100</code></li>
</ul>
","
LeetCode Problem #2760
Title: Longest Even Odd Subarray With Threshold
Description:
You are given a 0-indexed integer array nums and an integer threshold....
","Find the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions: nums[l] % 2 == 0 For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2 For all indices i in the range [l, r], nums[i] <= threshold Return an integer denoting the length of the longest such subarray. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [3, 2, 5, 4], threshold = 5 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2, 5, 4]. This subarray satisfies the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length. Example 2: Input: nums = [1, 2], threshold = 2 Output: 1 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. It satisfies all the conditions and we can show that 1 is the maximum possible achievable length. Example 3: Input: nums = [2, 3, 4, 5], threshold = 4 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2, 3, 4]. It satisfies all the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length. Constraints: 1 <= nums.length <= 100^1 <= nums[i] <= 100^1 <= threshold <= 100
","You are given a 0-indexed integer array nums and an integer threshold. Find the length of the longest subarray of nums starting at index l and ending at index r (0 <= l <= r < nums.length) that satisfies the following conditions: nums[l] % 2 == 0 For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2 For all indices i in the range [l, r], nums[i] <= threshold Return an integer denoting the length of the longest such subarray. Note: A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [3, 2, 5, 4], threshold = 5 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2, 5, 4]. This subarray satisfies the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length. Example 2: Input: nums = [1, 2], threshold = 2 Output: 1 Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. It satisfies all the conditions and we can show that 1 is the maximum possible achievable length. Example 3: Input: nums = [2, 3, 4, 5], threshold = 4 Output: 3 Explanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2, 3, 4]. It satisfies all the conditions. Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length. Constraints: 1 <= nums.length <= 100^1 <= nums[i] <= 100^1 <= threshold <= 100",
total-distance-traveled,Total Distance Traveled,2739.0,2857.0,"<p>A truck has two fuel tanks. You are given two integers, <code>mainTank</code> representing the fuel present in the main tank in liters and <code>additionalTank</code> representing the fuel present in the additional tank in liters.</p>

<p>The truck has a mileage of <code>10</code> km per liter. Whenever <code>5</code> liters of fuel get&nbsp;used up in the main tank,&nbsp;if the additional tank has at least <code>1</code> liters of fuel, <code>1</code> liters of fuel will be transferred from the additional tank to the main tank.</p>

<p>Return <em>the maximum distance which can be traveled.</em></p>

<p><strong>Note: </strong>Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> mainTank = 5, additionalTank = 10
<strong>Output:</strong> 60
<strong>Explanation:</strong> 
After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.
After spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.
Total distance traveled is 60km.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> mainTank = 1, additionalTank = 2
<strong>Output:</strong> 10
<strong>Explanation:</strong> 
After spending 1 litre of fuel, the main tank becomes empty.
Total distance traveled is 10km.

</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= mainTank, additionalTank &lt;= 100</code></li>
</ul>
",1.0,False,"class Solution {
public:
    int distanceTraveled(int mainTank, int additionalTank) {
        
    }
};","class Solution {
    public int distanceTraveled(int mainTank, int additionalTank) {
        
    }
}","class Solution(object):
    def distanceTraveled(self, mainTank, additionalTank):
        """"""
        :type mainTank: int
        :type additionalTank: int
        :rtype: int
        """"""
        ","class Solution:
    def distanceTraveled(self, mainTank: int, additionalTank: int) -> int:
        ","int distanceTraveled(int mainTank, int additionalTank){

}","public class Solution {
    public int DistanceTraveled(int mainTank, int additionalTank) {
        
    }
}","/**
 * @param {number} mainTank
 * @param {number} additionalTank
 * @return {number}
 */
var distanceTraveled = function(mainTank, additionalTank) {
    
};","# @param {Integer} main_tank
# @param {Integer} additional_tank
# @return {Integer}
def distance_traveled(main_tank, additional_tank)
    
end","class Solution {
    func distanceTraveled(_ mainTank: Int, _ additionalTank: Int) -> Int {
        
    }
}","func distanceTraveled(mainTank int, additionalTank int) int {
    
}","object Solution {
    def distanceTraveled(mainTank: Int, additionalTank: Int): Int = {
        
    }
}","class Solution {
    fun distanceTraveled(mainTank: Int, additionalTank: Int): Int {
        
    }
}","impl Solution {
    pub fn distance_traveled(main_tank: i32, additional_tank: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer $mainTank
     * @param Integer $additionalTank
     * @return Integer
     */
    function distanceTraveled($mainTank, $additionalTank) {
        
    }
}","function distanceTraveled(mainTank: number, additionalTank: number): number {

};","(define/contract (distance-traveled mainTank additionalTank)
  (-> exact-integer? exact-integer? exact-integer?)

  )","-spec distance_traveled(MainTank :: integer(), AdditionalTank :: integer()) -> integer().
distance_traveled(MainTank, AdditionalTank) ->
  .","defmodule Solution do
  @spec distance_traveled(main_tank :: integer, additional_tank :: integer) :: integer
  def distance_traveled(main_tank, additional_tank) do

  end
end","class Solution {
  int distanceTraveled(int mainTank, int additionalTank) {

  }
}","<p>A truck has two fuel tanks. You are given two integers, <code>mainTank</code> representing the fuel present in the main tank in liters and <code>additionalTank</code> representing the fuel present in the additional tank in liters.</p>","<p>

<p>The truck has a mileage of <code>10</code> km per liter. Whenever <code>5</code> liters of fuel get&nbsp;used up in the main tank,&nbsp;if the additional tank has at least <code>1</code> liters of fuel, <code>1</code> liters of fuel will be transferred from the additional tank to the main tank.</p>

<p>Return <em>the maximum distance which can be traveled.</em></p>

<p><strong>Note: </strong>Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> mainTank = 5, additionalTank = 10
<strong>Output:</strong> 60
<strong>Explanation:</strong> 
After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.
After spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.
Total distance traveled is 60km.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> mainTank = 1, additionalTank = 2
<strong>Output:</strong> 10
<strong>Explanation:</strong> 
After spending 1 litre of fuel, the main tank becomes empty.
Total distance traveled is 10km.

</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= mainTank, additionalTank &lt;= 100</code></li>
</ul>
","
LeetCode Problem #2739
Title: Total Distance Traveled
Description:
A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters....
","The truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get used up in the main tank, if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank. Return the maximum distance which can be traveled. Note: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed. Example 1: Input: mainTank = 5, additionalTank = 10 Output: 60 Explanation: After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km. After spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty. Total distance traveled is 60km. Example 2: Input: mainTank = 1, additionalTank = 2 Output: 10 Explanation: After spending 1 litre of fuel, the main tank becomes empty. Total distance traveled is 10km. Constraints: 1 <= mainTank, additionalTank <= 100
","A truck has two fuel tanks. You are given two integers, mainTank representing the fuel present in the main tank in liters and additionalTank representing the fuel present in the additional tank in liters. The truck has a mileage of 10 km per liter. Whenever 5 liters of fuel get used up in the main tank, if the additional tank has at least 1 liters of fuel, 1 liters of fuel will be transferred from the additional tank to the main tank. Return the maximum distance which can be traveled. Note: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed. Example 1: Input: mainTank = 5, additionalTank = 10 Output: 60 Explanation: After spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km. After spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty. Total distance traveled is 60km. Example 2: Input: mainTank = 1, additionalTank = 2 Output: 10 Explanation: After spending 1 litre of fuel, the main tank becomes empty. Total distance traveled is 10km. Constraints: 1 <= mainTank, additionalTank <= 100",
count-complete-subarrays-in-an-array,Count Complete Subarrays in an Array,2799.0,2856.0,"<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>

<p>We call a subarray of an array <strong>complete</strong> if the following condition is satisfied:</p>

<ul>
	<li>The number of <strong>distinct</strong> elements in the subarray is equal to the number of distinct elements in the whole array.</li>
</ul>

<p>Return <em>the number of <strong>complete</strong> subarrays</em>.</p>

<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,1,2,2]
<strong>Output:</strong> 4
<strong>Explanation:</strong> The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,5,5,5]
<strong>Output:</strong> 10
<strong>Explanation:</strong> The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 2000</code></li>
</ul>
",2.0,False,"class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
        
    }
};","class Solution {
    public int countCompleteSubarrays(int[] nums) {
        
    }
}","class Solution(object):
    def countCompleteSubarrays(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def countCompleteSubarrays(self, nums: List[int]) -> int:
        ","int countCompleteSubarrays(int* nums, int numsSize){

}","public class Solution {
    public int CountCompleteSubarrays(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var countCompleteSubarrays = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def count_complete_subarrays(nums)
    
end","class Solution {
    func countCompleteSubarrays(_ nums: [Int]) -> Int {
        
    }
}","func countCompleteSubarrays(nums []int) int {
    
}","object Solution {
    def countCompleteSubarrays(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun countCompleteSubarrays(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn count_complete_subarrays(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function countCompleteSubarrays($nums) {
        
    }
}","function countCompleteSubarrays(nums: number[]): number {

};","(define/contract (count-complete-subarrays nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec count_complete_subarrays(Nums :: [integer()]) -> integer().
count_complete_subarrays(Nums) ->
  .","defmodule Solution do
  @spec count_complete_subarrays(nums :: [integer]) :: integer
  def count_complete_subarrays(nums) do

  end
end","class Solution {
  int countCompleteSubarrays(List<int> nums) {

  }
}",<p>You are given an array <code>nums</code> consisting of <strong>positive</strong> integers.</p>,"<p>

<p>We call a subarray of an array <strong>complete</strong> if the following condition is satisfied:</p>

<ul>
	<li>The number of <strong>distinct</strong> elements in the subarray is equal to the number of distinct elements in the whole array.</li>
</ul>

<p>Return <em>the number of <strong>complete</strong> subarrays</em>.</p>

<p>A <strong>subarray</strong> is a contiguous non-empty part of an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,1,2,2]
<strong>Output:</strong> 4
<strong>Explanation:</strong> The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [5,5,5,5]
<strong>Output:</strong> 10
<strong>Explanation:</strong> The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 2000</code></li>
</ul>
","
LeetCode Problem #2799
Title: Count Complete Subarrays in an Array
Description:
You are given an array nums consisting of positive integers....
","We call a subarray of an array complete if the following condition is satisfied: The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array. Return the number of complete subarrays. A subarray is a contiguous non-empty part of an array. Example 1: Input: nums = [1, 3, 1, 2, 2] Output: 4 Explanation: The complete subarrays are the following: [1, 3, 1, 2], [1, 3, 1, 2, 2], [3, 1, 2] and [3, 1, 2, 2]. Example 2: Input: nums = [5, 5, 5, 5] Output: 10 Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10. Constraints: 1 <= nums.length <= 1000^1 <= nums[i] <= 2000
","You are given an array nums consisting of positive integers. We call a subarray of an array complete if the following condition is satisfied: The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array. Return the number of complete subarrays. A subarray is a contiguous non-empty part of an array. Example 1: Input: nums = [1, 3, 1, 2, 2] Output: 4 Explanation: The complete subarrays are the following: [1, 3, 1, 2], [1, 3, 1, 2, 2], [3, 1, 2] and [3, 1, 2, 2]. Example 2: Input: nums = [5, 5, 5, 5] Output: 10 Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10. Constraints: 1 <= nums.length <= 1000^1 <= nums[i] <= 2000",
maximum-number-of-jumps-to-reach-the-last-index,Maximum Number of Jumps to Reach the Last Index,2770.0,2855.0,"<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of <code>n</code> integers and an integer <code>target</code>.</p>

<p>You are initially positioned at index <code>0</code>. In one step, you can jump from index <code>i</code> to any index <code>j</code> such that:</p>

<ul>
	<li><code>0 &lt;= i &lt; j &lt; n</code></li>
	<li><code>-target &lt;= nums[j] - nums[i] &lt;= target</code></li>
</ul>

<p>Return <em>the <strong>maximum number of jumps</strong> you can make to reach index</em> <code>n - 1</code>.</p>

<p>If there is no way to reach index <code>n - 1</code>, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:
- Jump from index 0 to index 1. 
- Jump from index 1 to index 3.
- Jump from index 3 to index 5.
It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 3
<strong>Output:</strong> 5
<strong>Explanation:</strong> To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:
- Jump from index 0 to index 1.
- Jump from index 1 to index 2.
- Jump from index 2 to index 3.
- Jump from index 3 to index 4.
- Jump from index 4 to index 5.
It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. </pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 0
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length == n &lt;= 1000</code></li>
	<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>
	<li><code>0 &lt;= target &lt;= 2 * 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int maximumJumps(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int maximumJumps(int[] nums, int target) {
        
    }
}","class Solution(object):
    def maximumJumps(self, nums, target):
        """"""
        :type nums: List[int]
        :type target: int
        :rtype: int
        """"""
        ","class Solution:
    def maximumJumps(self, nums: List[int], target: int) -> int:
        ","int maximumJumps(int* nums, int numsSize, int target){

}","public class Solution {
    public int MaximumJumps(int[] nums, int target) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var maximumJumps = function(nums, target) {
    
};","# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer}
def maximum_jumps(nums, target)
    
end","class Solution {
    func maximumJumps(_ nums: [Int], _ target: Int) -> Int {
        
    }
}","func maximumJumps(nums []int, target int) int {
    
}","object Solution {
    def maximumJumps(nums: Array[Int], target: Int): Int = {
        
    }
}","class Solution {
    fun maximumJumps(nums: IntArray, target: Int): Int {
        
    }
}","impl Solution {
    pub fn maximum_jumps(nums: Vec<i32>, target: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer
     */
    function maximumJumps($nums, $target) {
        
    }
}","function maximumJumps(nums: number[], target: number): number {

};","(define/contract (maximum-jumps nums target)
  (-> (listof exact-integer?) exact-integer? exact-integer?)

  )","-spec maximum_jumps(Nums :: [integer()], Target :: integer()) -> integer().
maximum_jumps(Nums, Target) ->
  .","defmodule Solution do
  @spec maximum_jumps(nums :: [integer], target :: integer) :: integer
  def maximum_jumps(nums, target) do

  end
end","class Solution {
  int maximumJumps(List<int> nums, int target) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>nums</code> of <code>n</code> integers and an integer <code>target</code>.</p>,"<p>

<p>You are initially positioned at index <code>0</code>. In one step, you can jump from index <code>i</code> to any index <code>j</code> such that:</p>

<ul>
	<li><code>0 &lt;= i &lt; j &lt; n</code></li>
	<li><code>-target &lt;= nums[j] - nums[i] &lt;= target</code></li>
</ul>

<p>Return <em>the <strong>maximum number of jumps</strong> you can make to reach index</em> <code>n - 1</code>.</p>

<p>If there is no way to reach index <code>n - 1</code>, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 2
<strong>Output:</strong> 3
<strong>Explanation:</strong> To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:
- Jump from index 0 to index 1. 
- Jump from index 1 to index 3.
- Jump from index 3 to index 5.
It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. </pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 3
<strong>Output:</strong> 5
<strong>Explanation:</strong> To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:
- Jump from index 0 to index 1.
- Jump from index 1 to index 2.
- Jump from index 2 to index 3.
- Jump from index 3 to index 4.
- Jump from index 4 to index 5.
It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. </pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,6,4,1,2], target = 0
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length == n &lt;= 1000</code></li>
	<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>
	<li><code>0 &lt;= target &lt;= 2 * 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2770
Title: Maximum Number of Jumps to Reach the Last Index
Description:
You are given a 0-indexed array nums of n integers and an integer target....
","You are initially positioned at index 0. In one step, you can jump from index i to any index j such that: 0 <= i < j < n -target <= nums[j] - nums[i] <= target Return the maximum number of jumps you can make to reach index n - 1. If there is no way to reach index n - 1, return -1. Example 1: Input: nums = [1, 3, 6, 4, 1, 2], target = 2 Output: 3 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1. - Jump from index 1 to index 3. - Jump from index 3 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. Example 2: Input: nums = [1, 3, 6, 4, 1, 2], target = 3 Output: 5 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1. - Jump from index 1 to index 2. - Jump from index 2 to index 3. - Jump from index 3 to index 4. - Jump from index 4 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. Example 3: Input: nums = [1, 3, 6, 4, 1, 2], target = 0 Output: -1 Explanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. Constraints: 2 <= nums.length == n <= 1000 -10e9 <= nums[i] <= 10e9 0 <= target <= 2 * 10e9
","You are given a 0-indexed array nums of n integers and an integer target. You are initially positioned at index 0. In one step, you can jump from index i to any index j such that: 0 <= i < j < n -target <= nums[j] - nums[i] <= target Return the maximum number of jumps you can make to reach index n - 1. If there is no way to reach index n - 1, return -1. Example 1: Input: nums = [1, 3, 6, 4, 1, 2], target = 2 Output: 3 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1. - Jump from index 1 to index 3. - Jump from index 3 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. Example 2: Input: nums = [1, 3, 6, 4, 1, 2], target = 3 Output: 5 Explanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence: - Jump from index 0 to index 1. - Jump from index 1 to index 2. - Jump from index 2 to index 3. - Jump from index 3 to index 4. - Jump from index 4 to index 5. It can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. Example 3: Input: nums = [1, 3, 6, 4, 1, 2], target = 0 Output: -1 Explanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. Constraints: 2 <= nums.length == n <= 1000 -10e9 <= nums[i] <= 10e9 0 <= target <= 2 * 10e9",
decremental-string-concatenation,Decremental String Concatenation,2746.0,2854.0,"<p>You are given a <strong>0-indexed</strong> array <code>words</code> containing <code>n</code> strings.</p>

<p>Let&#39;s define a <strong>join</strong> operation <code>join(x, y)</code> between two strings <code>x</code> and <code>y</code> as concatenating them into <code>xy</code>. However, if the last character of <code>x</code> is equal to the first character of <code>y</code>, one of them is <strong>deleted</strong>.</p>

<p>For example <code>join(&quot;ab&quot;, &quot;ba&quot;) = &quot;aba&quot;</code> and <code>join(&quot;ab&quot;, &quot;cde&quot;) = &quot;abcde&quot;</code>.</p>

<p>You are to perform <code>n - 1</code> <strong>join</strong> operations. Let <code>str<sub>0</sub> = words[0]</code>. Starting from <code>i = 1</code> up to <code>i = n - 1</code>, for the <code>i<sup>th</sup></code> operation, you can do one of the following:</p>

<ul>
	<li>Make <code>str<sub>i</sub> = join(str<sub>i - 1</sub>, words[i])</code></li>
	<li>Make <code>str<sub>i</sub> = join(words[i], str<sub>i - 1</sub>)</code></li>
</ul>

<p>Your task is to <strong>minimize</strong> the length of <code>str<sub>n - 1</sub></code>.</p>

<p>Return <em>an integer denoting the minimum possible length of</em> <code>str<sub>n - 1</sub></code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;aa&quot;,&quot;ab&quot;,&quot;bc&quot;]
<strong>Output:</strong> 4
<strong>Explanation: </strong>In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: 
str<sub>0</sub> = &quot;aa&quot;
str<sub>1</sub> = join(str<sub>0</sub>, &quot;ab&quot;) = &quot;aab&quot;
str<sub>2</sub> = join(str<sub>1</sub>, &quot;bc&quot;) = &quot;aabc&quot; 
It can be shown that the minimum possible length of str<sub>2</sub> is 4.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;ab&quot;,&quot;b&quot;]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, str<sub>0</sub> = &quot;ab&quot;, there are two ways to get str<sub>1</sub>: 
join(str<sub>0</sub>, &quot;b&quot;) = &quot;ab&quot; or join(&quot;b&quot;, str<sub>0</sub>) = &quot;bab&quot;. 
The first string, &quot;ab&quot;, has the minimum length. Hence, the answer is 2.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;aaa&quot;,&quot;c&quot;,&quot;aba&quot;]
<strong>Output:</strong> 6
<strong>Explanation:</strong> In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: 
str<sub>0</sub> = &quot;aaa&quot;
str<sub>1</sub> = join(str<sub>0</sub>, &quot;c&quot;) = &quot;aaac&quot;
str<sub>2</sub> = join(&quot;aba&quot;, str<sub>1</sub>) = &quot;abaaac&quot;
It can be shown that the minimum possible length of str<sub>2</sub> is 6.
</pre>

<div class=""notranslate"" style=""all: initial;"">&nbsp;</div>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= words.length &lt;= 1000</code></li>
	<li><code>1 &lt;= words[i].length &lt;= 50</code></li>
	<li>Each character in <code>words[i]</code> is an English lowercase letter</li>
</ul>
",2.0,False,"class Solution {
public:
    int minimizeConcatenatedLength(vector<string>& words) {
        
    }
};","class Solution {
    public int minimizeConcatenatedLength(String[] words) {
        
    }
}","class Solution(object):
    def minimizeConcatenatedLength(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""
        ","class Solution:
    def minimizeConcatenatedLength(self, words: List[str]) -> int:
        ","int minimizeConcatenatedLength(char ** words, int wordsSize){

}","public class Solution {
    public int MinimizeConcatenatedLength(string[] words) {
        
    }
}","/**
 * @param {string[]} words
 * @return {number}
 */
var minimizeConcatenatedLength = function(words) {
    
};","# @param {String[]} words
# @return {Integer}
def minimize_concatenated_length(words)
    
end","class Solution {
    func minimizeConcatenatedLength(_ words: [String]) -> Int {
        
    }
}","func minimizeConcatenatedLength(words []string) int {
    
}","object Solution {
    def minimizeConcatenatedLength(words: Array[String]): Int = {
        
    }
}","class Solution {
    fun minimizeConcatenatedLength(words: Array<String>): Int {
        
    }
}","impl Solution {
    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String[] $words
     * @return Integer
     */
    function minimizeConcatenatedLength($words) {
        
    }
}","function minimizeConcatenatedLength(words: string[]): number {

};","(define/contract (minimize-concatenated-length words)
  (-> (listof string?) exact-integer?)

  )","-spec minimize_concatenated_length(Words :: [unicode:unicode_binary()]) -> integer().
minimize_concatenated_length(Words) ->
  .","defmodule Solution do
  @spec minimize_concatenated_length(words :: [String.t]) :: integer
  def minimize_concatenated_length(words) do

  end
end","class Solution {
  int minimizeConcatenatedLength(List<String> words) {

  }
}",<p>You are given a <strong>0-indexed</strong> array <code>words</code> containing <code>n</code> strings.</p>,"<p>

<p>Let&#39;s define a <strong>join</strong> operation <code>join(x, y)</code> between two strings <code>x</code> and <code>y</code> as concatenating them into <code>xy</code>. However, if the last character of <code>x</code> is equal to the first character of <code>y</code>, one of them is <strong>deleted</strong>.</p>

<p>For example <code>join(&quot;ab&quot;, &quot;ba&quot;) = &quot;aba&quot;</code> and <code>join(&quot;ab&quot;, &quot;cde&quot;) = &quot;abcde&quot;</code>.</p>

<p>You are to perform <code>n - 1</code> <strong>join</strong> operations. Let <code>str<sub>0</sub> = words[0]</code>. Starting from <code>i = 1</code> up to <code>i = n - 1</code>, for the <code>i<sup>th</sup></code> operation, you can do one of the following:</p>

<ul>
	<li>Make <code>str<sub>i</sub> = join(str<sub>i - 1</sub>, words[i])</code></li>
	<li>Make <code>str<sub>i</sub> = join(words[i], str<sub>i - 1</sub>)</code></li>
</ul>

<p>Your task is to <strong>minimize</strong> the length of <code>str<sub>n - 1</sub></code>.</p>

<p>Return <em>an integer denoting the minimum possible length of</em> <code>str<sub>n - 1</sub></code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;aa&quot;,&quot;ab&quot;,&quot;bc&quot;]
<strong>Output:</strong> 4
<strong>Explanation: </strong>In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: 
str<sub>0</sub> = &quot;aa&quot;
str<sub>1</sub> = join(str<sub>0</sub>, &quot;ab&quot;) = &quot;aab&quot;
str<sub>2</sub> = join(str<sub>1</sub>, &quot;bc&quot;) = &quot;aabc&quot; 
It can be shown that the minimum possible length of str<sub>2</sub> is 4.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;ab&quot;,&quot;b&quot;]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, str<sub>0</sub> = &quot;ab&quot;, there are two ways to get str<sub>1</sub>: 
join(str<sub>0</sub>, &quot;b&quot;) = &quot;ab&quot; or join(&quot;b&quot;, str<sub>0</sub>) = &quot;bab&quot;. 
The first string, &quot;ab&quot;, has the minimum length. Hence, the answer is 2.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;aaa&quot;,&quot;c&quot;,&quot;aba&quot;]
<strong>Output:</strong> 6
<strong>Explanation:</strong> In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: 
str<sub>0</sub> = &quot;aaa&quot;
str<sub>1</sub> = join(str<sub>0</sub>, &quot;c&quot;) = &quot;aaac&quot;
str<sub>2</sub> = join(&quot;aba&quot;, str<sub>1</sub>) = &quot;abaaac&quot;
It can be shown that the minimum possible length of str<sub>2</sub> is 6.
</pre>

<div class=""notranslate"" style=""all: initial;"">&nbsp;</div>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= words.length &lt;= 1000</code></li>
	<li><code>1 &lt;= words[i].length &lt;= 50</code></li>
	<li>Each character in <code>words[i]</code> is an English lowercase letter</li>
</ul>
","
LeetCode Problem #2746
Title: Decremental String Concatenation
Description:
You are given a 0-indexed array words containing n strings....
","Let's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted. For example join(""ab"", ""ba"") = ""aba"" and join(""ab"", ""cde"") = ""abcde"". You are to perform n - 1 join operations. Let str 0 = words[0]. Starting from i = 1 up to i = n - 1, for the i th operation, you can do one of the following: Make str i = join(str i - 1, words[i]) Make str i = join(words[i], str i - 1 ) Your task is to minimize the length of str n - 1. Return an integer denoting the minimum possible length of str n - 1. Example 1: Input: words = [""aa"", ""ab"", ""bc""] Output: 4 Explanation: In this example, we can perform join operations in the following order to minimize the length of str 2 : str 0 = ""aa"" str 1 = join(str 0, ""ab"") = ""aab"" str 2 = join(str 1, ""bc"") = ""aabc"" It can be shown that the minimum possible length of str 2 is 4. Example 2: Input: words = [""ab"", ""b""] Output: 2 Explanation: In this example, str 0 = ""ab"", there are two ways to get str 1 : join(str 0, ""b"") = ""ab"" or join(""b"", str 0 ) = ""bab"". The first string, ""ab"", has the minimum length. Hence, the answer is 2. Example 3: Input: words = [""aaa"", ""c"", ""aba""] Output: 6 Explanation: In this example, we can perform join operations in the following order to minimize the length of str 2 : str 0 = ""aaa"" str 1 = join(str 0, ""c"") = ""aaac"" str 2 = join(""aba"", str 1 ) = ""abaaac"" It can be shown that the minimum possible length of str 2 is 6. Constraints: 1 <= words.length <= 1000^1 <= words[i].length <= 50 Each character in words[i] is an English lowercase letter
","You are given a 0-indexed array words containing n strings. Let's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted. For example join(""ab"", ""ba"") = ""aba"" and join(""ab"", ""cde"") = ""abcde"". You are to perform n - 1 join operations. Let str 0 = words[0]. Starting from i = 1 up to i = n - 1, for the i th operation, you can do one of the following: Make str i = join(str i - 1, words[i]) Make str i = join(words[i], str i - 1 ) Your task is to minimize the length of str n - 1. Return an integer denoting the minimum possible length of str n - 1. Example 1: Input: words = [""aa"", ""ab"", ""bc""] Output: 4 Explanation: In this example, we can perform join operations in the following order to minimize the length of str 2 : str 0 = ""aa"" str 1 = join(str 0, ""ab"") = ""aab"" str 2 = join(str 1, ""bc"") = ""aabc"" It can be shown that the minimum possible length of str 2 is 4. Example 2: Input: words = [""ab"", ""b""] Output: 2 Explanation: In this example, str 0 = ""ab"", there are two ways to get str 1 : join(str 0, ""b"") = ""ab"" or join(""b"", str 0 ) = ""bab"". The first string, ""ab"", has the minimum length. Hence, the answer is 2. Example 3: Input: words = [""aaa"", ""c"", ""aba""] Output: 6 Explanation: In this example, we can perform join operations in the following order to minimize the length of str 2 : str 0 = ""aaa"" str 1 = join(str 0, ""c"") = ""aaac"" str 2 = join(""aba"", str 1 ) = ""abaaac"" It can be shown that the minimum possible length of str 2 is 6. Constraints: 1 <= words.length <= 1000^1 <= words[i].length <= 50 Each character in words[i] is an English lowercase letter",
construct-the-longest-new-string,Construct the Longest New String,2745.0,2850.0,"<p>You are given three integers <code>x</code>, <code>y</code>, and <code>z</code>.</p>

<p>You have <code>x</code> strings equal to <code>&quot;AA&quot;</code>, <code>y</code> strings equal to <code>&quot;BB&quot;</code>, and <code>z</code> strings equal to <code>&quot;AB&quot;</code>. You want to choose some (possibly all or none) of these strings and concactenate them in some order to form a new string. This new string must not contain <code>&quot;AAA&quot;</code> or <code>&quot;BBB&quot;</code> as a substring.</p>

<p>Return <em>the maximum possible length of the new string</em>.</p>

<p>A <b>substring</b> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> x = 2, y = 5, z = 1
<strong>Output:</strong> 12
<strong>Explanation: </strong>We can concactenate the strings &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AB&quot; in that order. Then, our new string is &quot;BBAABBAABBAB&quot;. 
That string has length 12, and we can show that it is impossible to construct a string of longer length.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> x = 3, y = 2, z = 2
<strong>Output:</strong> 14
<strong>Explanation:</strong> We can concactenate the strings &quot;AB&quot;, &quot;AB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AA&quot; in that order. Then, our new string is &quot;ABABAABBAABBAA&quot;. 
That string has length 14, and we can show that it is impossible to construct a string of longer length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= x, y, z &lt;= 50</code></li>
</ul>
",2.0,False,"class Solution {
public:
    int longestString(int x, int y, int z) {
        
    }
};","class Solution {
    public int longestString(int x, int y, int z) {
        
    }
}","class Solution(object):
    def longestString(self, x, y, z):
        """"""
        :type x: int
        :type y: int
        :type z: int
        :rtype: int
        """"""
        ","class Solution:
    def longestString(self, x: int, y: int, z: int) -> int:
        ","int longestString(int x, int y, int z){

}","public class Solution {
    public int LongestString(int x, int y, int z) {
        
    }
}","/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {number}
 */
var longestString = function(x, y, z) {
    
};","# @param {Integer} x
# @param {Integer} y
# @param {Integer} z
# @return {Integer}
def longest_string(x, y, z)
    
end","class Solution {
    func longestString(_ x: Int, _ y: Int, _ z: Int) -> Int {
        
    }
}","func longestString(x int, y int, z int) int {
    
}","object Solution {
    def longestString(x: Int, y: Int, z: Int): Int = {
        
    }
}","class Solution {
    fun longestString(x: Int, y: Int, z: Int): Int {
        
    }
}","impl Solution {
    pub fn longest_string(x: i32, y: i32, z: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer $x
     * @param Integer $y
     * @param Integer $z
     * @return Integer
     */
    function longestString($x, $y, $z) {
        
    }
}","function longestString(x: number, y: number, z: number): number {

};","(define/contract (longest-string x y z)
  (-> exact-integer? exact-integer? exact-integer? exact-integer?)

  )","-spec longest_string(X :: integer(), Y :: integer(), Z :: integer()) -> integer().
longest_string(X, Y, Z) ->
  .","defmodule Solution do
  @spec longest_string(x :: integer, y :: integer, z :: integer) :: integer
  def longest_string(x, y, z) do

  end
end","class Solution {
  int longestString(int x, int y, int z) {

  }
}","<p>You are given three integers <code>x</code>, <code>y</code>, and <code>z</code>.</p>","<p>

<p>You have <code>x</code> strings equal to <code>&quot;AA&quot;</code>, <code>y</code> strings equal to <code>&quot;BB&quot;</code>, and <code>z</code> strings equal to <code>&quot;AB&quot;</code>. You want to choose some (possibly all or none) of these strings and concactenate them in some order to form a new string. This new string must not contain <code>&quot;AAA&quot;</code> or <code>&quot;BBB&quot;</code> as a substring.</p>

<p>Return <em>the maximum possible length of the new string</em>.</p>

<p>A <b>substring</b> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> x = 2, y = 5, z = 1
<strong>Output:</strong> 12
<strong>Explanation: </strong>We can concactenate the strings &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AB&quot; in that order. Then, our new string is &quot;BBAABBAABBAB&quot;. 
That string has length 12, and we can show that it is impossible to construct a string of longer length.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> x = 3, y = 2, z = 2
<strong>Output:</strong> 14
<strong>Explanation:</strong> We can concactenate the strings &quot;AB&quot;, &quot;AB&quot;, &quot;AA&quot;, &quot;BB&quot;, &quot;AA&quot;, &quot;BB&quot;, and &quot;AA&quot; in that order. Then, our new string is &quot;ABABAABBAABBAA&quot;. 
That string has length 14, and we can show that it is impossible to construct a string of longer length.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= x, y, z &lt;= 50</code></li>
</ul>
","
LeetCode Problem #2745
Title: Construct the Longest New String
Description:
You are given three integers x, y, and z....
","You have x strings equal to ""AA"", y strings equal to ""BB"", and z strings equal to ""AB"". You want to choose some (possibly all or none) of these strings and concactenate them in some order to form a new string. This new string must not contain ""AAA"" or ""BBB"" as a substring. Return the maximum possible length of the new string. A substring is a contiguous non-empty sequence of characters within a string. Example 1: Input: x = 2, y = 5, z = 1 Output: 12 Explanation: We can concactenate the strings ""BB"", ""AA"", ""BB"", ""AA"", ""BB"", and ""AB"" in that order. Then, our new string is ""BBAABBAABBAB"". That string has length 12, and we can show that it is impossible to construct a string of longer length. Example 2: Input: x = 3, y = 2, z = 2 Output: 14 Explanation: We can concactenate the strings ""AB"", ""AB"", ""AA"", ""BB"", ""AA"", ""BB"", and ""AA"" in that order. Then, our new string is ""ABABAABBAABBAA"". That string has length 14, and we can show that it is impossible to construct a string of longer length. Constraints: 1 <= x, y, z <= 50
","You are given three integers x, y, and z. You have x strings equal to ""AA"", y strings equal to ""BB"", and z strings equal to ""AB"". You want to choose some (possibly all or none) of these strings and concactenate them in some order to form a new string. This new string must not contain ""AAA"" or ""BBB"" as a substring. Return the maximum possible length of the new string. A substring is a contiguous non-empty sequence of characters within a string. Example 1: Input: x = 2, y = 5, z = 1 Output: 12 Explanation: We can concactenate the strings ""BB"", ""AA"", ""BB"", ""AA"", ""BB"", and ""AB"" in that order. Then, our new string is ""BBAABBAABBAB"". That string has length 12, and we can show that it is impossible to construct a string of longer length. Example 2: Input: x = 3, y = 2, z = 2 Output: 14 Explanation: We can concactenate the strings ""AB"", ""AB"", ""AA"", ""BB"", ""AA"", ""BB"", and ""AA"" in that order. Then, our new string is ""ABABAABBAABBAA"". That string has length 14, and we can show that it is impossible to construct a string of longer length. Constraints: 1 <= x, y, z <= 50",
sum-of-imbalance-numbers-of-all-subarrays,Sum of Imbalance Numbers of All Subarrays,2763.0,2849.0,"<p>The <strong>imbalance number</strong> of a <strong>0-indexed</strong> integer array <code>arr</code> of length <code>n</code> is defined as the number of indices in <code>sarr = sorted(arr)</code> such that:</p>

<ul>
	<li><code>0 &lt;= i &lt; n - 1</code>, and</li>
	<li><code>sarr[i+1] - sarr[i] &gt; 1</code></li>
</ul>

<p>Here, <code>sorted(arr)</code> is the function that returns the sorted version of <code>arr</code>.</p>

<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <em>the <strong>sum of imbalance numbers</strong> of all its <strong>subarrays</strong></em>.</p>

<p>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,1,4]
<strong>Output:</strong> 3
<strong>Explanation:</strong> There are 3 subarrays with non-zero<strong> </strong>imbalance numbers:
- Subarray [3, 1] with an imbalance number of 1.
- Subarray [3, 1, 4] with an imbalance number of 1.
- Subarray [1, 4] with an imbalance number of 1.
The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,3,3,5]
<strong>Output:</strong> 8
<strong>Explanation:</strong> There are 7 subarrays with non-zero imbalance numbers:
- Subarray [1, 3] with an imbalance number of 1.
- Subarray [1, 3, 3] with an imbalance number of 1.
- Subarray [1, 3, 3, 3] with an imbalance number of 1.
- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. 
- Subarray [3, 3, 3, 5] with an imbalance number of 1. 
- Subarray [3, 3, 5] with an imbalance number of 1.
- Subarray [3, 5] with an imbalance number of 1.
The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
	<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>
</ul>
",3.0,False,"class Solution {
public:
    int sumImbalanceNumbers(vector<int>& nums) {
        
    }
};","class Solution {
    public int sumImbalanceNumbers(int[] nums) {
        
    }
}","class Solution(object):
    def sumImbalanceNumbers(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def sumImbalanceNumbers(self, nums: List[int]) -> int:
        ","int sumImbalanceNumbers(int* nums, int numsSize){

}","public class Solution {
    public int SumImbalanceNumbers(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var sumImbalanceNumbers = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def sum_imbalance_numbers(nums)
    
end","class Solution {
    func sumImbalanceNumbers(_ nums: [Int]) -> Int {
        
    }
}","func sumImbalanceNumbers(nums []int) int {
    
}","object Solution {
    def sumImbalanceNumbers(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun sumImbalanceNumbers(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn sum_imbalance_numbers(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function sumImbalanceNumbers($nums) {
        
    }
}","function sumImbalanceNumbers(nums: number[]): number {

};","(define/contract (sum-imbalance-numbers nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec sum_imbalance_numbers(Nums :: [integer()]) -> integer().
sum_imbalance_numbers(Nums) ->
  .","defmodule Solution do
  @spec sum_imbalance_numbers(nums :: [integer]) :: integer
  def sum_imbalance_numbers(nums) do

  end
end","class Solution {
  int sumImbalanceNumbers(List<int> nums) {

  }
}",<p>The <strong>imbalance number</strong> of a <strong>0-indexed</strong> integer array <code>arr</code> of length <code>n</code> is defined as the number of indices in <code>sarr = sorted(arr)</code> such that:</p>,"<p>

<ul>
	<li><code>0 &lt;= i &lt; n - 1</code>, and</li>
	<li><code>sarr[i+1] - sarr[i] &gt; 1</code></li>
</ul>

<p>Here, <code>sorted(arr)</code> is the function that returns the sorted version of <code>arr</code>.</p>

<p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, return <em>the <strong>sum of imbalance numbers</strong> of all its <strong>subarrays</strong></em>.</p>

<p>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,1,4]
<strong>Output:</strong> 3
<strong>Explanation:</strong> There are 3 subarrays with non-zero<strong> </strong>imbalance numbers:
- Subarray [3, 1] with an imbalance number of 1.
- Subarray [3, 1, 4] with an imbalance number of 1.
- Subarray [1, 4] with an imbalance number of 1.
The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,3,3,5]
<strong>Output:</strong> 8
<strong>Explanation:</strong> There are 7 subarrays with non-zero imbalance numbers:
- Subarray [1, 3] with an imbalance number of 1.
- Subarray [1, 3, 3] with an imbalance number of 1.
- Subarray [1, 3, 3, 3] with an imbalance number of 1.
- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. 
- Subarray [3, 3, 3, 5] with an imbalance number of 1. 
- Subarray [3, 3, 5] with an imbalance number of 1.
- Subarray [3, 5] with an imbalance number of 1.
The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. </pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
	<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>
</ul>
","
LeetCode Problem #2763
Title: Sum of Imbalance Numbers of All Subarrays
Description:
The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:...
","0 <= i < n - 1, and sarr[i+1] - sarr[i] > 1 Here, sorted(arr) is the function that returns the sorted version of arr. Given a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 3, 1, 4] Output: 3 Explanation: There are 3 subarrays with non-zero imbalance numbers: - Subarray [3, 1] with an imbalance number of 1. - Subarray [3, 1, 4] with an imbalance number of 1. - Subarray [1, 4] with an imbalance number of 1. The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. Example 2: Input: nums = [1, 3, 3, 3, 5] Output: 8 Explanation: There are 7 subarrays with non-zero imbalance numbers: - Subarray [1, 3] with an imbalance number of 1. - Subarray [1, 3, 3] with an imbalance number of 1. - Subarray [1, 3, 3, 3] with an imbalance number of 1. - Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. - Subarray [3, 3, 3, 5] with an imbalance number of 1. - Subarray [3, 3, 5] with an imbalance number of 1. - Subarray [3, 5] with an imbalance number of 1. The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. Constraints: 1 <= nums.length <= 1000^1 <= nums[i] <= nums.length
","The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that: 0 <= i < n - 1, and sarr[i+1] - sarr[i] > 1 Here, sorted(arr) is the function that returns the sorted version of arr. Given a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [2, 3, 1, 4] Output: 3 Explanation: There are 3 subarrays with non-zero imbalance numbers: - Subarray [3, 1] with an imbalance number of 1. - Subarray [3, 1, 4] with an imbalance number of 1. - Subarray [1, 4] with an imbalance number of 1. The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. Example 2: Input: nums = [1, 3, 3, 3, 5] Output: 8 Explanation: There are 7 subarrays with non-zero imbalance numbers: - Subarray [1, 3] with an imbalance number of 1. - Subarray [1, 3, 3] with an imbalance number of 1. - Subarray [1, 3, 3, 3] with an imbalance number of 1. - Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. - Subarray [3, 3, 3, 5] with an imbalance number of 1. - Subarray [3, 3, 5] with an imbalance number of 1. - Subarray [3, 5] with an imbalance number of 1. The imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. Constraints: 1 <= nums.length <= 1000^1 <= nums[i] <= nums.length",
special-permutations,Special Permutations,2741.0,2848.0,"<p>You are given a&nbsp;<strong>0-indexed</strong>&nbsp;integer array&nbsp;<code>nums</code>&nbsp;containing&nbsp;<code>n</code>&nbsp;<strong>distinct</strong> positive integers. A permutation of&nbsp;<code>nums</code>&nbsp;is called special if:</p>

<ul>
	<li>For all indexes&nbsp;<code>0 &lt;= i &lt; n - 1</code>, either&nbsp;<code>nums[i] % nums[i+1] == 0</code>&nbsp;or&nbsp;<code>nums[i+1] % nums[i] == 0</code>.</li>
</ul>

<p>Return&nbsp;<em>the total number of special permutations.&nbsp;</em>As the answer could be large, return it&nbsp;<strong>modulo&nbsp;</strong><code>10<sup>9&nbsp;</sup>+ 7</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,6]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [3,6,2] and [2,6,3] are the two special permutations of nums.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,4,3]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [3,1,4] and [4,1,3] are the two special permutations of nums.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 14</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int specialPerm(vector<int>& nums) {
        
    }
};","class Solution {
    public int specialPerm(int[] nums) {
        
    }
}","class Solution(object):
    def specialPerm(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def specialPerm(self, nums: List[int]) -> int:
        ","int specialPerm(int* nums, int numsSize){

}","public class Solution {
    public int SpecialPerm(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var specialPerm = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def special_perm(nums)
    
end","class Solution {
    func specialPerm(_ nums: [Int]) -> Int {
        
    }
}","func specialPerm(nums []int) int {
    
}","object Solution {
    def specialPerm(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun specialPerm(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn special_perm(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function specialPerm($nums) {
        
    }
}","function specialPerm(nums: number[]): number {

};","(define/contract (special-perm nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec special_perm(Nums :: [integer()]) -> integer().
special_perm(Nums) ->
  .","defmodule Solution do
  @spec special_perm(nums :: [integer]) :: integer
  def special_perm(nums) do

  end
end","class Solution {
  int specialPerm(List<int> nums) {

  }
}",<p>You are given a&nbsp;<strong>0-indexed</strong>&nbsp;integer array&nbsp;<code>nums</code>&nbsp;containing&nbsp;<code>n</code>&nbsp;<strong>distinct</strong> positive integers. A permutation of&nbsp;<code>nums</code>&nbsp;is called special if:</p>,"<p>

<ul>
	<li>For all indexes&nbsp;<code>0 &lt;= i &lt; n - 1</code>, either&nbsp;<code>nums[i] % nums[i+1] == 0</code>&nbsp;or&nbsp;<code>nums[i+1] % nums[i] == 0</code>.</li>
</ul>

<p>Return&nbsp;<em>the total number of special permutations.&nbsp;</em>As the answer could be large, return it&nbsp;<strong>modulo&nbsp;</strong><code>10<sup>9&nbsp;</sup>+ 7</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,6]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [3,6,2] and [2,6,3] are the two special permutations of nums.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,4,3]
<strong>Output:</strong> 2
<strong>Explanation:</strong> [3,1,4] and [4,1,3] are the two special permutations of nums.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 14</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
","
LeetCode Problem #2741
Title: Special Permutations
Description:
You are given a 0-indexed integer array nums containing n distinct positive integers. A permutation of nums is called special if:...
","For all indexes 0 <= i < n - 1, either nums[i] % nums[i+1] == 0 or nums[i+1] % nums[i] == 0. Return the total number of special permutations. As the answer could be large, return it modulo 10e9 + 7. Example 1: Input: nums = [2, 3, 6] Output: 2 Explanation: [3, 6, 2] and [2, 6, 3] are the two special permutations of nums. Example 2: Input: nums = [1, 4, 3] Output: 2 Explanation: [3, 1, 4] and [4, 1, 3] are the two special permutations of nums. Constraints: 2 <= nums.length <= 14^1 <= nums[i] <= 10e9
","You are given a 0-indexed integer array nums containing n distinct positive integers. A permutation of nums is called special if: For all indexes 0 <= i < n - 1, either nums[i] % nums[i+1] == 0 or nums[i+1] % nums[i] == 0. Return the total number of special permutations. As the answer could be large, return it modulo 10e9 + 7. Example 1: Input: nums = [2, 3, 6] Output: 2 Explanation: [3, 6, 2] and [2, 6, 3] are the two special permutations of nums. Example 2: Input: nums = [1, 4, 3] Output: 2 Explanation: [3, 1, 4] and [4, 1, 3] are the two special permutations of nums. Constraints: 2 <= nums.length <= 14^1 <= nums[i] <= 10e9",
find-maximum-number-of-string-pairs,Find Maximum Number of String Pairs,2744.0,2847.0,"<p>You are given a <strong>0-indexed</strong> array <code>words</code> consisting of <strong>distinct</strong> strings.</p>

<p>The string <code>words[i]</code> can be paired with the string <code>words[j]</code> if:</p>

<ul>
	<li>The string <code>words[i]</code> is equal to the reversed string of <code>words[j]</code>.</li>
	<li><code>0 &lt;= i &lt; j &lt; words.length</code>.</li>
</ul>

<p>Return <em>the <strong>maximum</strong> number of pairs that can be formed from the array </em><code>words</code><em>.</em></p>

<p>Note that&nbsp;each string can belong in&nbsp;<strong>at most one</strong> pair.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;cd&quot;,&quot;ac&quot;,&quot;dc&quot;,&quot;ca&quot;,&quot;zz&quot;]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, we can form 2 pair of strings in the following way:
- We pair the 0<sup>th</sup> string with the 2<sup>nd</sup> string, as the reversed string of word[0] is &quot;dc&quot; and is equal to words[2].
- We pair the 1<sup>st</sup> string with the 3<sup>rd</sup> string, as the reversed string of word[1] is &quot;ca&quot; and is equal to words[3].
It can be proven that 2 is the maximum number of pairs that can be formed.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;ab&quot;,&quot;ba&quot;,&quot;cc&quot;]
<strong>Output:</strong> 1
<strong>Explanation:</strong> In this example, we can form 1 pair of strings in the following way:
- We pair the 0<sup>th</sup> string with the 1<sup>st</sup> string, as the reversed string of words[1] is &quot;ab&quot; and is equal to words[0].
It can be proven that 1 is the maximum number of pairs that can be formed.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> words = [&quot;aa&quot;,&quot;ab&quot;]
<strong>Output:</strong> 0
<strong>Explanation:</strong> In this example, we are unable to form any pair of strings.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= words.length &lt;= 50</code></li>
	<li><code>words[i].length == 2</code></li>
	<li><code>words</code>&nbsp;consists of distinct strings.</li>
	<li><code>words[i]</code>&nbsp;contains only lowercase English letters.</li>
</ul>
",1.0,False,"class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        
    }
};","class Solution {
    public int maximumNumberOfStringPairs(String[] words) {
        
    }
}","class Solution(object):
    def maximumNumberOfStringPairs(self, words):
        """"""
        :type words: List[str]
        :rtype: int
        """"""
        ","class Solution:
    def maximumNumberOfStringPairs(self, words: List[str]) -> int:
        ","int maximumNumberOfStringPairs(char ** words, int wordsSize){

}","public class Solution {
    public int MaximumNumberOfStringPairs(string[] words) {
        
    }
}","/**
 * @param {string[]} words
 * @return {number}
 */
var maximumNumberOfStringPairs = function(words) {
    
};","# @param {String[]} words
# @return {Integer}
def maximum_number_of_string_pairs(words)
    
end","class Solution {
    func maximumNumberOfStringPairs(_ words: [String]) -> Int {
        
    }
}","func maximumNumberOfStringPairs(words []string) int {
    
}","object Solution {
    def maximumNumberOfStringPairs(words: Array[String]): Int = {
        
    }
}","class Solution {
    fun maximumNumberOfStringPairs(words: Array<String>): Int {
        
    }
}","impl Solution {
    pub fn maximum_number_of_string_pairs(words: Vec<String>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String[] $words
     * @return Integer
     */
    function maximumNumberOfStringPairs($words) {
        
    }
}","function maximumNumberOfStringPairs(words: string[]): number {

};","(define/contract (maximum-number-of-string-pairs words)
  (-> (listof string?) exact-integer?)

  )","-spec maximum_number_of_string_pairs(Words :: [unicode:unicode_binary()]) -> integer().
maximum_number_of_string_pairs(Words) ->
  .","defmodule Solution do
  @spec maximum_number_of_string_pairs(words :: [String.t]) :: integer
  def maximum_number_of_string_pairs(words) do

  end
end","class Solution {
  int maximumNumberOfStringPairs(List<String> words) {

  }
}",,,,,,
robot-collisions,Robot Collisions,2751.0,2846.0,"<p>There are <code>n</code> <strong>1-indexed</strong> robots, each having a position on a line, health, and movement direction.</p>

<p>You are given <strong>0-indexed</strong> integer arrays <code>positions</code>, <code>healths</code>, and a string <code>directions</code> (<code>directions[i]</code> is either <strong>&#39;L&#39;</strong> for <strong>left</strong> or <strong>&#39;R&#39;</strong> for <strong>right</strong>). All integers in <code>positions</code> are <strong>unique</strong>.</p>

<p>All robots start moving on the line<strong> simultaneously</strong> at the <strong>same speed </strong>in their given directions. If two robots ever share the same position while moving, they will <strong>collide</strong>.</p>

<p>If two robots collide, the robot with <strong>lower health</strong> is <strong>removed</strong> from the line, and the health of the other robot <strong>decreases</strong> <strong>by one</strong>. The surviving robot continues in the <strong>same</strong> direction it was going. If both robots have the <strong>same</strong> health, they are both<strong> </strong>removed from the line.</p>

<p>Your task is to determine the <strong>health</strong> of the robots that survive the collisions, in the same <strong>order </strong>that the robots were given,<strong> </strong>i.e. final heath of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array.</p>

<p>Return <em>an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur.</em></p>

<p><strong>Note:</strong> The positions may be unsorted.</p>

<div class=""notranslate"" style=""all: initial;"">&nbsp;</div>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<p><img height=""169"" src=""https://assets.leetcode.com/uploads/2023/05/15/image-20230516011718-12.png"" width=""808"" /></p>

<pre>
<strong>Input:</strong> positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = &quot;RRRRR&quot;
<strong>Output:</strong> [2,17,9,15,10]
<strong>Explanation:</strong> No collision occurs in this example, since all robots are moving in the same direction. So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10].
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<p><img height=""176"" src=""https://assets.leetcode.com/uploads/2023/05/15/image-20230516004433-7.png"" width=""717"" /></p>

<pre>
<strong>Input:</strong> positions = [3,5,2,6], healths = [10,10,15,12], directions = &quot;RLRL&quot;
<strong>Output:</strong> [14]
<strong>Explanation:</strong> There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and since robot 4&#39;s health is smaller, it gets removed, and robot 3&#39;s health becomes 15 - 1 = 14. Only robot 3 remains, so we return [14].
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<p><img height=""172"" src=""https://assets.leetcode.com/uploads/2023/05/15/image-20230516005114-9.png"" width=""732"" /></p>

<pre>
<strong>Input:</strong> positions = [1,2,5,6], healths = [10,10,11,11], directions = &quot;RLRL&quot;
<strong>Output:</strong> []
<strong>Explanation:</strong> Robot 1 and robot 2 will collide and since both have the same health, they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. So, we return an empty array, [].</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= positions.length == healths.length == directions.length == n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= positions[i], healths[i] &lt;= 10<sup>9</sup></code></li>
	<li><code>directions[i] == &#39;L&#39;</code> or <code>directions[i] == &#39;R&#39;</code></li>
	<li>All values in <code>positions</code> are distinct</li>
</ul>
",3.0,False,"class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        
    }
};","class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        
    }
}","class Solution(object):
    def survivedRobotsHealths(self, positions, healths, directions):
        """"""
        :type positions: List[int]
        :type healths: List[int]
        :type directions: str
        :rtype: List[int]
        """"""
        ","class Solution:
    def survivedRobotsHealths(self, positions: List[int], healths: List[int], directions: str) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* survivedRobotsHealths(int* positions, int positionsSize, int* healths, int healthsSize, char * directions, int* returnSize){

}","public class Solution {
    public IList<int> SurvivedRobotsHealths(int[] positions, int[] healths, string directions) {
        
    }
}","/**
 * @param {number[]} positions
 * @param {number[]} healths
 * @param {string} directions
 * @return {number[]}
 */
var survivedRobotsHealths = function(positions, healths, directions) {
    
};","# @param {Integer[]} positions
# @param {Integer[]} healths
# @param {String} directions
# @return {Integer[]}
def survived_robots_healths(positions, healths, directions)
    
end","class Solution {
    func survivedRobotsHealths(_ positions: [Int], _ healths: [Int], _ directions: String) -> [Int] {
        
    }
}","func survivedRobotsHealths(positions []int, healths []int, directions string) []int {
    
}","object Solution {
    def survivedRobotsHealths(positions: Array[Int], healths: Array[Int], directions: String): List[Int] = {
        
    }
}","class Solution {
    fun survivedRobotsHealths(positions: IntArray, healths: IntArray, directions: String): List<Int> {
        
    }
}","impl Solution {
    pub fn survived_robots_healths(positions: Vec<i32>, healths: Vec<i32>, directions: String) -> Vec<i32> {
        
    }
}","class Solution {

    /**
     * @param Integer[] $positions
     * @param Integer[] $healths
     * @param String $directions
     * @return Integer[]
     */
    function survivedRobotsHealths($positions, $healths, $directions) {
        
    }
}","function survivedRobotsHealths(positions: number[], healths: number[], directions: string): number[] {

};","(define/contract (survived-robots-healths positions healths directions)
  (-> (listof exact-integer?) (listof exact-integer?) string? (listof exact-integer?))

  )","-spec survived_robots_healths(Positions :: [integer()], Healths :: [integer()], Directions :: unicode:unicode_binary()) -> [integer()].
survived_robots_healths(Positions, Healths, Directions) ->
  .","defmodule Solution do
  @spec survived_robots_healths(positions :: [integer], healths :: [integer], directions :: String.t) :: [integer]
  def survived_robots_healths(positions, healths, directions) do

  end
end","class Solution {
  List<int> survivedRobotsHealths(List<int> positions, List<int> healths, String directions) {

  }
}",,,,,,
find-the-value-of-the-partition,Find the Value of the Partition,2740.0,2845.0,"<p>You are given a <strong>positive</strong> integer array <code>nums</code>.</p>

<p>Partition <code>nums</code> into two arrays,&nbsp;<code>nums1</code> and <code>nums2</code>, such that:</p>

<ul>
	<li>Each element of the array <code>nums</code> belongs to either the array <code>nums1</code> or the array <code>nums2</code>.</li>
	<li>Both arrays are <strong>non-empty</strong>.</li>
	<li>The value of the partition is <strong>minimized</strong>.</li>
</ul>

<p>The value of the partition is <code>|max(nums1) - min(nums2)|</code>.</p>

<p>Here, <code>max(nums1)</code> denotes the maximum element of the array <code>nums1</code>, and <code>min(nums2)</code> denotes the minimum element of the array <code>nums2</code>.</p>

<p>Return <em>the integer denoting the value of such partition</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,3,2,4]
<strong>Output:</strong> 1
<strong>Explanation:</strong> We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].
- The maximum element of the array nums1 is equal to 2.
- The minimum element of the array nums2 is equal to 3.
The value of the partition is |2 - 3| = 1. 
It can be proven that 1 is the minimum value out of all partitions.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [100,1,10]
<strong>Output:</strong> 9
<strong>Explanation:</strong> We can partition the array nums into nums1 = [10] and nums2 = [100,1].
- The maximum element of the array nums1 is equal to 10.
- The minimum element of the array nums2 is equal to 1.
The value of the partition is |10 - 1| = 9.
It can be proven that 9 is the minimum value out of all partitions.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int findValueOfPartition(vector<int>& nums) {
        
    }
};","class Solution {
    public int findValueOfPartition(int[] nums) {
        
    }
}","class Solution(object):
    def findValueOfPartition(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def findValueOfPartition(self, nums: List[int]) -> int:
        ","int findValueOfPartition(int* nums, int numsSize){

}","public class Solution {
    public int FindValueOfPartition(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var findValueOfPartition = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def find_value_of_partition(nums)
    
end","class Solution {
    func findValueOfPartition(_ nums: [Int]) -> Int {
        
    }
}","func findValueOfPartition(nums []int) int {
    
}","object Solution {
    def findValueOfPartition(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun findValueOfPartition(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn find_value_of_partition(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findValueOfPartition($nums) {
        
    }
}","function findValueOfPartition(nums: number[]): number {

};","(define/contract (find-value-of-partition nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec find_value_of_partition(Nums :: [integer()]) -> integer().
find_value_of_partition(Nums) ->
  .","defmodule Solution do
  @spec find_value_of_partition(nums :: [integer]) :: integer
  def find_value_of_partition(nums) do

  end
end","class Solution {
  int findValueOfPartition(List<int> nums) {

  }
}",,,,,,
sum-of-squares-of-special-elements,Sum of Squares of Special Elements ,2778.0,2844.0,"<p>You are given a <strong>1-indexed</strong> integer array <code>nums</code> of length <code>n</code>.</p>

<p>An element <code>nums[i]</code> of <code>nums</code> is called <strong>special</strong> if <code>i</code> divides <code>n</code>, i.e. <code>n % i == 0</code>.</p>

<p>Return <em>the <strong>sum of the squares</strong> of all <strong>special</strong> elements of </em><code>nums</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2,3,4]
<strong>Output:</strong> 21
<strong>Explanation:</strong> There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. 
Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.  
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,7,1,19,18,3]
<strong>Output:</strong> 63
<strong>Explanation:</strong> There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. 
Hence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length == n &lt;= 50</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 50</code></li>
</ul>
",1.0,False,"class Solution {
public:
    int sumOfSquares(vector<int>& nums) {
        
    }
};","class Solution {
    public int sumOfSquares(int[] nums) {
        
    }
}","class Solution(object):
    def sumOfSquares(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def sumOfSquares(self, nums: List[int]) -> int:
        ","int sumOfSquares(int* nums, int numsSize){

}","public class Solution {
    public int SumOfSquares(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var sumOfSquares = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def sum_of_squares(nums)
    
end","class Solution {
    func sumOfSquares(_ nums: [Int]) -> Int {
        
    }
}","func sumOfSquares(nums []int) int {
    
}","object Solution {
    def sumOfSquares(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun sumOfSquares(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn sum_of_squares(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function sumOfSquares($nums) {
        
    }
}","function sumOfSquares(nums: number[]): number {

};","(define/contract (sum-of-squares nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec sum_of_squares(Nums :: [integer()]) -> integer().
sum_of_squares(Nums) ->
  .","defmodule Solution do
  @spec sum_of_squares(nums :: [integer]) :: integer
  def sum_of_squares(nums) do

  end
end","class Solution {
  int sumOfSquares(List<int> nums) {

  }
}",,,,,,
maximum-sum-queries,Maximum Sum Queries,2736.0,2839.0,"<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, each of length <code>n</code>, and a <strong>1-indexed 2D array</strong> <code>queries</code> where <code>queries[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p>

<p>For the <code>i<sup>th</sup></code> query, find the <strong>maximum value</strong> of <code>nums1[j] + nums2[j]</code> among all indices <code>j</code> <code>(0 &lt;= j &lt; n)</code>, where <code>nums1[j] &gt;= x<sub>i</sub></code> and <code>nums2[j] &gt;= y<sub>i</sub></code>, or <strong>-1</strong> if there is no <code>j</code> satisfying the constraints.</p>

<p>Return <em>an array </em><code>answer</code><em> where </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]
<strong>Output:</strong> [6,10,7]
<strong>Explanation:</strong> 
For the 1st query <code node=""[object Object]"">x<sub>i</sub> = 4</code>&nbsp;and&nbsp;<code node=""[object Object]"">y<sub>i</sub> = 1</code>, we can select index&nbsp;<code node=""[object Object]"">j = 0</code>&nbsp;since&nbsp;<code node=""[object Object]"">nums1[j] &gt;= 4</code>&nbsp;and&nbsp;<code node=""[object Object]"">nums2[j] &gt;= 1</code>. The sum&nbsp;<code node=""[object Object]"">nums1[j] + nums2[j]</code>&nbsp;is 6, and we can show that 6 is the maximum we can obtain.

For the 2nd query <code node=""[object Object]"">x<sub>i</sub> = 1</code>&nbsp;and&nbsp;<code node=""[object Object]"">y<sub>i</sub> = 3</code>, we can select index&nbsp;<code node=""[object Object]"">j = 2</code>&nbsp;since&nbsp;<code node=""[object Object]"">nums1[j] &gt;= 1</code>&nbsp;and&nbsp;<code node=""[object Object]"">nums2[j] &gt;= 3</code>. The sum&nbsp;<code node=""[object Object]"">nums1[j] + nums2[j]</code>&nbsp;is 10, and we can show that 10 is the maximum we can obtain. 

For the 3rd query <code node=""[object Object]"">x<sub>i</sub> = 2</code>&nbsp;and&nbsp;<code node=""[object Object]"">y<sub>i</sub> = 5</code>, we can select index&nbsp;<code node=""[object Object]"">j = 3</code>&nbsp;since&nbsp;<code node=""[object Object]"">nums1[j] &gt;= 2</code>&nbsp;and&nbsp;<code node=""[object Object]"">nums2[j] &gt;= 5</code>. The sum&nbsp;<code node=""[object Object]"">nums1[j] + nums2[j]</code>&nbsp;is 7, and we can show that 7 is the maximum we can obtain.

Therefore, we return&nbsp;<code node=""[object Object]"">[6,10,7]</code>.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]
<strong>Output:</strong> [9,9,9]
<strong>Explanation:</strong> For this example, we can use index&nbsp;<code node=""[object Object]"">j = 2</code>&nbsp;for all the queries since it satisfies the constraints for each query.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]
<strong>Output:</strong> [-1]
<strong>Explanation:</strong> There is one query in this example with <code node=""[object Object]"">x<sub>i</sub></code> = 3 and <code node=""[object Object]"">y<sub>i</sub></code> = 3. For every index, j, either nums1[j] &lt; <code node=""[object Object]"">x<sub>i</sub></code> or nums2[j] &lt; <code node=""[object Object]"">y<sub>i</sub></code>. Hence, there is no solution. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>nums1.length == nums2.length</code>&nbsp;</li>
	<li><code>n ==&nbsp;nums1.length&nbsp;</code></li>
	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup>&nbsp;</code></li>
	<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>
	<li><code>queries[i].length ==&nbsp;2</code></li>
	<li><code>x<sub>i</sub>&nbsp;== queries[i][1]</code></li>
	<li><code>y<sub>i</sub> == queries[i][2]</code></li>
	<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>
</ul>
",3.0,False,"class Solution {
public:
    vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {
        
    }
};","class Solution {
    public int[] maximumSumQueries(int[] nums1, int[] nums2, int[][] queries) {
        
    }
}","class Solution(object):
    def maximumSumQueries(self, nums1, nums2, queries):
        """"""
        :type nums1: List[int]
        :type nums2: List[int]
        :type queries: List[List[int]]
        :rtype: List[int]
        """"""
        ","class Solution:
    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* maximumSumQueries(int* nums1, int nums1Size, int* nums2, int nums2Size, int** queries, int queriesSize, int* queriesColSize, int* returnSize){

}","public class Solution {
    public int[] MaximumSumQueries(int[] nums1, int[] nums2, int[][] queries) {
        
    }
}","/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number[][]} queries
 * @return {number[]}
 */
var maximumSumQueries = function(nums1, nums2, queries) {
    
};","# @param {Integer[]} nums1
# @param {Integer[]} nums2
# @param {Integer[][]} queries
# @return {Integer[]}
def maximum_sum_queries(nums1, nums2, queries)
    
end","class Solution {
    func maximumSumQueries(_ nums1: [Int], _ nums2: [Int], _ queries: [[Int]]) -> [Int] {
        
    }
}","func maximumSumQueries(nums1 []int, nums2 []int, queries [][]int) []int {
    
}","object Solution {
    def maximumSumQueries(nums1: Array[Int], nums2: Array[Int], queries: Array[Array[Int]]): Array[Int] = {
        
    }
}","class Solution {
    fun maximumSumQueries(nums1: IntArray, nums2: IntArray, queries: Array<IntArray>): IntArray {
        
    }
}","impl Solution {
    pub fn maximum_sum_queries(nums1: Vec<i32>, nums2: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums1
     * @param Integer[] $nums2
     * @param Integer[][] $queries
     * @return Integer[]
     */
    function maximumSumQueries($nums1, $nums2, $queries) {
        
    }
}","function maximumSumQueries(nums1: number[], nums2: number[], queries: number[][]): number[] {

};","(define/contract (maximum-sum-queries nums1 nums2 queries)
  (-> (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))

  )","-spec maximum_sum_queries(Nums1 :: [integer()], Nums2 :: [integer()], Queries :: [[integer()]]) -> [integer()].
maximum_sum_queries(Nums1, Nums2, Queries) ->
  .","defmodule Solution do
  @spec maximum_sum_queries(nums1 :: [integer], nums2 :: [integer], queries :: [[integer]]) :: [integer]
  def maximum_sum_queries(nums1, nums2, queries) do

  end
end","class Solution {
  List<int> maximumSumQueries(List<int> nums1, List<int> nums2, List<List<int>> queries) {

  }
}",,,,,,
sum-of-matrix-after-queries,Sum of Matrix After Queries,2718.0,2838.0,"<p>You are given an integer <code>n</code> and a <strong>0-indexed</strong>&nbsp;<strong>2D array</strong> <code>queries</code> where <code>queries[i] = [type<sub>i</sub>, index<sub>i</sub>, val<sub>i</sub>]</code>.</p>

<p>Initially, there is a <strong>0-indexed</strong> <code>n x n</code> matrix filled with <code>0</code>&#39;s. For each query, you must apply one of the following changes:</p>

<ul>
	<li>if <code>type<sub>i</sub> == 0</code>, set the values in the row with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li>
	<li>if <code>type<sub>i</sub> == 1</code>, set the values in the column with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li>
</ul>

<p>Return <em>the sum of integers in the matrix after all queries are applied</em>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/11/exm1.png"" style=""width: 681px; height: 161px;"" />
<pre>
<strong>Input:</strong> n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]
<strong>Output:</strong> 23
<strong>Explanation:</strong> The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>
<img alt="""" src=""https://assets.leetcode.com/uploads/2023/05/11/exm2.png"" style=""width: 681px; height: 331px;"" />
<pre>
<strong>Input:</strong> n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]
<strong>Output:</strong> 17
<strong>Explanation:</strong> The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>
	<li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li>
	<li><code>queries[i].length == 3</code></li>
	<li><code>0 &lt;= type<sub>i</sub> &lt;= 1</code></li>
	<li><code>0 &lt;= index<sub>i</sub>&nbsp;&lt; n</code></li>
	<li><code>0 &lt;= val<sub>i</sub> &lt;= 10<sup>5</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    long long matrixSumQueries(int n, vector<vector<int>>& queries) {
        
    }
};","class Solution {
    public long matrixSumQueries(int n, int[][] queries) {
        
    }
}","class Solution(object):
    def matrixSumQueries(self, n, queries):
        """"""
        :type n: int
        :type queries: List[List[int]]
        :rtype: int
        """"""
        ","class Solution:
    def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:
        ","long long matrixSumQueries(int n, int** queries, int queriesSize, int* queriesColSize){

}","public class Solution {
    public long MatrixSumQueries(int n, int[][] queries) {
        
    }
}","/**
 * @param {number} n
 * @param {number[][]} queries
 * @return {number}
 */
var matrixSumQueries = function(n, queries) {
    
};","# @param {Integer} n
# @param {Integer[][]} queries
# @return {Integer}
def matrix_sum_queries(n, queries)
    
end","class Solution {
    func matrixSumQueries(_ n: Int, _ queries: [[Int]]) -> Int {
        
    }
}","func matrixSumQueries(n int, queries [][]int) int64 {
    
}","object Solution {
    def matrixSumQueries(n: Int, queries: Array[Array[Int]]): Long = {
        
    }
}","class Solution {
    fun matrixSumQueries(n: Int, queries: Array<IntArray>): Long {
        
    }
}","impl Solution {
    pub fn matrix_sum_queries(n: i32, queries: Vec<Vec<i32>>) -> i64 {
        
    }
}","class Solution {

    /**
     * @param Integer $n
     * @param Integer[][] $queries
     * @return Integer
     */
    function matrixSumQueries($n, $queries) {
        
    }
}","function matrixSumQueries(n: number, queries: number[][]): number {

};","(define/contract (matrix-sum-queries n queries)
  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)

  )","-spec matrix_sum_queries(N :: integer(), Queries :: [[integer()]]) -> integer().
matrix_sum_queries(N, Queries) ->
  .","defmodule Solution do
  @spec matrix_sum_queries(n :: integer, queries :: [[integer]]) :: integer
  def matrix_sum_queries(n, queries) do

  end
end","class Solution {
  int matrixSumQueries(int n, List<List<int>> queries) {

  }
}",,,,,,
minimum-operations-to-make-the-integer-zero,Minimum Operations to Make the Integer Zero,2749.0,2837.0,"<p>You are given two integers <code>num1</code> and <code>num2</code>.</p>

<p>In one operation, you can choose integer <code>i</code> in the range <code>[0, 60]</code> and subtract <code>2<sup>i</sup> + num2</code> from <code>num1</code>.</p>

<p>Return <em>the integer denoting the <strong>minimum</strong> number of operations needed to make</em> <code>num1</code> <em>equal to</em> <code>0</code>.</p>

<p>If it is impossible to make <code>num1</code> equal to <code>0</code>, return <code>-1</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> num1 = 3, num2 = -2
<strong>Output:</strong> 3
<strong>Explanation:</strong> We can make 3 equal to 0 with the following operations:
- We choose i = 2 and substract 2<sup>2</sup> + (-2) from 3, 3 - (4 + (-2)) = 1.
- We choose i = 2 and substract 2<sup>2</sup>&nbsp;+ (-2) from 1, 1 - (4 + (-2)) = -1.
- We choose i = 0 and substract 2<sup>0</sup>&nbsp;+ (-2) from -1, (-1) - (1 + (-2)) = 0.
It can be proven, that 3 is the minimum number of operations that we need to perform.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> num1 = 5, num2 = 7
<strong>Output:</strong> -1
<strong>Explanation:</strong> It can be proven, that it is impossible to make 5 equal to 0 with the given operation.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= num1 &lt;= 10<sup>9</sup></code></li>
	<li><code><font face=""monospace"">-10<sup>9</sup>&nbsp;&lt;= num2 &lt;= 10<sup>9</sup></font></code></li>
</ul>
",2.0,False,"class Solution {
public:
    int makeTheIntegerZero(int num1, int num2) {
        
    }
};","class Solution {
    public int makeTheIntegerZero(int num1, int num2) {
        
    }
}","class Solution(object):
    def makeTheIntegerZero(self, num1, num2):
        """"""
        :type num1: int
        :type num2: int
        :rtype: int
        """"""
        ","class Solution:
    def makeTheIntegerZero(self, num1: int, num2: int) -> int:
        ","int makeTheIntegerZero(int num1, int num2){

}","public class Solution {
    public int MakeTheIntegerZero(int num1, int num2) {
        
    }
}","/**
 * @param {number} num1
 * @param {number} num2
 * @return {number}
 */
var makeTheIntegerZero = function(num1, num2) {
    
};","# @param {Integer} num1
# @param {Integer} num2
# @return {Integer}
def make_the_integer_zero(num1, num2)
    
end","class Solution {
    func makeTheIntegerZero(_ num1: Int, _ num2: Int) -> Int {
        
    }
}","func makeTheIntegerZero(num1 int, num2 int) int {
    
}","object Solution {
    def makeTheIntegerZero(num1: Int, num2: Int): Int = {
        
    }
}","class Solution {
    fun makeTheIntegerZero(num1: Int, num2: Int): Int {
        
    }
}","impl Solution {
    pub fn make_the_integer_zero(num1: i32, num2: i32) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer $num1
     * @param Integer $num2
     * @return Integer
     */
    function makeTheIntegerZero($num1, $num2) {
        
    }
}","function makeTheIntegerZero(num1: number, num2: number): number {

};","(define/contract (make-the-integer-zero num1 num2)
  (-> exact-integer? exact-integer? exact-integer?)

  )","-spec make_the_integer_zero(Num1 :: integer(), Num2 :: integer()) -> integer().
make_the_integer_zero(Num1, Num2) ->
  .","defmodule Solution do
  @spec make_the_integer_zero(num1 :: integer, num2 :: integer) :: integer
  def make_the_integer_zero(num1, num2) do

  end
end","class Solution {
  int makeTheIntegerZero(int num1, int num2) {

  }
}",,,,,,
neither-minimum-nor-maximum,Neither Minimum nor Maximum,2733.0,2836.0,"<p>Given an integer array <code>nums</code> containing <strong>distinct</strong> <strong>positive</strong> integers, find and return <strong>any</strong> number from the array that is neither the <strong>minimum</strong> nor the <strong>maximum</strong> value in the array, or <strong><code>-1</code></strong> if there is no such number.</p>

<p>Return <em>the selected integer.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,2,1,4]
<strong>Output:</strong> 2
<strong>Explanation:</strong> In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,2]
<strong>Output:</strong> -1
<strong>Explanation:</strong> Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,1,3]
<strong>Output:</strong> 2
<strong>Explanation:</strong> Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
	<li>All values in <code>nums</code> are distinct</li>
</ul>
",1.0,False,"class Solution {
public:
    int findNonMinOrMax(vector<int>& nums) {
        
    }
};","class Solution {
    public int findNonMinOrMax(int[] nums) {
        
    }
}","class Solution(object):
    def findNonMinOrMax(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def findNonMinOrMax(self, nums: List[int]) -> int:
        ","int findNonMinOrMax(int* nums, int numsSize){

}","public class Solution {
    public int FindNonMinOrMax(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var findNonMinOrMax = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def find_non_min_or_max(nums)
    
end","class Solution {
    func findNonMinOrMax(_ nums: [Int]) -> Int {
        
    }
}","func findNonMinOrMax(nums []int) int {
    
}","object Solution {
    def findNonMinOrMax(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun findNonMinOrMax(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn find_non_min_or_max(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function findNonMinOrMax($nums) {
        
    }
}","function findNonMinOrMax(nums: number[]): number {

};","(define/contract (find-non-min-or-max nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec find_non_min_or_max(Nums :: [integer()]) -> integer().
find_non_min_or_max(Nums) ->
  .","defmodule Solution do
  @spec find_non_min_or_max(nums :: [integer]) :: integer
  def find_non_min_or_max(nums) do

  end
end","class Solution {
  int findNonMinOrMax(List<int> nums) {

  }
}",,,,,,
relocate-marbles,Relocate Marbles,2766.0,2834.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> representing the initial positions of some marbles. You are also given two <strong>0-indexed </strong>integer arrays <code>moveFrom</code> and <code>moveTo</code> of <strong>equal</strong> length.</p>

<p>Throughout <code>moveFrom.length</code> steps, you will change the positions of the marbles. On the <code>i<sup>th</sup></code> step, you will move <strong>all</strong> marbles at position <code>moveFrom[i]</code> to position <code>moveTo[i]</code>.</p>

<p>After completing all the steps, return <em>the sorted list of <strong>occupied</strong> positions</em>.</p>

<p><strong>Notes:</strong></p>

<ul>
	<li>We call a position <strong>occupied</strong> if there is at least one marble in that position.</li>
	<li>There may be multiple marbles in a single position.</li>
</ul>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]
<strong>Output:</strong> [5,6,8,9]
<strong>Explanation:</strong> Initially, the marbles are at positions 1,6,7,8.
At the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.
At the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.
At the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.
At the end, the final positions containing at least one marbles are [5,6,8,9].</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]
<strong>Output:</strong> [2]
<strong>Explanation:</strong> Initially, the marbles are at positions [1,1,3,3].
At the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].
At the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].
Since 2 is the only occupied position, we return [2].
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= moveFrom.length &lt;= 10<sup>5</sup></code></li>
	<li><code>moveFrom.length == moveTo.length</code></li>
	<li><code>1 &lt;= nums[i], moveFrom[i], moveTo[i] &lt;= 10<sup>9</sup></code></li>
	<li>The test cases are generated such that there is at least a marble in&nbsp;<code>moveFrom[i]</code>&nbsp;at the moment we want to apply&nbsp;the <code>i<sup>th</sup></code>&nbsp;move.</li>
</ul>
",2.0,False,"class Solution {
public:
    vector<int> relocateMarbles(vector<int>& nums, vector<int>& moveFrom, vector<int>& moveTo) {
        
    }
};","class Solution {
    public List<Integer> relocateMarbles(int[] nums, int[] moveFrom, int[] moveTo) {
        
    }
}","class Solution(object):
    def relocateMarbles(self, nums, moveFrom, moveTo):
        """"""
        :type nums: List[int]
        :type moveFrom: List[int]
        :type moveTo: List[int]
        :rtype: List[int]
        """"""
        ","class Solution:
    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* relocateMarbles(int* nums, int numsSize, int* moveFrom, int moveFromSize, int* moveTo, int moveToSize, int* returnSize){

}","public class Solution {
    public IList<int> RelocateMarbles(int[] nums, int[] moveFrom, int[] moveTo) {
        
    }
}","/**
 * @param {number[]} nums
 * @param {number[]} moveFrom
 * @param {number[]} moveTo
 * @return {number[]}
 */
var relocateMarbles = function(nums, moveFrom, moveTo) {
    
};","# @param {Integer[]} nums
# @param {Integer[]} move_from
# @param {Integer[]} move_to
# @return {Integer[]}
def relocate_marbles(nums, move_from, move_to)
    
end","class Solution {
    func relocateMarbles(_ nums: [Int], _ moveFrom: [Int], _ moveTo: [Int]) -> [Int] {
        
    }
}","func relocateMarbles(nums []int, moveFrom []int, moveTo []int) []int {
    
}","object Solution {
    def relocateMarbles(nums: Array[Int], moveFrom: Array[Int], moveTo: Array[Int]): List[Int] = {
        
    }
}","class Solution {
    fun relocateMarbles(nums: IntArray, moveFrom: IntArray, moveTo: IntArray): List<Int> {
        
    }
}","impl Solution {
    pub fn relocate_marbles(nums: Vec<i32>, move_from: Vec<i32>, move_to: Vec<i32>) -> Vec<i32> {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer[] $moveFrom
     * @param Integer[] $moveTo
     * @return Integer[]
     */
    function relocateMarbles($nums, $moveFrom, $moveTo) {
        
    }
}","function relocateMarbles(nums: number[], moveFrom: number[], moveTo: number[]): number[] {

};","(define/contract (relocate-marbles nums moveFrom moveTo)
  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))

  )","-spec relocate_marbles(Nums :: [integer()], MoveFrom :: [integer()], MoveTo :: [integer()]) -> [integer()].
relocate_marbles(Nums, MoveFrom, MoveTo) ->
  .","defmodule Solution do
  @spec relocate_marbles(nums :: [integer], move_from :: [integer], move_to :: [integer]) :: [integer]
  def relocate_marbles(nums, move_from, move_to) do

  end
end","class Solution {
  List<int> relocateMarbles(List<int> nums, List<int> moveFrom, List<int> moveTo) {

  }
}",,,,,,
count-zero-request-servers,Count Zero Request Servers,2747.0,2833.0,"<p>You are given an integer <code>n</code> denoting the total number of servers and a <strong>2D</strong> <strong>0-indexed </strong>integer array <code>logs</code>, where <code>logs[i] = [server_id, time]</code> denotes that the server with id <code>server_id</code> received a request at time <code>time</code>.</p>

<p>You are also given an integer <code>x</code> and a <strong>0-indexed</strong> integer array <code>queries</code>.</p>

<p>Return <em>a <strong>0-indexed</strong> integer array</em> <code>arr</code> <em>of length</em> <code>queries.length</code> <em>where</em> <code>arr[i]</code> <em>represents the number of servers that <strong>did not receive</strong> any requests during the time interval</em> <code>[queries[i] - x, queries[i]]</code>.</p>

<p>Note that the time intervals are inclusive.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]
<strong>Output:</strong> [1,2]
<strong>Explanation:</strong> 
For queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.
For queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.

</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]
<strong>Output:</strong> [0,1]
<strong>Explanation:</strong> 
For queries[0]: All servers get at least one request in the duration of [1, 3].
For queries[1]: Only server with id 3 gets no request in the duration [2,4].

</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= logs.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>
	<li><code><font face=""monospace"">logs[i].length == 2</font></code></li>
	<li><code>1 &lt;= logs[i][0] &lt;= n</code></li>
	<li><code>1 &lt;= logs[i][1] &lt;= 10<sup>6</sup></code></li>
	<li><code>1 &lt;= x &lt;= 10<sup>5</sup></code></li>
	<li><code>x &lt;&nbsp;queries[i]&nbsp;&lt;= 10<sup>6</sup></code></li>
</ul>
",2.0,False,"class Solution {
public:
    vector<int> countServers(int n, vector<vector<int>>& logs, int x, vector<int>& queries) {
        
    }
};","class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        
    }
}","class Solution(object):
    def countServers(self, n, logs, x, queries):
        """"""
        :type n: int
        :type logs: List[List[int]]
        :type x: int
        :type queries: List[int]
        :rtype: List[int]
        """"""
        ","class Solution:
    def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* countServers(int n, int** logs, int logsSize, int* logsColSize, int x, int* queries, int queriesSize, int* returnSize){

}","public class Solution {
    public int[] CountServers(int n, int[][] logs, int x, int[] queries) {
        
    }
}","/**
 * @param {number} n
 * @param {number[][]} logs
 * @param {number} x
 * @param {number[]} queries
 * @return {number[]}
 */
var countServers = function(n, logs, x, queries) {
    
};","# @param {Integer} n
# @param {Integer[][]} logs
# @param {Integer} x
# @param {Integer[]} queries
# @return {Integer[]}
def count_servers(n, logs, x, queries)
    
end","class Solution {
    func countServers(_ n: Int, _ logs: [[Int]], _ x: Int, _ queries: [Int]) -> [Int] {
        
    }
}","func countServers(n int, logs [][]int, x int, queries []int) []int {
    
}","object Solution {
    def countServers(n: Int, logs: Array[Array[Int]], x: Int, queries: Array[Int]): Array[Int] = {
        
    }
}","class Solution {
    fun countServers(n: Int, logs: Array<IntArray>, x: Int, queries: IntArray): IntArray {
        
    }
}","impl Solution {
    pub fn count_servers(n: i32, logs: Vec<Vec<i32>>, x: i32, queries: Vec<i32>) -> Vec<i32> {
        
    }
}","class Solution {

    /**
     * @param Integer $n
     * @param Integer[][] $logs
     * @param Integer $x
     * @param Integer[] $queries
     * @return Integer[]
     */
    function countServers($n, $logs, $x, $queries) {
        
    }
}","function countServers(n: number, logs: number[][], x: number, queries: number[]): number[] {

};","(define/contract (count-servers n logs x queries)
  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? (listof exact-integer?) (listof exact-integer?))

  )","-spec count_servers(N :: integer(), Logs :: [[integer()]], X :: integer(), Queries :: [integer()]) -> [integer()].
count_servers(N, Logs, X, Queries) ->
  .","defmodule Solution do
  @spec count_servers(n :: integer, logs :: [[integer]], x :: integer, queries :: [integer]) :: [integer]
  def count_servers(n, logs, x, queries) do

  end
end","class Solution {
  List<int> countServers(int n, List<List<int>> logs, int x, List<int> queries) {

  }
}",,,,,,
number-of-beautiful-pairs,Number of Beautiful Pairs,2748.0,2831.0,"<p>You are given a <strong>0-indexed </strong>integer array <code>nums</code>. A pair of indices <code>i</code>, <code>j</code> where <code>0 &lt;=&nbsp;i &lt; j &lt; nums.length</code> is called beautiful if the <strong>first digit</strong> of <code>nums[i]</code> and the <strong>last digit</strong> of <code>nums[j]</code> are <strong>coprime</strong>.</p>

<p>Return <em>the total number of beautiful pairs in </em><code>nums</code>.</p>

<p>Two integers <code>x</code> and <code>y</code> are <strong>coprime</strong> if there is no integer greater than 1 that divides both of them. In other words, <code>x</code> and <code>y</code> are coprime if <code>gcd(x, y) == 1</code>, where <code>gcd(x, y)</code> is the <strong>greatest common divisor</strong> of <code>x</code> and <code>y</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,5,1,4]
<strong>Output:</strong> 5
<strong>Explanation:</strong> There are 5 beautiful pairs in nums:
When i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.
When i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.
When i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.
When i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.
When i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.
Thus, we return 5.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [11,21,12]
<strong>Output:</strong> 2
<strong>Explanation:</strong> There are 2 beautiful pairs:
When i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.
When i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.
Thus, we return 2.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>2 &lt;= nums.length &lt;= 100</code></li>
	<li><code>1 &lt;= nums[i] &lt;= 9999</code></li>
	<li><code>nums[i] % 10 != 0</code></li>
</ul>
",1.0,False,"class Solution {
public:
    int countBeautifulPairs(vector<int>& nums) {
        
    }
};","class Solution {
    public int countBeautifulPairs(int[] nums) {
        
    }
}","class Solution(object):
    def countBeautifulPairs(self, nums):
        """"""
        :type nums: List[int]
        :rtype: int
        """"""
        ","class Solution:
    def countBeautifulPairs(self, nums: List[int]) -> int:
        ","int countBeautifulPairs(int* nums, int numsSize){

}","public class Solution {
    public int CountBeautifulPairs(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {number}
 */
var countBeautifulPairs = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Integer}
def count_beautiful_pairs(nums)
    
end","class Solution {
    func countBeautifulPairs(_ nums: [Int]) -> Int {
        
    }
}","func countBeautifulPairs(nums []int) int {
    
}","object Solution {
    def countBeautifulPairs(nums: Array[Int]): Int = {
        
    }
}","class Solution {
    fun countBeautifulPairs(nums: IntArray): Int {
        
    }
}","impl Solution {
    pub fn count_beautiful_pairs(nums: Vec<i32>) -> i32 {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Integer
     */
    function countBeautifulPairs($nums) {
        
    }
}","function countBeautifulPairs(nums: number[]): number {

};","(define/contract (count-beautiful-pairs nums)
  (-> (listof exact-integer?) exact-integer?)

  )","-spec count_beautiful_pairs(Nums :: [integer()]) -> integer().
count_beautiful_pairs(Nums) ->
  .","defmodule Solution do
  @spec count_beautiful_pairs(nums :: [integer]) :: integer
  def count_beautiful_pairs(nums) do

  end
end","class Solution {
  int countBeautifulPairs(List<int> nums) {

  }
}",,,,,,
lexicographically-smallest-string-after-substring-operation,Lexicographically Smallest String After Substring Operation,2734.0,2828.0,"<p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can do the following:</p>

<ul>
	<li>Select any non-empty substring of <code>s</code>, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, &#39;b&#39; is converted to &#39;a&#39;, and &#39;a&#39; is converted to &#39;z&#39;.</li>
</ul>

<p>Return <em>the <strong>lexicographically smallest</strong> string you can obtain after performing the above operation <strong>exactly once</strong>.</em></p>

<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>
A string <code>x</code> is <strong>lexicographically smaller</strong> than a string <code>y</code> of the same length if <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order for the first position <code>i</code> such that <code>x[i] != y[i]</code>.
<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;cbabc&quot;
<strong>Output:</strong> &quot;baabc&quot;
<strong>Explanation:</strong> We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. 
It can be proven that the resulting string is the lexicographically smallest. 
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;acbbc&quot;
<strong>Output:</strong> &quot;abaab&quot;
<strong>Explanation:</strong> We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. 
It can be proven that the resulting string is the lexicographically smallest. 
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;leetcode&quot;
<strong>Output:</strong> &quot;kddsbncd&quot;
<strong>Explanation:</strong> We apply the operation on the entire string. 
It can be proven that the resulting string is the lexicographically smallest. 
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>
	<li><code>s</code> consists of lowercase English letters</li>
</ul>
",2.0,False,"class Solution {
public:
    string smallestString(string s) {
        
    }
};","class Solution {
    public String smallestString(String s) {
        
    }
}","class Solution(object):
    def smallestString(self, s):
        """"""
        :type s: str
        :rtype: str
        """"""
        ","class Solution:
    def smallestString(self, s: str) -> str:
        ","char * smallestString(char * s){

}","public class Solution {
    public string SmallestString(string s) {
        
    }
}","/**
 * @param {string} s
 * @return {string}
 */
var smallestString = function(s) {
    
};","# @param {String} s
# @return {String}
def smallest_string(s)
    
end","class Solution {
    func smallestString(_ s: String) -> String {
        
    }
}","func smallestString(s string) string {
    
}","object Solution {
    def smallestString(s: String): String = {
        
    }
}","class Solution {
    fun smallestString(s: String): String {
        
    }
}","impl Solution {
    pub fn smallest_string(s: String) -> String {
        
    }
}","class Solution {

    /**
     * @param String $s
     * @return String
     */
    function smallestString($s) {
        
    }
}","function smallestString(s: string): string {

};","(define/contract (smallest-string s)
  (-> string? string?)

  )","-spec smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().
smallest_string(S) ->
  .","defmodule Solution do
  @spec smallest_string(s :: String.t) :: String.t
  def smallest_string(s) do

  end
end","class Solution {
  String smallestString(String s) {

  }
}",,,,,,
greatest-common-divisor-traversal,Greatest Common Divisor Traversal,2709.0,2827.0,"<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and you are allowed to <strong>traverse</strong> between its indices. You can traverse between index <code>i</code> and index <code>j</code>, <code>i != j</code>, if and only if <code>gcd(nums[i], nums[j]) &gt; 1</code>, where <code>gcd</code> is the <strong>greatest common divisor</strong>.</p>

<p>Your task is to determine if for <strong>every pair</strong> of indices <code>i</code> and <code>j</code> in nums, where <code>i &lt; j</code>, there exists a <strong>sequence of traversals</strong> that can take us from <code>i</code> to <code>j</code>.</p>

<p>Return <code>true</code><em> if it is possible to traverse between all such pairs of indices,</em><em> or </em><code>false</code><em> otherwise.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> nums = [2,3,6]
<strong>Output:</strong> true
<strong>Explanation:</strong> In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).
To go from index 0 to index 1, we can use the sequence of traversals 0 -&gt; 2 -&gt; 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 &gt; 1.
To go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 &gt; 1.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> nums = [3,9,5]
<strong>Output:</strong> false
<strong>Explanation:</strong> No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> nums = [4,3,12,8]
<strong>Output:</strong> true
<strong>Explanation:</strong> There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>
	<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>
</ul>
",3.0,False,"class Solution {
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        
    }
};","class Solution {
    public boolean canTraverseAllPairs(int[] nums) {
        
    }
}","class Solution(object):
    def canTraverseAllPairs(self, nums):
        """"""
        :type nums: List[int]
        :rtype: bool
        """"""
        ","class Solution:
    def canTraverseAllPairs(self, nums: List[int]) -> bool:
        ","bool canTraverseAllPairs(int* nums, int numsSize){

}","public class Solution {
    public bool CanTraverseAllPairs(int[] nums) {
        
    }
}","/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canTraverseAllPairs = function(nums) {
    
};","# @param {Integer[]} nums
# @return {Boolean}
def can_traverse_all_pairs(nums)
    
end","class Solution {
    func canTraverseAllPairs(_ nums: [Int]) -> Bool {
        
    }
}","func canTraverseAllPairs(nums []int) bool {
    
}","object Solution {
    def canTraverseAllPairs(nums: Array[Int]): Boolean = {
        
    }
}","class Solution {
    fun canTraverseAllPairs(nums: IntArray): Boolean {
        
    }
}","impl Solution {
    pub fn can_traverse_all_pairs(nums: Vec<i32>) -> bool {
        
    }
}","class Solution {

    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function canTraverseAllPairs($nums) {
        
    }
}","function canTraverseAllPairs(nums: number[]): boolean {

};","(define/contract (can-traverse-all-pairs nums)
  (-> (listof exact-integer?) boolean?)

  )","-spec can_traverse_all_pairs(Nums :: [integer()]) -> boolean().
can_traverse_all_pairs(Nums) ->
  .","defmodule Solution do
  @spec can_traverse_all_pairs(nums :: [integer]) :: boolean
  def can_traverse_all_pairs(nums) do

  end
end","class Solution {
  bool canTraverseAllPairs(List<int> nums) {

  }
}",,,,,,
find-a-good-subset-of-the-matrix,Find a Good Subset of the Matrix,2732.0,2826.0,"<p>You are given a <strong>0-indexed</strong> <code>m x n</code> binary matrix <code>grid</code>.</p>

<p>Let us call a <strong>non-empty</strong> subset of rows <strong>good</strong> if the sum of each column of the subset is at most half of the length of the subset.</p>

<p>More formally, if the length of the chosen subset of rows is <code>k</code>, then the sum of each column should be at most <code>floor(k / 2)</code>.</p>

<p>Return <em>an integer array that contains row indices of a good subset sorted in <strong>ascending</strong> order.</em></p>

<p>If there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.</p>

<p>A <strong>subset</strong> of rows of the matrix <code>grid</code> is any matrix that can be obtained by deleting some (possibly none or all) rows from <code>grid</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]
<strong>Output:</strong> [0,1]
<strong>Explanation:</strong> We can choose the 0<sup>th</sup> and 1<sup>st</sup> rows to create a good subset of rows.
The length of the chosen subset is 2.
- The sum of the 0<sup>th</sup>&nbsp;column is 0 + 0 = 0, which is at most half of the length of the subset.
- The sum of the 1<sup>st</sup>&nbsp;column is 1 + 0 = 1, which is at most half of the length of the subset.
- The sum of the 2<sup>nd</sup>&nbsp;column is 1 + 0 = 1, which is at most half of the length of the subset.
- The sum of the 3<sup>rd</sup>&nbsp;column is 0 + 1 = 1, which is at most half of the length of the subset.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> grid = [[0]]
<strong>Output:</strong> [0]
<strong>Explanation:</strong> We can choose the 0<sup>th</sup> row to create a good subset of rows.
The length of the chosen subset is 1.
- The sum of the 0<sup>th</sup>&nbsp;column is 0, which is at most half of the length of the subset.
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> grid = [[1,1,1],[1,1,1]]
<strong>Output:</strong> []
<strong>Explanation:</strong> It is impossible to choose any subset of rows to create a good subset.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>m == grid.length</code></li>
	<li><code>n == grid[i].length</code></li>
	<li><code>1 &lt;= m &lt;= 10<sup>4</sup></code></li>
	<li><code>1 &lt;= n &lt;= 5</code></li>
	<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
",3.0,False,"class Solution {
public:
    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {
        
    }
};","class Solution {
    public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {
        
    }
}","class Solution(object):
    def goodSubsetofBinaryMatrix(self, grid):
        """"""
        :type grid: List[List[int]]
        :rtype: List[int]
        """"""
        ","class Solution:
    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:
        ","/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* goodSubsetofBinaryMatrix(int** grid, int gridSize, int* gridColSize, int* returnSize){

}","public class Solution {
    public IList<int> GoodSubsetofBinaryMatrix(int[][] grid) {
        
    }
}","/**
 * @param {number[][]} grid
 * @return {number[]}
 */
var goodSubsetofBinaryMatrix = function(grid) {
    
};","# @param {Integer[][]} grid
# @return {Integer[]}
def good_subsetof_binary_matrix(grid)
    
end","class Solution {
    func goodSubsetofBinaryMatrix(_ grid: [[Int]]) -> [Int] {
        
    }
}","func goodSubsetofBinaryMatrix(grid [][]int) []int {
    
}","object Solution {
    def goodSubsetofBinaryMatrix(grid: Array[Array[Int]]): List[Int] = {
        
    }
}","class Solution {
    fun goodSubsetofBinaryMatrix(grid: Array<IntArray>): List<Int> {
        
    }
}","impl Solution {
    pub fn good_subsetof_binary_matrix(grid: Vec<Vec<i32>>) -> Vec<i32> {
        
    }
}","class Solution {

    /**
     * @param Integer[][] $grid
     * @return Integer[]
     */
    function goodSubsetofBinaryMatrix($grid) {
        
    }
}","function goodSubsetofBinaryMatrix(grid: number[][]): number[] {

};","(define/contract (good-subsetof-binary-matrix grid)
  (-> (listof (listof exact-integer?)) (listof exact-integer?))

  )","-spec good_subsetof_binary_matrix(Grid :: [[integer()]]) -> [integer()].
good_subsetof_binary_matrix(Grid) ->
  .","defmodule Solution do
  @spec good_subsetof_binary_matrix(grid :: [[integer]]) :: [integer]
  def good_subsetof_binary_matrix(grid) do

  end
end","class Solution {
  List<int> goodSubsetofBinaryMatrix(List<List<int>> grid) {

  }
}",,,,,,
minimize-string-length,Minimize String Length,2716.0,2825.0,"<p>Given a <strong>0-indexed</strong> string <code>s</code>, repeatedly perform the following operation <strong>any</strong> number of times:</p>

<ul>
	<li>Choose an index <code>i</code> in the string, and let <code>c</code> be the character in position <code>i</code>. <strong>Delete</strong> the <strong>closest occurrence</strong> of <code>c</code> to the <strong>left</strong> of <code>i</code> (if any) and the <strong>closest occurrence</strong> of <code>c</code> to the <strong>right</strong> of <code>i</code> (if any).</li>
</ul>

<p>Your task is to <strong>minimize</strong> the length of <code>s</code> by performing the above operation any number of times.</p>

<p>Return <em>an integer denoting the length of the <strong>minimized</strong> string.</em></p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;aaabc&quot;
<strong>Output:</strong> 3
<strong>Explanation:</strong> In this example, s is &quot;aaabc&quot;. We can start by selecting the character &#39;a&#39; at index 1. We then remove the closest &#39;a&#39; to the left of index 1, which is at index 0, and the closest &#39;a&#39; to the right of index 1, which is at index 2. After this operation, the string becomes &quot;abc&quot;. Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;cbbd&quot;
<strong>Output:</strong> 3
<strong>Explanation:</strong> For this we can start with character &#39;b&#39; at index 1. There is no occurrence of &#39;b&#39; to the left of index 1, but there is one to the right at index 2, so we delete the &#39;b&#39; at index 2. The string becomes &quot;cbd&quot; and further operations will leave it unchanged. Hence, the minimized length is 3.&nbsp;
</pre>

<p><strong class=""example"">Example 3:</strong></p>

<pre>
<strong>Input:</strong> s = &quot;dddaaa&quot;
<strong>Output:</strong> 2
<strong>Explanation:</strong> For this, we can start with the character &#39;d&#39; at index 1. The closest occurrence of a &#39;d&#39; to its left is at index 0, and the closest occurrence of a &#39;d&#39; to its right is at index 2. We delete both index 0 and 2, so the string becomes &quot;daaa&quot;. In the new string, we can select the character &#39;a&#39; at index 2. The closest occurrence of an &#39;a&#39; to its left is at index 1, and the closest occurrence of an &#39;a&#39; to its right is at index 3. We delete both of them, and the string becomes &quot;da&quot;. We cannot minimize this further, so the minimized length is 2.
</pre>

<div class=""notranslate"" style=""all: initial;"">&nbsp;</div>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 100</code></li>
	<li><code>s</code> contains only lowercase English letters</li>
</ul>
",1.0,False,"class Solution {
public:
    int minimizedStringLength(string s) {
        
    }
};","class Solution {
    public int minimizedStringLength(String s) {
        
    }
}","class Solution(object):
    def minimizedStringLength(self, s):
        """"""
        :type s: str
        :rtype: int
        """"""
        ","class Solution:
    def minimizedStringLength(self, s: str) -> int:
        ","int minimizedStringLength(char * s){

}","public class Solution {
    public int MinimizedStringLength(string s) {
        
    }
}","/**
 * @param {string} s
 * @return {number}
 */
var minimizedStringLength = function(s) {
    
};","# @param {String} s
# @return {Integer}
def minimized_string_length(s)
    
end","class Solution {
    func minimizedStringLength(_ s: String) -> Int {
        
    }
}","func minimizedStringLength(s string) int {
    
}","object Solution {
    def minimizedStringLength(s: String): Int = {
        
    }
}","class Solution {
    fun minimizedStringLength(s: String): Int {
        
    }
}","impl Solution {
    pub fn minimized_string_length(s: String) -> i32 {
        
    }
}","class Solution {

    /**
     * @param String $s
     * @return Integer
     */
    function minimizedStringLength($s) {
        
    }
}","function minimizedStringLength(s: string): number {

};","(define/contract (minimized-string-length s)
  (-> string? exact-integer?)

  )","-spec minimized_string_length(S :: unicode:unicode_binary()) -> integer().
minimized_string_length(S) ->
  .","defmodule Solution do
  @spec minimized_string_length(s :: String.t) :: integer
  def minimized_string_length(s) do

  end
end","class Solution {
  int minimizedStringLength(String s) {

  }
}",,,,,,
check-if-the-number-is-fascinating,Check if The Number is Fascinating,2729.0,2824.0,"<p>You are given an integer <code>n</code> that consists of exactly <code>3</code> digits.</p>

<p>We call the number <code>n</code> <strong>fascinating</strong> if, after the following modification, the resulting number contains all the digits from <code>1</code> to <code>9</code> <strong>exactly</strong> once and does not contain any <code>0</code>&#39;s:</p>

<ul>
	<li><strong>Concatenate</strong> <code>n</code> with the numbers <code>2 * n</code> and <code>3 * n</code>.</li>
</ul>

<p>Return <code>true</code><em> if </em><code>n</code><em> is fascinating, or </em><code>false</code><em> otherwise</em>.</p>

<p><strong>Concatenating</strong> two numbers means joining them together. For example, the concatenation of <code>121</code> and <code>371</code> is <code>121371</code>.</p>

<p>&nbsp;</p>
<p><strong class=""example"">Example 1:</strong></p>

<pre>
<strong>Input:</strong> n = 192
<strong>Output:</strong> true
<strong>Explanation:</strong> We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once.
</pre>

<p><strong class=""example"">Example 2:</strong></p>

<pre>
<strong>Input:</strong> n = 100
<strong>Output:</strong> false
<strong>Explanation:</strong> We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions.
</pre>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>100 &lt;= n &lt;= 999</code></li>
</ul>
",1.0,False,"class Solution {
public:
    bool isFascinating(int n) {
        
    }
};","class Solution {
    public boolean isFascinating(int n) {
        
    }
}","class Solution(object):
    def isFascinating(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""
        ","class Solution:
    def isFascinating(self, n: int) -> bool:
        ","bool isFascinating(int n){

}","public class Solution {
    public bool IsFascinating(int n) {
        
    }
}","/**
 * @param {number} n
 * @return {boolean}
 */
var isFascinating = function(n) {
    
};","# @param {Integer} n
# @return {Boolean}
def is_fascinating(n)
    
end","class Solution {
    func isFascinating(_ n: Int) -> Bool {
        
    }
}","func isFascinating(n int) bool {
    
}","object Solution {
    def isFascinating(n: Int): Boolean = {
        
    }
}","class Solution {
    fun isFascinating(n: Int): Boolean {
        
    }
}","impl Solution {
    pub fn is_fascinating(n: i32) -> bool {
        
    }
}","class Solution {

    /**
     * @param Integer $n
     * @return Boolean
     */
    function isFascinating($n) {
        
    }
}","function isFascinating(n: number): boolean {

};","(define/contract (is-fascinating n)
  (-> exact-integer? boolean?)

  )","-spec is_fascinating(N :: integer()) -> boolean().
is_fascinating(N) ->
  .","defmodule Solution do
  @spec is_fascinating(n :: integer) :: boolean
  def is_fascinating(n) do

  end
end","class Solution {
  bool isFascinating(int n) {

  }
}",,,,,,
